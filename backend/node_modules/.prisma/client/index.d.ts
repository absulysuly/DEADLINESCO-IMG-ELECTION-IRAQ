
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Governorate
 * 
 */
export type Governorate = $Result.DefaultSelection<Prisma.$GovernoratePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Article
 * 
 */
export type Article = $Result.DefaultSelection<Prisma.$ArticlePayload>
/**
 * Model Debate
 * 
 */
export type Debate = $Result.DefaultSelection<Prisma.$DebatePayload>
/**
 * Model DebateParticipant
 * 
 */
export type DebateParticipant = $Result.DefaultSelection<Prisma.$DebateParticipantPayload>
/**
 * Model Party
 * 
 */
export type Party = $Result.DefaultSelection<Prisma.$PartyPayload>
/**
 * Model Candidate
 * 
 */
export type Candidate = $Result.DefaultSelection<Prisma.$CandidatePayload>
/**
 * Model GovernorateStatistic
 * 
 */
export type GovernorateStatistic = $Result.DefaultSelection<Prisma.$GovernorateStatisticPayload>
/**
 * Model GovernorateParticipation
 * 
 */
export type GovernorateParticipation = $Result.DefaultSelection<Prisma.$GovernorateParticipationPayload>
/**
 * Model DashboardSnapshot
 * 
 */
export type DashboardSnapshot = $Result.DefaultSelection<Prisma.$DashboardSnapshotPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  Voter: 'Voter',
  Candidate: 'Candidate'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const PostType: {
  Post: 'Post',
  Reel: 'Reel'
};

export type PostType = (typeof PostType)[keyof typeof PostType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type PostType = $Enums.PostType

export const PostType: typeof $Enums.PostType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Governorates
 * const governorates = await prisma.governorate.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Governorates
   * const governorates = await prisma.governorate.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.governorate`: Exposes CRUD operations for the **Governorate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Governorates
    * const governorates = await prisma.governorate.findMany()
    * ```
    */
  get governorate(): Prisma.GovernorateDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<ExtArgs>;

  /**
   * `prisma.debate`: Exposes CRUD operations for the **Debate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Debates
    * const debates = await prisma.debate.findMany()
    * ```
    */
  get debate(): Prisma.DebateDelegate<ExtArgs>;

  /**
   * `prisma.debateParticipant`: Exposes CRUD operations for the **DebateParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DebateParticipants
    * const debateParticipants = await prisma.debateParticipant.findMany()
    * ```
    */
  get debateParticipant(): Prisma.DebateParticipantDelegate<ExtArgs>;

  /**
   * `prisma.party`: Exposes CRUD operations for the **Party** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parties
    * const parties = await prisma.party.findMany()
    * ```
    */
  get party(): Prisma.PartyDelegate<ExtArgs>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<ExtArgs>;

  /**
   * `prisma.governorateStatistic`: Exposes CRUD operations for the **GovernorateStatistic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GovernorateStatistics
    * const governorateStatistics = await prisma.governorateStatistic.findMany()
    * ```
    */
  get governorateStatistic(): Prisma.GovernorateStatisticDelegate<ExtArgs>;

  /**
   * `prisma.governorateParticipation`: Exposes CRUD operations for the **GovernorateParticipation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GovernorateParticipations
    * const governorateParticipations = await prisma.governorateParticipation.findMany()
    * ```
    */
  get governorateParticipation(): Prisma.GovernorateParticipationDelegate<ExtArgs>;

  /**
   * `prisma.dashboardSnapshot`: Exposes CRUD operations for the **DashboardSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DashboardSnapshots
    * const dashboardSnapshots = await prisma.dashboardSnapshot.findMany()
    * ```
    */
  get dashboardSnapshot(): Prisma.DashboardSnapshotDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Governorate: 'Governorate',
    User: 'User',
    Post: 'Post',
    Event: 'Event',
    Article: 'Article',
    Debate: 'Debate',
    DebateParticipant: 'DebateParticipant',
    Party: 'Party',
    Candidate: 'Candidate',
    GovernorateStatistic: 'GovernorateStatistic',
    GovernorateParticipation: 'GovernorateParticipation',
    DashboardSnapshot: 'DashboardSnapshot'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "governorate" | "user" | "post" | "event" | "article" | "debate" | "debateParticipant" | "party" | "candidate" | "governorateStatistic" | "governorateParticipation" | "dashboardSnapshot"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Governorate: {
        payload: Prisma.$GovernoratePayload<ExtArgs>
        fields: Prisma.GovernorateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GovernorateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GovernorateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload>
          }
          findFirst: {
            args: Prisma.GovernorateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GovernorateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload>
          }
          findMany: {
            args: Prisma.GovernorateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload>[]
          }
          create: {
            args: Prisma.GovernorateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload>
          }
          createMany: {
            args: Prisma.GovernorateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GovernorateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload>[]
          }
          delete: {
            args: Prisma.GovernorateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload>
          }
          update: {
            args: Prisma.GovernorateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload>
          }
          deleteMany: {
            args: Prisma.GovernorateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GovernorateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GovernorateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernoratePayload>
          }
          aggregate: {
            args: Prisma.GovernorateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGovernorate>
          }
          groupBy: {
            args: Prisma.GovernorateGroupByArgs<ExtArgs>
            result: $Utils.Optional<GovernorateGroupByOutputType>[]
          }
          count: {
            args: Prisma.GovernorateCountArgs<ExtArgs>
            result: $Utils.Optional<GovernorateCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Article: {
        payload: Prisma.$ArticlePayload<ExtArgs>
        fields: Prisma.ArticleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArticleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArticleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          findFirst: {
            args: Prisma.ArticleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArticleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          findMany: {
            args: Prisma.ArticleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>[]
          }
          create: {
            args: Prisma.ArticleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          createMany: {
            args: Prisma.ArticleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArticleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>[]
          }
          delete: {
            args: Prisma.ArticleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          update: {
            args: Prisma.ArticleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          deleteMany: {
            args: Prisma.ArticleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArticleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArticleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          aggregate: {
            args: Prisma.ArticleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArticle>
          }
          groupBy: {
            args: Prisma.ArticleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArticleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArticleCountArgs<ExtArgs>
            result: $Utils.Optional<ArticleCountAggregateOutputType> | number
          }
        }
      }
      Debate: {
        payload: Prisma.$DebatePayload<ExtArgs>
        fields: Prisma.DebateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DebateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DebateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload>
          }
          findFirst: {
            args: Prisma.DebateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DebateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload>
          }
          findMany: {
            args: Prisma.DebateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload>[]
          }
          create: {
            args: Prisma.DebateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload>
          }
          createMany: {
            args: Prisma.DebateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DebateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload>[]
          }
          delete: {
            args: Prisma.DebateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload>
          }
          update: {
            args: Prisma.DebateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload>
          }
          deleteMany: {
            args: Prisma.DebateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DebateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DebateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebatePayload>
          }
          aggregate: {
            args: Prisma.DebateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDebate>
          }
          groupBy: {
            args: Prisma.DebateGroupByArgs<ExtArgs>
            result: $Utils.Optional<DebateGroupByOutputType>[]
          }
          count: {
            args: Prisma.DebateCountArgs<ExtArgs>
            result: $Utils.Optional<DebateCountAggregateOutputType> | number
          }
        }
      }
      DebateParticipant: {
        payload: Prisma.$DebateParticipantPayload<ExtArgs>
        fields: Prisma.DebateParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DebateParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DebateParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload>
          }
          findFirst: {
            args: Prisma.DebateParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DebateParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload>
          }
          findMany: {
            args: Prisma.DebateParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload>[]
          }
          create: {
            args: Prisma.DebateParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload>
          }
          createMany: {
            args: Prisma.DebateParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DebateParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload>[]
          }
          delete: {
            args: Prisma.DebateParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload>
          }
          update: {
            args: Prisma.DebateParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload>
          }
          deleteMany: {
            args: Prisma.DebateParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DebateParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DebateParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DebateParticipantPayload>
          }
          aggregate: {
            args: Prisma.DebateParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDebateParticipant>
          }
          groupBy: {
            args: Prisma.DebateParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<DebateParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.DebateParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<DebateParticipantCountAggregateOutputType> | number
          }
        }
      }
      Party: {
        payload: Prisma.$PartyPayload<ExtArgs>
        fields: Prisma.PartyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          findFirst: {
            args: Prisma.PartyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          findMany: {
            args: Prisma.PartyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>[]
          }
          create: {
            args: Prisma.PartyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          createMany: {
            args: Prisma.PartyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>[]
          }
          delete: {
            args: Prisma.PartyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          update: {
            args: Prisma.PartyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          deleteMany: {
            args: Prisma.PartyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartyPayload>
          }
          aggregate: {
            args: Prisma.PartyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParty>
          }
          groupBy: {
            args: Prisma.PartyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartyCountArgs<ExtArgs>
            result: $Utils.Optional<PartyCountAggregateOutputType> | number
          }
        }
      }
      Candidate: {
        payload: Prisma.$CandidatePayload<ExtArgs>
        fields: Prisma.CandidateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findFirst: {
            args: Prisma.CandidateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findMany: {
            args: Prisma.CandidateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          create: {
            args: Prisma.CandidateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          createMany: {
            args: Prisma.CandidateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          delete: {
            args: Prisma.CandidateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          update: {
            args: Prisma.CandidateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          deleteMany: {
            args: Prisma.CandidateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CandidateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          aggregate: {
            args: Prisma.CandidateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidate>
          }
          groupBy: {
            args: Prisma.CandidateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateCountAggregateOutputType> | number
          }
        }
      }
      GovernorateStatistic: {
        payload: Prisma.$GovernorateStatisticPayload<ExtArgs>
        fields: Prisma.GovernorateStatisticFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GovernorateStatisticFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GovernorateStatisticFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload>
          }
          findFirst: {
            args: Prisma.GovernorateStatisticFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GovernorateStatisticFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload>
          }
          findMany: {
            args: Prisma.GovernorateStatisticFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload>[]
          }
          create: {
            args: Prisma.GovernorateStatisticCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload>
          }
          createMany: {
            args: Prisma.GovernorateStatisticCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GovernorateStatisticCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload>[]
          }
          delete: {
            args: Prisma.GovernorateStatisticDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload>
          }
          update: {
            args: Prisma.GovernorateStatisticUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload>
          }
          deleteMany: {
            args: Prisma.GovernorateStatisticDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GovernorateStatisticUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GovernorateStatisticUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateStatisticPayload>
          }
          aggregate: {
            args: Prisma.GovernorateStatisticAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGovernorateStatistic>
          }
          groupBy: {
            args: Prisma.GovernorateStatisticGroupByArgs<ExtArgs>
            result: $Utils.Optional<GovernorateStatisticGroupByOutputType>[]
          }
          count: {
            args: Prisma.GovernorateStatisticCountArgs<ExtArgs>
            result: $Utils.Optional<GovernorateStatisticCountAggregateOutputType> | number
          }
        }
      }
      GovernorateParticipation: {
        payload: Prisma.$GovernorateParticipationPayload<ExtArgs>
        fields: Prisma.GovernorateParticipationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GovernorateParticipationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GovernorateParticipationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload>
          }
          findFirst: {
            args: Prisma.GovernorateParticipationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GovernorateParticipationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload>
          }
          findMany: {
            args: Prisma.GovernorateParticipationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload>[]
          }
          create: {
            args: Prisma.GovernorateParticipationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload>
          }
          createMany: {
            args: Prisma.GovernorateParticipationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GovernorateParticipationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload>[]
          }
          delete: {
            args: Prisma.GovernorateParticipationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload>
          }
          update: {
            args: Prisma.GovernorateParticipationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload>
          }
          deleteMany: {
            args: Prisma.GovernorateParticipationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GovernorateParticipationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GovernorateParticipationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GovernorateParticipationPayload>
          }
          aggregate: {
            args: Prisma.GovernorateParticipationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGovernorateParticipation>
          }
          groupBy: {
            args: Prisma.GovernorateParticipationGroupByArgs<ExtArgs>
            result: $Utils.Optional<GovernorateParticipationGroupByOutputType>[]
          }
          count: {
            args: Prisma.GovernorateParticipationCountArgs<ExtArgs>
            result: $Utils.Optional<GovernorateParticipationCountAggregateOutputType> | number
          }
        }
      }
      DashboardSnapshot: {
        payload: Prisma.$DashboardSnapshotPayload<ExtArgs>
        fields: Prisma.DashboardSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DashboardSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DashboardSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload>
          }
          findFirst: {
            args: Prisma.DashboardSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DashboardSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload>
          }
          findMany: {
            args: Prisma.DashboardSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload>[]
          }
          create: {
            args: Prisma.DashboardSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload>
          }
          createMany: {
            args: Prisma.DashboardSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DashboardSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload>[]
          }
          delete: {
            args: Prisma.DashboardSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload>
          }
          update: {
            args: Prisma.DashboardSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.DashboardSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DashboardSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DashboardSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardSnapshotPayload>
          }
          aggregate: {
            args: Prisma.DashboardSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDashboardSnapshot>
          }
          groupBy: {
            args: Prisma.DashboardSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<DashboardSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.DashboardSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<DashboardSnapshotCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GovernorateCountOutputType
   */

  export type GovernorateCountOutputType = {
    users: number
    events: number
  }

  export type GovernorateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | GovernorateCountOutputTypeCountUsersArgs
    events?: boolean | GovernorateCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * GovernorateCountOutputType without action
   */
  export type GovernorateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateCountOutputType
     */
    select?: GovernorateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GovernorateCountOutputType without action
   */
  export type GovernorateCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * GovernorateCountOutputType without action
   */
  export type GovernorateCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    posts: number
    organized: number
    debates: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    organized?: boolean | UserCountOutputTypeCountOrganizedArgs
    debates?: boolean | UserCountOutputTypeCountDebatesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrganizedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDebatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DebateParticipantWhereInput
  }


  /**
   * Count Type DebateCountOutputType
   */

  export type DebateCountOutputType = {
    participants: number
  }

  export type DebateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | DebateCountOutputTypeCountParticipantsArgs
  }

  // Custom InputTypes
  /**
   * DebateCountOutputType without action
   */
  export type DebateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateCountOutputType
     */
    select?: DebateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DebateCountOutputType without action
   */
  export type DebateCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DebateParticipantWhereInput
  }


  /**
   * Count Type PartyCountOutputType
   */

  export type PartyCountOutputType = {
    candidates: number
  }

  export type PartyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidates?: boolean | PartyCountOutputTypeCountCandidatesArgs
  }

  // Custom InputTypes
  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartyCountOutputType
     */
    select?: PartyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartyCountOutputType without action
   */
  export type PartyCountOutputTypeCountCandidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Governorate
   */

  export type AggregateGovernorate = {
    _count: GovernorateCountAggregateOutputType | null
    _min: GovernorateMinAggregateOutputType | null
    _max: GovernorateMaxAggregateOutputType | null
  }

  export type GovernorateMinAggregateOutputType = {
    id: string | null
    name: string | null
    enName: string | null
    slug: string | null
    path: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GovernorateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    enName: string | null
    slug: string | null
    path: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GovernorateCountAggregateOutputType = {
    id: number
    name: number
    enName: number
    slug: number
    path: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GovernorateMinAggregateInputType = {
    id?: true
    name?: true
    enName?: true
    slug?: true
    path?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GovernorateMaxAggregateInputType = {
    id?: true
    name?: true
    enName?: true
    slug?: true
    path?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GovernorateCountAggregateInputType = {
    id?: true
    name?: true
    enName?: true
    slug?: true
    path?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GovernorateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Governorate to aggregate.
     */
    where?: GovernorateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Governorates to fetch.
     */
    orderBy?: GovernorateOrderByWithRelationInput | GovernorateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GovernorateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Governorates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Governorates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Governorates
    **/
    _count?: true | GovernorateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GovernorateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GovernorateMaxAggregateInputType
  }

  export type GetGovernorateAggregateType<T extends GovernorateAggregateArgs> = {
        [P in keyof T & keyof AggregateGovernorate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGovernorate[P]>
      : GetScalarType<T[P], AggregateGovernorate[P]>
  }




  export type GovernorateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GovernorateWhereInput
    orderBy?: GovernorateOrderByWithAggregationInput | GovernorateOrderByWithAggregationInput[]
    by: GovernorateScalarFieldEnum[] | GovernorateScalarFieldEnum
    having?: GovernorateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GovernorateCountAggregateInputType | true
    _min?: GovernorateMinAggregateInputType
    _max?: GovernorateMaxAggregateInputType
  }

  export type GovernorateGroupByOutputType = {
    id: string
    name: string
    enName: string
    slug: string
    path: string | null
    createdAt: Date
    updatedAt: Date
    _count: GovernorateCountAggregateOutputType | null
    _min: GovernorateMinAggregateOutputType | null
    _max: GovernorateMaxAggregateOutputType | null
  }

  type GetGovernorateGroupByPayload<T extends GovernorateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GovernorateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GovernorateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GovernorateGroupByOutputType[P]>
            : GetScalarType<T[P], GovernorateGroupByOutputType[P]>
        }
      >
    >


  export type GovernorateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    enName?: boolean
    slug?: boolean
    path?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Governorate$usersArgs<ExtArgs>
    events?: boolean | Governorate$eventsArgs<ExtArgs>
    stats?: boolean | Governorate$statsArgs<ExtArgs>
    _count?: boolean | GovernorateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["governorate"]>

  export type GovernorateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    enName?: boolean
    slug?: boolean
    path?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["governorate"]>

  export type GovernorateSelectScalar = {
    id?: boolean
    name?: boolean
    enName?: boolean
    slug?: boolean
    path?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GovernorateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Governorate$usersArgs<ExtArgs>
    events?: boolean | Governorate$eventsArgs<ExtArgs>
    stats?: boolean | Governorate$statsArgs<ExtArgs>
    _count?: boolean | GovernorateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GovernorateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GovernoratePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Governorate"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      stats: Prisma.$GovernorateStatisticPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      enName: string
      slug: string
      path: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["governorate"]>
    composites: {}
  }

  type GovernorateGetPayload<S extends boolean | null | undefined | GovernorateDefaultArgs> = $Result.GetResult<Prisma.$GovernoratePayload, S>

  type GovernorateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GovernorateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GovernorateCountAggregateInputType | true
    }

  export interface GovernorateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Governorate'], meta: { name: 'Governorate' } }
    /**
     * Find zero or one Governorate that matches the filter.
     * @param {GovernorateFindUniqueArgs} args - Arguments to find a Governorate
     * @example
     * // Get one Governorate
     * const governorate = await prisma.governorate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GovernorateFindUniqueArgs>(args: SelectSubset<T, GovernorateFindUniqueArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Governorate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GovernorateFindUniqueOrThrowArgs} args - Arguments to find a Governorate
     * @example
     * // Get one Governorate
     * const governorate = await prisma.governorate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GovernorateFindUniqueOrThrowArgs>(args: SelectSubset<T, GovernorateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Governorate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateFindFirstArgs} args - Arguments to find a Governorate
     * @example
     * // Get one Governorate
     * const governorate = await prisma.governorate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GovernorateFindFirstArgs>(args?: SelectSubset<T, GovernorateFindFirstArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Governorate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateFindFirstOrThrowArgs} args - Arguments to find a Governorate
     * @example
     * // Get one Governorate
     * const governorate = await prisma.governorate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GovernorateFindFirstOrThrowArgs>(args?: SelectSubset<T, GovernorateFindFirstOrThrowArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Governorates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Governorates
     * const governorates = await prisma.governorate.findMany()
     * 
     * // Get first 10 Governorates
     * const governorates = await prisma.governorate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const governorateWithIdOnly = await prisma.governorate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GovernorateFindManyArgs>(args?: SelectSubset<T, GovernorateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Governorate.
     * @param {GovernorateCreateArgs} args - Arguments to create a Governorate.
     * @example
     * // Create one Governorate
     * const Governorate = await prisma.governorate.create({
     *   data: {
     *     // ... data to create a Governorate
     *   }
     * })
     * 
     */
    create<T extends GovernorateCreateArgs>(args: SelectSubset<T, GovernorateCreateArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Governorates.
     * @param {GovernorateCreateManyArgs} args - Arguments to create many Governorates.
     * @example
     * // Create many Governorates
     * const governorate = await prisma.governorate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GovernorateCreateManyArgs>(args?: SelectSubset<T, GovernorateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Governorates and returns the data saved in the database.
     * @param {GovernorateCreateManyAndReturnArgs} args - Arguments to create many Governorates.
     * @example
     * // Create many Governorates
     * const governorate = await prisma.governorate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Governorates and only return the `id`
     * const governorateWithIdOnly = await prisma.governorate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GovernorateCreateManyAndReturnArgs>(args?: SelectSubset<T, GovernorateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Governorate.
     * @param {GovernorateDeleteArgs} args - Arguments to delete one Governorate.
     * @example
     * // Delete one Governorate
     * const Governorate = await prisma.governorate.delete({
     *   where: {
     *     // ... filter to delete one Governorate
     *   }
     * })
     * 
     */
    delete<T extends GovernorateDeleteArgs>(args: SelectSubset<T, GovernorateDeleteArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Governorate.
     * @param {GovernorateUpdateArgs} args - Arguments to update one Governorate.
     * @example
     * // Update one Governorate
     * const governorate = await prisma.governorate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GovernorateUpdateArgs>(args: SelectSubset<T, GovernorateUpdateArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Governorates.
     * @param {GovernorateDeleteManyArgs} args - Arguments to filter Governorates to delete.
     * @example
     * // Delete a few Governorates
     * const { count } = await prisma.governorate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GovernorateDeleteManyArgs>(args?: SelectSubset<T, GovernorateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Governorates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Governorates
     * const governorate = await prisma.governorate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GovernorateUpdateManyArgs>(args: SelectSubset<T, GovernorateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Governorate.
     * @param {GovernorateUpsertArgs} args - Arguments to update or create a Governorate.
     * @example
     * // Update or create a Governorate
     * const governorate = await prisma.governorate.upsert({
     *   create: {
     *     // ... data to create a Governorate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Governorate we want to update
     *   }
     * })
     */
    upsert<T extends GovernorateUpsertArgs>(args: SelectSubset<T, GovernorateUpsertArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Governorates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateCountArgs} args - Arguments to filter Governorates to count.
     * @example
     * // Count the number of Governorates
     * const count = await prisma.governorate.count({
     *   where: {
     *     // ... the filter for the Governorates we want to count
     *   }
     * })
    **/
    count<T extends GovernorateCountArgs>(
      args?: Subset<T, GovernorateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GovernorateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Governorate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GovernorateAggregateArgs>(args: Subset<T, GovernorateAggregateArgs>): Prisma.PrismaPromise<GetGovernorateAggregateType<T>>

    /**
     * Group by Governorate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GovernorateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GovernorateGroupByArgs['orderBy'] }
        : { orderBy?: GovernorateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GovernorateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGovernorateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Governorate model
   */
  readonly fields: GovernorateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Governorate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GovernorateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Governorate$usersArgs<ExtArgs> = {}>(args?: Subset<T, Governorate$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends Governorate$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Governorate$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    stats<T extends Governorate$statsArgs<ExtArgs> = {}>(args?: Subset<T, Governorate$statsArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Governorate model
   */ 
  interface GovernorateFieldRefs {
    readonly id: FieldRef<"Governorate", 'String'>
    readonly name: FieldRef<"Governorate", 'String'>
    readonly enName: FieldRef<"Governorate", 'String'>
    readonly slug: FieldRef<"Governorate", 'String'>
    readonly path: FieldRef<"Governorate", 'String'>
    readonly createdAt: FieldRef<"Governorate", 'DateTime'>
    readonly updatedAt: FieldRef<"Governorate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Governorate findUnique
   */
  export type GovernorateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * Filter, which Governorate to fetch.
     */
    where: GovernorateWhereUniqueInput
  }

  /**
   * Governorate findUniqueOrThrow
   */
  export type GovernorateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * Filter, which Governorate to fetch.
     */
    where: GovernorateWhereUniqueInput
  }

  /**
   * Governorate findFirst
   */
  export type GovernorateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * Filter, which Governorate to fetch.
     */
    where?: GovernorateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Governorates to fetch.
     */
    orderBy?: GovernorateOrderByWithRelationInput | GovernorateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Governorates.
     */
    cursor?: GovernorateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Governorates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Governorates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Governorates.
     */
    distinct?: GovernorateScalarFieldEnum | GovernorateScalarFieldEnum[]
  }

  /**
   * Governorate findFirstOrThrow
   */
  export type GovernorateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * Filter, which Governorate to fetch.
     */
    where?: GovernorateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Governorates to fetch.
     */
    orderBy?: GovernorateOrderByWithRelationInput | GovernorateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Governorates.
     */
    cursor?: GovernorateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Governorates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Governorates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Governorates.
     */
    distinct?: GovernorateScalarFieldEnum | GovernorateScalarFieldEnum[]
  }

  /**
   * Governorate findMany
   */
  export type GovernorateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * Filter, which Governorates to fetch.
     */
    where?: GovernorateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Governorates to fetch.
     */
    orderBy?: GovernorateOrderByWithRelationInput | GovernorateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Governorates.
     */
    cursor?: GovernorateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Governorates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Governorates.
     */
    skip?: number
    distinct?: GovernorateScalarFieldEnum | GovernorateScalarFieldEnum[]
  }

  /**
   * Governorate create
   */
  export type GovernorateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * The data needed to create a Governorate.
     */
    data: XOR<GovernorateCreateInput, GovernorateUncheckedCreateInput>
  }

  /**
   * Governorate createMany
   */
  export type GovernorateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Governorates.
     */
    data: GovernorateCreateManyInput | GovernorateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Governorate createManyAndReturn
   */
  export type GovernorateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Governorates.
     */
    data: GovernorateCreateManyInput | GovernorateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Governorate update
   */
  export type GovernorateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * The data needed to update a Governorate.
     */
    data: XOR<GovernorateUpdateInput, GovernorateUncheckedUpdateInput>
    /**
     * Choose, which Governorate to update.
     */
    where: GovernorateWhereUniqueInput
  }

  /**
   * Governorate updateMany
   */
  export type GovernorateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Governorates.
     */
    data: XOR<GovernorateUpdateManyMutationInput, GovernorateUncheckedUpdateManyInput>
    /**
     * Filter which Governorates to update
     */
    where?: GovernorateWhereInput
  }

  /**
   * Governorate upsert
   */
  export type GovernorateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * The filter to search for the Governorate to update in case it exists.
     */
    where: GovernorateWhereUniqueInput
    /**
     * In case the Governorate found by the `where` argument doesn't exist, create a new Governorate with this data.
     */
    create: XOR<GovernorateCreateInput, GovernorateUncheckedCreateInput>
    /**
     * In case the Governorate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GovernorateUpdateInput, GovernorateUncheckedUpdateInput>
  }

  /**
   * Governorate delete
   */
  export type GovernorateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
    /**
     * Filter which Governorate to delete.
     */
    where: GovernorateWhereUniqueInput
  }

  /**
   * Governorate deleteMany
   */
  export type GovernorateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Governorates to delete
     */
    where?: GovernorateWhereInput
  }

  /**
   * Governorate.users
   */
  export type Governorate$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Governorate.events
   */
  export type Governorate$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Governorate.stats
   */
  export type Governorate$statsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    where?: GovernorateStatisticWhereInput
  }

  /**
   * Governorate without action
   */
  export type GovernorateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Governorate
     */
    select?: GovernorateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    avatarUrl: string | null
    role: $Enums.UserRole | null
    verified: boolean | null
    party: string | null
    governorateId: string | null
    bio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    avatarUrl: string | null
    role: $Enums.UserRole | null
    verified: boolean | null
    party: string | null
    governorateId: string | null
    bio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    avatarUrl: number
    role: number
    verified: number
    party: number
    governorateId: number
    bio: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    avatarUrl?: true
    role?: true
    verified?: true
    party?: true
    governorateId?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    avatarUrl?: true
    role?: true
    verified?: true
    party?: true
    governorateId?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    avatarUrl?: true
    role?: true
    verified?: true
    party?: true
    governorateId?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified: boolean
    party: string
    governorateId: string
    bio: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    avatarUrl?: boolean
    role?: boolean
    verified?: boolean
    party?: boolean
    governorateId?: boolean
    bio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    organized?: boolean | User$organizedArgs<ExtArgs>
    debates?: boolean | User$debatesArgs<ExtArgs>
    candidate?: boolean | User$candidateArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    avatarUrl?: boolean
    role?: boolean
    verified?: boolean
    party?: boolean
    governorateId?: boolean
    bio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    avatarUrl?: boolean
    role?: boolean
    verified?: boolean
    party?: boolean
    governorateId?: boolean
    bio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    organized?: boolean | User$organizedArgs<ExtArgs>
    debates?: boolean | User$debatesArgs<ExtArgs>
    candidate?: boolean | User$candidateArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      governorate: Prisma.$GovernoratePayload<ExtArgs>
      posts: Prisma.$PostPayload<ExtArgs>[]
      organized: Prisma.$EventPayload<ExtArgs>[]
      debates: Prisma.$DebateParticipantPayload<ExtArgs>[]
      candidate: Prisma.$CandidatePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      avatarUrl: string
      role: $Enums.UserRole
      verified: boolean
      party: string
      governorateId: string
      bio: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    governorate<T extends GovernorateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GovernorateDefaultArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    posts<T extends User$postsArgs<ExtArgs> = {}>(args?: Subset<T, User$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany"> | Null>
    organized<T extends User$organizedArgs<ExtArgs> = {}>(args?: Subset<T, User$organizedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    debates<T extends User$debatesArgs<ExtArgs> = {}>(args?: Subset<T, User$debatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    candidate<T extends User$candidateArgs<ExtArgs> = {}>(args?: Subset<T, User$candidateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly verified: FieldRef<"User", 'Boolean'>
    readonly party: FieldRef<"User", 'String'>
    readonly governorateId: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.posts
   */
  export type User$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * User.organized
   */
  export type User$organizedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.debates
   */
  export type User$debatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    where?: DebateParticipantWhereInput
    orderBy?: DebateParticipantOrderByWithRelationInput | DebateParticipantOrderByWithRelationInput[]
    cursor?: DebateParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DebateParticipantScalarFieldEnum | DebateParticipantScalarFieldEnum[]
  }

  /**
   * User.candidate
   */
  export type User$candidateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    where?: CandidateWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    likes: number | null
    comments: number | null
    shares: number | null
  }

  export type PostSumAggregateOutputType = {
    likes: number | null
    comments: number | null
    shares: number | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    authorId: string | null
    timestamp: Date | null
    content: string | null
    mediaUrl: string | null
    likes: number | null
    comments: number | null
    shares: number | null
    isSponsored: boolean | null
    type: $Enums.PostType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    authorId: string | null
    timestamp: Date | null
    content: string | null
    mediaUrl: string | null
    likes: number | null
    comments: number | null
    shares: number | null
    isSponsored: boolean | null
    type: $Enums.PostType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    authorId: number
    timestamp: number
    content: number
    mediaUrl: number
    likes: number
    comments: number
    shares: number
    isSponsored: number
    type: number
    governorates: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    likes?: true
    comments?: true
    shares?: true
  }

  export type PostSumAggregateInputType = {
    likes?: true
    comments?: true
    shares?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    authorId?: true
    timestamp?: true
    content?: true
    mediaUrl?: true
    likes?: true
    comments?: true
    shares?: true
    isSponsored?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    authorId?: true
    timestamp?: true
    content?: true
    mediaUrl?: true
    likes?: true
    comments?: true
    shares?: true
    isSponsored?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    authorId?: true
    timestamp?: true
    content?: true
    mediaUrl?: true
    likes?: true
    comments?: true
    shares?: true
    isSponsored?: true
    type?: true
    governorates?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    authorId: string
    timestamp: Date
    content: string
    mediaUrl: string | null
    likes: number
    comments: number
    shares: number
    isSponsored: boolean
    type: $Enums.PostType
    governorates: string[]
    createdAt: Date
    updatedAt: Date
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    timestamp?: boolean
    content?: boolean
    mediaUrl?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    isSponsored?: boolean
    type?: boolean
    governorates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    timestamp?: boolean
    content?: boolean
    mediaUrl?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    isSponsored?: boolean
    type?: boolean
    governorates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    authorId?: boolean
    timestamp?: boolean
    content?: boolean
    mediaUrl?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    isSponsored?: boolean
    type?: boolean
    governorates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      authorId: string
      timestamp: Date
      content: string
      mediaUrl: string | null
      likes: number
      comments: number
      shares: number
      isSponsored: boolean
      type: $Enums.PostType
      governorates: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly authorId: FieldRef<"Post", 'String'>
    readonly timestamp: FieldRef<"Post", 'DateTime'>
    readonly content: FieldRef<"Post", 'String'>
    readonly mediaUrl: FieldRef<"Post", 'String'>
    readonly likes: FieldRef<"Post", 'Int'>
    readonly comments: FieldRef<"Post", 'Int'>
    readonly shares: FieldRef<"Post", 'Int'>
    readonly isSponsored: FieldRef<"Post", 'Boolean'>
    readonly type: FieldRef<"Post", 'PostType'>
    readonly governorates: FieldRef<"Post", 'String[]'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    date: Date | null
    location: string | null
    organizerId: string | null
    governorateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    date: Date | null
    location: string | null
    organizerId: string | null
    governorateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    date: number
    location: number
    organizerId: number
    governorateId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    date?: true
    location?: true
    organizerId?: true
    governorateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    date?: true
    location?: true
    organizerId?: true
    governorateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    date?: true
    location?: true
    organizerId?: true
    governorateId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    title: string
    date: Date
    location: string
    organizerId: string
    governorateId: string
    createdAt: Date
    updatedAt: Date
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    location?: boolean
    organizerId?: boolean
    governorateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    location?: boolean
    organizerId?: boolean
    governorateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    date?: boolean
    location?: boolean
    organizerId?: boolean
    governorateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      organizer: Prisma.$UserPayload<ExtArgs>
      governorate: Prisma.$GovernoratePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      date: Date
      location: string
      organizerId: string
      governorateId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    governorate<T extends GovernorateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GovernorateDefaultArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly date: FieldRef<"Event", 'DateTime'>
    readonly location: FieldRef<"Event", 'String'>
    readonly organizerId: FieldRef<"Event", 'String'>
    readonly governorateId: FieldRef<"Event", 'String'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Article
   */

  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleMinAggregateOutputType = {
    id: string | null
    source: string | null
    timestamp: Date | null
    title: string | null
    authorName: string | null
    contentSnippet: string | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: string | null
    source: string | null
    timestamp: Date | null
    title: string | null
    authorName: string | null
    contentSnippet: string | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    source: number
    timestamp: number
    title: number
    authorName: number
    contentSnippet: number
    url: number
    governorates: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArticleMinAggregateInputType = {
    id?: true
    source?: true
    timestamp?: true
    title?: true
    authorName?: true
    contentSnippet?: true
    url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    source?: true
    timestamp?: true
    title?: true
    authorName?: true
    contentSnippet?: true
    url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    source?: true
    timestamp?: true
    title?: true
    authorName?: true
    contentSnippet?: true
    url?: true
    governorates?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArticleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Article to aggregate.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleWhereInput
    orderBy?: ArticleOrderByWithAggregationInput | ArticleOrderByWithAggregationInput[]
    by: ArticleScalarFieldEnum[] | ArticleScalarFieldEnum
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }

  export type ArticleGroupByOutputType = {
    id: string
    source: string
    timestamp: Date
    title: string
    authorName: string
    contentSnippet: string
    url: string
    governorates: string[]
    createdAt: Date
    updatedAt: Date
    _count: ArticleCountAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    timestamp?: boolean
    title?: boolean
    authorName?: boolean
    contentSnippet?: boolean
    url?: boolean
    governorates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["article"]>

  export type ArticleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    timestamp?: boolean
    title?: boolean
    authorName?: boolean
    contentSnippet?: boolean
    url?: boolean
    governorates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["article"]>

  export type ArticleSelectScalar = {
    id?: boolean
    source?: boolean
    timestamp?: boolean
    title?: boolean
    authorName?: boolean
    contentSnippet?: boolean
    url?: boolean
    governorates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ArticlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Article"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      source: string
      timestamp: Date
      title: string
      authorName: string
      contentSnippet: string
      url: string
      governorates: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["article"]>
    composites: {}
  }

  type ArticleGetPayload<S extends boolean | null | undefined | ArticleDefaultArgs> = $Result.GetResult<Prisma.$ArticlePayload, S>

  type ArticleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArticleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArticleCountAggregateInputType | true
    }

  export interface ArticleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Article'], meta: { name: 'Article' } }
    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArticleFindUniqueArgs>(args: SelectSubset<T, ArticleFindUniqueArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Article that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(args: SelectSubset<T, ArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArticleFindFirstArgs>(args?: SelectSubset<T, ArticleFindFirstArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Article that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(args?: SelectSubset<T, ArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArticleFindManyArgs>(args?: SelectSubset<T, ArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
     */
    create<T extends ArticleCreateArgs>(args: SelectSubset<T, ArticleCreateArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Articles.
     * @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     * @example
     * // Create many Articles
     * const article = await prisma.article.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArticleCreateManyArgs>(args?: SelectSubset<T, ArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Articles and returns the data saved in the database.
     * @param {ArticleCreateManyAndReturnArgs} args - Arguments to create many Articles.
     * @example
     * // Create many Articles
     * const article = await prisma.article.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Articles and only return the `id`
     * const articleWithIdOnly = await prisma.article.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArticleCreateManyAndReturnArgs>(args?: SelectSubset<T, ArticleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
     */
    delete<T extends ArticleDeleteArgs>(args: SelectSubset<T, ArticleDeleteArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArticleUpdateArgs>(args: SelectSubset<T, ArticleUpdateArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArticleDeleteManyArgs>(args?: SelectSubset<T, ArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArticleUpdateManyArgs>(args: SelectSubset<T, ArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
     */
    upsert<T extends ArticleUpsertArgs>(args: SelectSubset<T, ArticleUpsertArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): Prisma.PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Article model
   */
  readonly fields: ArticleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArticleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Article model
   */ 
  interface ArticleFieldRefs {
    readonly id: FieldRef<"Article", 'String'>
    readonly source: FieldRef<"Article", 'String'>
    readonly timestamp: FieldRef<"Article", 'DateTime'>
    readonly title: FieldRef<"Article", 'String'>
    readonly authorName: FieldRef<"Article", 'String'>
    readonly contentSnippet: FieldRef<"Article", 'String'>
    readonly url: FieldRef<"Article", 'String'>
    readonly governorates: FieldRef<"Article", 'String[]'>
    readonly createdAt: FieldRef<"Article", 'DateTime'>
    readonly updatedAt: FieldRef<"Article", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Article findUnique
   */
  export type ArticleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findFirst
   */
  export type ArticleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article findMany
   */
  export type ArticleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Filter, which Articles to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article create
   */
  export type ArticleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * The data needed to create a Article.
     */
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }

  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Articles.
     */
    data: ArticleCreateManyInput | ArticleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Article createManyAndReturn
   */
  export type ArticleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Articles.
     */
    data: ArticleCreateManyInput | ArticleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Article update
   */
  export type ArticleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * The data needed to update a Article.
     */
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Articles.
     */
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     */
    where?: ArticleWhereInput
  }

  /**
   * Article upsert
   */
  export type ArticleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * The filter to search for the Article to update in case it exists.
     */
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     */
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }

  /**
   * Article delete
   */
  export type ArticleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Filter which Article to delete.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Articles to delete
     */
    where?: ArticleWhereInput
  }

  /**
   * Article without action
   */
  export type ArticleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
  }


  /**
   * Model Debate
   */

  export type AggregateDebate = {
    _count: DebateCountAggregateOutputType | null
    _min: DebateMinAggregateOutputType | null
    _max: DebateMaxAggregateOutputType | null
  }

  export type DebateMinAggregateOutputType = {
    id: string | null
    title: string | null
    topic: string | null
    scheduledTime: Date | null
    isLive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DebateMaxAggregateOutputType = {
    id: string | null
    title: string | null
    topic: string | null
    scheduledTime: Date | null
    isLive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DebateCountAggregateOutputType = {
    id: number
    title: number
    topic: number
    scheduledTime: number
    isLive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DebateMinAggregateInputType = {
    id?: true
    title?: true
    topic?: true
    scheduledTime?: true
    isLive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DebateMaxAggregateInputType = {
    id?: true
    title?: true
    topic?: true
    scheduledTime?: true
    isLive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DebateCountAggregateInputType = {
    id?: true
    title?: true
    topic?: true
    scheduledTime?: true
    isLive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DebateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Debate to aggregate.
     */
    where?: DebateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Debates to fetch.
     */
    orderBy?: DebateOrderByWithRelationInput | DebateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DebateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Debates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Debates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Debates
    **/
    _count?: true | DebateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DebateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DebateMaxAggregateInputType
  }

  export type GetDebateAggregateType<T extends DebateAggregateArgs> = {
        [P in keyof T & keyof AggregateDebate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDebate[P]>
      : GetScalarType<T[P], AggregateDebate[P]>
  }




  export type DebateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DebateWhereInput
    orderBy?: DebateOrderByWithAggregationInput | DebateOrderByWithAggregationInput[]
    by: DebateScalarFieldEnum[] | DebateScalarFieldEnum
    having?: DebateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DebateCountAggregateInputType | true
    _min?: DebateMinAggregateInputType
    _max?: DebateMaxAggregateInputType
  }

  export type DebateGroupByOutputType = {
    id: string
    title: string
    topic: string
    scheduledTime: Date
    isLive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DebateCountAggregateOutputType | null
    _min: DebateMinAggregateOutputType | null
    _max: DebateMaxAggregateOutputType | null
  }

  type GetDebateGroupByPayload<T extends DebateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DebateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DebateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DebateGroupByOutputType[P]>
            : GetScalarType<T[P], DebateGroupByOutputType[P]>
        }
      >
    >


  export type DebateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    topic?: boolean
    scheduledTime?: boolean
    isLive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    participants?: boolean | Debate$participantsArgs<ExtArgs>
    _count?: boolean | DebateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["debate"]>

  export type DebateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    topic?: boolean
    scheduledTime?: boolean
    isLive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["debate"]>

  export type DebateSelectScalar = {
    id?: boolean
    title?: boolean
    topic?: boolean
    scheduledTime?: boolean
    isLive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DebateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | Debate$participantsArgs<ExtArgs>
    _count?: boolean | DebateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DebateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DebatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Debate"
    objects: {
      participants: Prisma.$DebateParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      topic: string
      scheduledTime: Date
      isLive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["debate"]>
    composites: {}
  }

  type DebateGetPayload<S extends boolean | null | undefined | DebateDefaultArgs> = $Result.GetResult<Prisma.$DebatePayload, S>

  type DebateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DebateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DebateCountAggregateInputType | true
    }

  export interface DebateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Debate'], meta: { name: 'Debate' } }
    /**
     * Find zero or one Debate that matches the filter.
     * @param {DebateFindUniqueArgs} args - Arguments to find a Debate
     * @example
     * // Get one Debate
     * const debate = await prisma.debate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DebateFindUniqueArgs>(args: SelectSubset<T, DebateFindUniqueArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Debate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DebateFindUniqueOrThrowArgs} args - Arguments to find a Debate
     * @example
     * // Get one Debate
     * const debate = await prisma.debate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DebateFindUniqueOrThrowArgs>(args: SelectSubset<T, DebateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Debate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateFindFirstArgs} args - Arguments to find a Debate
     * @example
     * // Get one Debate
     * const debate = await prisma.debate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DebateFindFirstArgs>(args?: SelectSubset<T, DebateFindFirstArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Debate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateFindFirstOrThrowArgs} args - Arguments to find a Debate
     * @example
     * // Get one Debate
     * const debate = await prisma.debate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DebateFindFirstOrThrowArgs>(args?: SelectSubset<T, DebateFindFirstOrThrowArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Debates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Debates
     * const debates = await prisma.debate.findMany()
     * 
     * // Get first 10 Debates
     * const debates = await prisma.debate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const debateWithIdOnly = await prisma.debate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DebateFindManyArgs>(args?: SelectSubset<T, DebateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Debate.
     * @param {DebateCreateArgs} args - Arguments to create a Debate.
     * @example
     * // Create one Debate
     * const Debate = await prisma.debate.create({
     *   data: {
     *     // ... data to create a Debate
     *   }
     * })
     * 
     */
    create<T extends DebateCreateArgs>(args: SelectSubset<T, DebateCreateArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Debates.
     * @param {DebateCreateManyArgs} args - Arguments to create many Debates.
     * @example
     * // Create many Debates
     * const debate = await prisma.debate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DebateCreateManyArgs>(args?: SelectSubset<T, DebateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Debates and returns the data saved in the database.
     * @param {DebateCreateManyAndReturnArgs} args - Arguments to create many Debates.
     * @example
     * // Create many Debates
     * const debate = await prisma.debate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Debates and only return the `id`
     * const debateWithIdOnly = await prisma.debate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DebateCreateManyAndReturnArgs>(args?: SelectSubset<T, DebateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Debate.
     * @param {DebateDeleteArgs} args - Arguments to delete one Debate.
     * @example
     * // Delete one Debate
     * const Debate = await prisma.debate.delete({
     *   where: {
     *     // ... filter to delete one Debate
     *   }
     * })
     * 
     */
    delete<T extends DebateDeleteArgs>(args: SelectSubset<T, DebateDeleteArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Debate.
     * @param {DebateUpdateArgs} args - Arguments to update one Debate.
     * @example
     * // Update one Debate
     * const debate = await prisma.debate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DebateUpdateArgs>(args: SelectSubset<T, DebateUpdateArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Debates.
     * @param {DebateDeleteManyArgs} args - Arguments to filter Debates to delete.
     * @example
     * // Delete a few Debates
     * const { count } = await prisma.debate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DebateDeleteManyArgs>(args?: SelectSubset<T, DebateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Debates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Debates
     * const debate = await prisma.debate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DebateUpdateManyArgs>(args: SelectSubset<T, DebateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Debate.
     * @param {DebateUpsertArgs} args - Arguments to update or create a Debate.
     * @example
     * // Update or create a Debate
     * const debate = await prisma.debate.upsert({
     *   create: {
     *     // ... data to create a Debate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Debate we want to update
     *   }
     * })
     */
    upsert<T extends DebateUpsertArgs>(args: SelectSubset<T, DebateUpsertArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Debates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateCountArgs} args - Arguments to filter Debates to count.
     * @example
     * // Count the number of Debates
     * const count = await prisma.debate.count({
     *   where: {
     *     // ... the filter for the Debates we want to count
     *   }
     * })
    **/
    count<T extends DebateCountArgs>(
      args?: Subset<T, DebateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DebateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Debate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DebateAggregateArgs>(args: Subset<T, DebateAggregateArgs>): Prisma.PrismaPromise<GetDebateAggregateType<T>>

    /**
     * Group by Debate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DebateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DebateGroupByArgs['orderBy'] }
        : { orderBy?: DebateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DebateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDebateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Debate model
   */
  readonly fields: DebateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Debate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DebateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends Debate$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Debate$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Debate model
   */ 
  interface DebateFieldRefs {
    readonly id: FieldRef<"Debate", 'String'>
    readonly title: FieldRef<"Debate", 'String'>
    readonly topic: FieldRef<"Debate", 'String'>
    readonly scheduledTime: FieldRef<"Debate", 'DateTime'>
    readonly isLive: FieldRef<"Debate", 'Boolean'>
    readonly createdAt: FieldRef<"Debate", 'DateTime'>
    readonly updatedAt: FieldRef<"Debate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Debate findUnique
   */
  export type DebateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * Filter, which Debate to fetch.
     */
    where: DebateWhereUniqueInput
  }

  /**
   * Debate findUniqueOrThrow
   */
  export type DebateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * Filter, which Debate to fetch.
     */
    where: DebateWhereUniqueInput
  }

  /**
   * Debate findFirst
   */
  export type DebateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * Filter, which Debate to fetch.
     */
    where?: DebateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Debates to fetch.
     */
    orderBy?: DebateOrderByWithRelationInput | DebateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Debates.
     */
    cursor?: DebateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Debates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Debates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Debates.
     */
    distinct?: DebateScalarFieldEnum | DebateScalarFieldEnum[]
  }

  /**
   * Debate findFirstOrThrow
   */
  export type DebateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * Filter, which Debate to fetch.
     */
    where?: DebateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Debates to fetch.
     */
    orderBy?: DebateOrderByWithRelationInput | DebateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Debates.
     */
    cursor?: DebateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Debates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Debates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Debates.
     */
    distinct?: DebateScalarFieldEnum | DebateScalarFieldEnum[]
  }

  /**
   * Debate findMany
   */
  export type DebateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * Filter, which Debates to fetch.
     */
    where?: DebateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Debates to fetch.
     */
    orderBy?: DebateOrderByWithRelationInput | DebateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Debates.
     */
    cursor?: DebateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Debates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Debates.
     */
    skip?: number
    distinct?: DebateScalarFieldEnum | DebateScalarFieldEnum[]
  }

  /**
   * Debate create
   */
  export type DebateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * The data needed to create a Debate.
     */
    data: XOR<DebateCreateInput, DebateUncheckedCreateInput>
  }

  /**
   * Debate createMany
   */
  export type DebateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Debates.
     */
    data: DebateCreateManyInput | DebateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Debate createManyAndReturn
   */
  export type DebateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Debates.
     */
    data: DebateCreateManyInput | DebateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Debate update
   */
  export type DebateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * The data needed to update a Debate.
     */
    data: XOR<DebateUpdateInput, DebateUncheckedUpdateInput>
    /**
     * Choose, which Debate to update.
     */
    where: DebateWhereUniqueInput
  }

  /**
   * Debate updateMany
   */
  export type DebateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Debates.
     */
    data: XOR<DebateUpdateManyMutationInput, DebateUncheckedUpdateManyInput>
    /**
     * Filter which Debates to update
     */
    where?: DebateWhereInput
  }

  /**
   * Debate upsert
   */
  export type DebateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * The filter to search for the Debate to update in case it exists.
     */
    where: DebateWhereUniqueInput
    /**
     * In case the Debate found by the `where` argument doesn't exist, create a new Debate with this data.
     */
    create: XOR<DebateCreateInput, DebateUncheckedCreateInput>
    /**
     * In case the Debate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DebateUpdateInput, DebateUncheckedUpdateInput>
  }

  /**
   * Debate delete
   */
  export type DebateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
    /**
     * Filter which Debate to delete.
     */
    where: DebateWhereUniqueInput
  }

  /**
   * Debate deleteMany
   */
  export type DebateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Debates to delete
     */
    where?: DebateWhereInput
  }

  /**
   * Debate.participants
   */
  export type Debate$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    where?: DebateParticipantWhereInput
    orderBy?: DebateParticipantOrderByWithRelationInput | DebateParticipantOrderByWithRelationInput[]
    cursor?: DebateParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DebateParticipantScalarFieldEnum | DebateParticipantScalarFieldEnum[]
  }

  /**
   * Debate without action
   */
  export type DebateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Debate
     */
    select?: DebateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateInclude<ExtArgs> | null
  }


  /**
   * Model DebateParticipant
   */

  export type AggregateDebateParticipant = {
    _count: DebateParticipantCountAggregateOutputType | null
    _min: DebateParticipantMinAggregateOutputType | null
    _max: DebateParticipantMaxAggregateOutputType | null
  }

  export type DebateParticipantMinAggregateOutputType = {
    debateId: string | null
    userId: string | null
  }

  export type DebateParticipantMaxAggregateOutputType = {
    debateId: string | null
    userId: string | null
  }

  export type DebateParticipantCountAggregateOutputType = {
    debateId: number
    userId: number
    _all: number
  }


  export type DebateParticipantMinAggregateInputType = {
    debateId?: true
    userId?: true
  }

  export type DebateParticipantMaxAggregateInputType = {
    debateId?: true
    userId?: true
  }

  export type DebateParticipantCountAggregateInputType = {
    debateId?: true
    userId?: true
    _all?: true
  }

  export type DebateParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DebateParticipant to aggregate.
     */
    where?: DebateParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DebateParticipants to fetch.
     */
    orderBy?: DebateParticipantOrderByWithRelationInput | DebateParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DebateParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DebateParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DebateParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DebateParticipants
    **/
    _count?: true | DebateParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DebateParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DebateParticipantMaxAggregateInputType
  }

  export type GetDebateParticipantAggregateType<T extends DebateParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateDebateParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDebateParticipant[P]>
      : GetScalarType<T[P], AggregateDebateParticipant[P]>
  }




  export type DebateParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DebateParticipantWhereInput
    orderBy?: DebateParticipantOrderByWithAggregationInput | DebateParticipantOrderByWithAggregationInput[]
    by: DebateParticipantScalarFieldEnum[] | DebateParticipantScalarFieldEnum
    having?: DebateParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DebateParticipantCountAggregateInputType | true
    _min?: DebateParticipantMinAggregateInputType
    _max?: DebateParticipantMaxAggregateInputType
  }

  export type DebateParticipantGroupByOutputType = {
    debateId: string
    userId: string
    _count: DebateParticipantCountAggregateOutputType | null
    _min: DebateParticipantMinAggregateOutputType | null
    _max: DebateParticipantMaxAggregateOutputType | null
  }

  type GetDebateParticipantGroupByPayload<T extends DebateParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DebateParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DebateParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DebateParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], DebateParticipantGroupByOutputType[P]>
        }
      >
    >


  export type DebateParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    debateId?: boolean
    userId?: boolean
    debate?: boolean | DebateDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["debateParticipant"]>

  export type DebateParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    debateId?: boolean
    userId?: boolean
    debate?: boolean | DebateDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["debateParticipant"]>

  export type DebateParticipantSelectScalar = {
    debateId?: boolean
    userId?: boolean
  }

  export type DebateParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    debate?: boolean | DebateDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DebateParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    debate?: boolean | DebateDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DebateParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DebateParticipant"
    objects: {
      debate: Prisma.$DebatePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      debateId: string
      userId: string
    }, ExtArgs["result"]["debateParticipant"]>
    composites: {}
  }

  type DebateParticipantGetPayload<S extends boolean | null | undefined | DebateParticipantDefaultArgs> = $Result.GetResult<Prisma.$DebateParticipantPayload, S>

  type DebateParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DebateParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DebateParticipantCountAggregateInputType | true
    }

  export interface DebateParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DebateParticipant'], meta: { name: 'DebateParticipant' } }
    /**
     * Find zero or one DebateParticipant that matches the filter.
     * @param {DebateParticipantFindUniqueArgs} args - Arguments to find a DebateParticipant
     * @example
     * // Get one DebateParticipant
     * const debateParticipant = await prisma.debateParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DebateParticipantFindUniqueArgs>(args: SelectSubset<T, DebateParticipantFindUniqueArgs<ExtArgs>>): Prisma__DebateParticipantClient<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DebateParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DebateParticipantFindUniqueOrThrowArgs} args - Arguments to find a DebateParticipant
     * @example
     * // Get one DebateParticipant
     * const debateParticipant = await prisma.debateParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DebateParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, DebateParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DebateParticipantClient<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DebateParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateParticipantFindFirstArgs} args - Arguments to find a DebateParticipant
     * @example
     * // Get one DebateParticipant
     * const debateParticipant = await prisma.debateParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DebateParticipantFindFirstArgs>(args?: SelectSubset<T, DebateParticipantFindFirstArgs<ExtArgs>>): Prisma__DebateParticipantClient<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DebateParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateParticipantFindFirstOrThrowArgs} args - Arguments to find a DebateParticipant
     * @example
     * // Get one DebateParticipant
     * const debateParticipant = await prisma.debateParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DebateParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, DebateParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__DebateParticipantClient<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DebateParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DebateParticipants
     * const debateParticipants = await prisma.debateParticipant.findMany()
     * 
     * // Get first 10 DebateParticipants
     * const debateParticipants = await prisma.debateParticipant.findMany({ take: 10 })
     * 
     * // Only select the `debateId`
     * const debateParticipantWithDebateIdOnly = await prisma.debateParticipant.findMany({ select: { debateId: true } })
     * 
     */
    findMany<T extends DebateParticipantFindManyArgs>(args?: SelectSubset<T, DebateParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DebateParticipant.
     * @param {DebateParticipantCreateArgs} args - Arguments to create a DebateParticipant.
     * @example
     * // Create one DebateParticipant
     * const DebateParticipant = await prisma.debateParticipant.create({
     *   data: {
     *     // ... data to create a DebateParticipant
     *   }
     * })
     * 
     */
    create<T extends DebateParticipantCreateArgs>(args: SelectSubset<T, DebateParticipantCreateArgs<ExtArgs>>): Prisma__DebateParticipantClient<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DebateParticipants.
     * @param {DebateParticipantCreateManyArgs} args - Arguments to create many DebateParticipants.
     * @example
     * // Create many DebateParticipants
     * const debateParticipant = await prisma.debateParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DebateParticipantCreateManyArgs>(args?: SelectSubset<T, DebateParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DebateParticipants and returns the data saved in the database.
     * @param {DebateParticipantCreateManyAndReturnArgs} args - Arguments to create many DebateParticipants.
     * @example
     * // Create many DebateParticipants
     * const debateParticipant = await prisma.debateParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DebateParticipants and only return the `debateId`
     * const debateParticipantWithDebateIdOnly = await prisma.debateParticipant.createManyAndReturn({ 
     *   select: { debateId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DebateParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, DebateParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DebateParticipant.
     * @param {DebateParticipantDeleteArgs} args - Arguments to delete one DebateParticipant.
     * @example
     * // Delete one DebateParticipant
     * const DebateParticipant = await prisma.debateParticipant.delete({
     *   where: {
     *     // ... filter to delete one DebateParticipant
     *   }
     * })
     * 
     */
    delete<T extends DebateParticipantDeleteArgs>(args: SelectSubset<T, DebateParticipantDeleteArgs<ExtArgs>>): Prisma__DebateParticipantClient<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DebateParticipant.
     * @param {DebateParticipantUpdateArgs} args - Arguments to update one DebateParticipant.
     * @example
     * // Update one DebateParticipant
     * const debateParticipant = await prisma.debateParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DebateParticipantUpdateArgs>(args: SelectSubset<T, DebateParticipantUpdateArgs<ExtArgs>>): Prisma__DebateParticipantClient<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DebateParticipants.
     * @param {DebateParticipantDeleteManyArgs} args - Arguments to filter DebateParticipants to delete.
     * @example
     * // Delete a few DebateParticipants
     * const { count } = await prisma.debateParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DebateParticipantDeleteManyArgs>(args?: SelectSubset<T, DebateParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DebateParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DebateParticipants
     * const debateParticipant = await prisma.debateParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DebateParticipantUpdateManyArgs>(args: SelectSubset<T, DebateParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DebateParticipant.
     * @param {DebateParticipantUpsertArgs} args - Arguments to update or create a DebateParticipant.
     * @example
     * // Update or create a DebateParticipant
     * const debateParticipant = await prisma.debateParticipant.upsert({
     *   create: {
     *     // ... data to create a DebateParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DebateParticipant we want to update
     *   }
     * })
     */
    upsert<T extends DebateParticipantUpsertArgs>(args: SelectSubset<T, DebateParticipantUpsertArgs<ExtArgs>>): Prisma__DebateParticipantClient<$Result.GetResult<Prisma.$DebateParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DebateParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateParticipantCountArgs} args - Arguments to filter DebateParticipants to count.
     * @example
     * // Count the number of DebateParticipants
     * const count = await prisma.debateParticipant.count({
     *   where: {
     *     // ... the filter for the DebateParticipants we want to count
     *   }
     * })
    **/
    count<T extends DebateParticipantCountArgs>(
      args?: Subset<T, DebateParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DebateParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DebateParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DebateParticipantAggregateArgs>(args: Subset<T, DebateParticipantAggregateArgs>): Prisma.PrismaPromise<GetDebateParticipantAggregateType<T>>

    /**
     * Group by DebateParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DebateParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DebateParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DebateParticipantGroupByArgs['orderBy'] }
        : { orderBy?: DebateParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DebateParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDebateParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DebateParticipant model
   */
  readonly fields: DebateParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DebateParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DebateParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    debate<T extends DebateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DebateDefaultArgs<ExtArgs>>): Prisma__DebateClient<$Result.GetResult<Prisma.$DebatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DebateParticipant model
   */ 
  interface DebateParticipantFieldRefs {
    readonly debateId: FieldRef<"DebateParticipant", 'String'>
    readonly userId: FieldRef<"DebateParticipant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DebateParticipant findUnique
   */
  export type DebateParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * Filter, which DebateParticipant to fetch.
     */
    where: DebateParticipantWhereUniqueInput
  }

  /**
   * DebateParticipant findUniqueOrThrow
   */
  export type DebateParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * Filter, which DebateParticipant to fetch.
     */
    where: DebateParticipantWhereUniqueInput
  }

  /**
   * DebateParticipant findFirst
   */
  export type DebateParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * Filter, which DebateParticipant to fetch.
     */
    where?: DebateParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DebateParticipants to fetch.
     */
    orderBy?: DebateParticipantOrderByWithRelationInput | DebateParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DebateParticipants.
     */
    cursor?: DebateParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DebateParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DebateParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DebateParticipants.
     */
    distinct?: DebateParticipantScalarFieldEnum | DebateParticipantScalarFieldEnum[]
  }

  /**
   * DebateParticipant findFirstOrThrow
   */
  export type DebateParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * Filter, which DebateParticipant to fetch.
     */
    where?: DebateParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DebateParticipants to fetch.
     */
    orderBy?: DebateParticipantOrderByWithRelationInput | DebateParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DebateParticipants.
     */
    cursor?: DebateParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DebateParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DebateParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DebateParticipants.
     */
    distinct?: DebateParticipantScalarFieldEnum | DebateParticipantScalarFieldEnum[]
  }

  /**
   * DebateParticipant findMany
   */
  export type DebateParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * Filter, which DebateParticipants to fetch.
     */
    where?: DebateParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DebateParticipants to fetch.
     */
    orderBy?: DebateParticipantOrderByWithRelationInput | DebateParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DebateParticipants.
     */
    cursor?: DebateParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DebateParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DebateParticipants.
     */
    skip?: number
    distinct?: DebateParticipantScalarFieldEnum | DebateParticipantScalarFieldEnum[]
  }

  /**
   * DebateParticipant create
   */
  export type DebateParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a DebateParticipant.
     */
    data: XOR<DebateParticipantCreateInput, DebateParticipantUncheckedCreateInput>
  }

  /**
   * DebateParticipant createMany
   */
  export type DebateParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DebateParticipants.
     */
    data: DebateParticipantCreateManyInput | DebateParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DebateParticipant createManyAndReturn
   */
  export type DebateParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DebateParticipants.
     */
    data: DebateParticipantCreateManyInput | DebateParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DebateParticipant update
   */
  export type DebateParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a DebateParticipant.
     */
    data: XOR<DebateParticipantUpdateInput, DebateParticipantUncheckedUpdateInput>
    /**
     * Choose, which DebateParticipant to update.
     */
    where: DebateParticipantWhereUniqueInput
  }

  /**
   * DebateParticipant updateMany
   */
  export type DebateParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DebateParticipants.
     */
    data: XOR<DebateParticipantUpdateManyMutationInput, DebateParticipantUncheckedUpdateManyInput>
    /**
     * Filter which DebateParticipants to update
     */
    where?: DebateParticipantWhereInput
  }

  /**
   * DebateParticipant upsert
   */
  export type DebateParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the DebateParticipant to update in case it exists.
     */
    where: DebateParticipantWhereUniqueInput
    /**
     * In case the DebateParticipant found by the `where` argument doesn't exist, create a new DebateParticipant with this data.
     */
    create: XOR<DebateParticipantCreateInput, DebateParticipantUncheckedCreateInput>
    /**
     * In case the DebateParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DebateParticipantUpdateInput, DebateParticipantUncheckedUpdateInput>
  }

  /**
   * DebateParticipant delete
   */
  export type DebateParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
    /**
     * Filter which DebateParticipant to delete.
     */
    where: DebateParticipantWhereUniqueInput
  }

  /**
   * DebateParticipant deleteMany
   */
  export type DebateParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DebateParticipants to delete
     */
    where?: DebateParticipantWhereInput
  }

  /**
   * DebateParticipant without action
   */
  export type DebateParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DebateParticipant
     */
    select?: DebateParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DebateParticipantInclude<ExtArgs> | null
  }


  /**
   * Model Party
   */

  export type AggregateParty = {
    _count: PartyCountAggregateOutputType | null
    _avg: PartyAvgAggregateOutputType | null
    _sum: PartySumAggregateOutputType | null
    _min: PartyMinAggregateOutputType | null
    _max: PartyMaxAggregateOutputType | null
  }

  export type PartyAvgAggregateOutputType = {
    founded: number | null
  }

  export type PartySumAggregateOutputType = {
    founded: number | null
  }

  export type PartyMinAggregateOutputType = {
    id: string | null
    name: string | null
    logoUrl: string | null
    leader: string | null
    founded: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logoUrl: string | null
    leader: string | null
    founded: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PartyCountAggregateOutputType = {
    id: number
    name: number
    logoUrl: number
    leader: number
    founded: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PartyAvgAggregateInputType = {
    founded?: true
  }

  export type PartySumAggregateInputType = {
    founded?: true
  }

  export type PartyMinAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    leader?: true
    founded?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartyMaxAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    leader?: true
    founded?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PartyCountAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    leader?: true
    founded?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PartyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Party to aggregate.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parties
    **/
    _count?: true | PartyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartyMaxAggregateInputType
  }

  export type GetPartyAggregateType<T extends PartyAggregateArgs> = {
        [P in keyof T & keyof AggregateParty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParty[P]>
      : GetScalarType<T[P], AggregateParty[P]>
  }




  export type PartyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartyWhereInput
    orderBy?: PartyOrderByWithAggregationInput | PartyOrderByWithAggregationInput[]
    by: PartyScalarFieldEnum[] | PartyScalarFieldEnum
    having?: PartyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartyCountAggregateInputType | true
    _avg?: PartyAvgAggregateInputType
    _sum?: PartySumAggregateInputType
    _min?: PartyMinAggregateInputType
    _max?: PartyMaxAggregateInputType
  }

  export type PartyGroupByOutputType = {
    id: string
    name: string
    logoUrl: string
    leader: string
    founded: number
    description: string
    createdAt: Date
    updatedAt: Date
    _count: PartyCountAggregateOutputType | null
    _avg: PartyAvgAggregateOutputType | null
    _sum: PartySumAggregateOutputType | null
    _min: PartyMinAggregateOutputType | null
    _max: PartyMaxAggregateOutputType | null
  }

  type GetPartyGroupByPayload<T extends PartyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartyGroupByOutputType[P]>
            : GetScalarType<T[P], PartyGroupByOutputType[P]>
        }
      >
    >


  export type PartySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    leader?: boolean
    founded?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    candidates?: boolean | Party$candidatesArgs<ExtArgs>
    _count?: boolean | PartyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["party"]>

  export type PartySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    leader?: boolean
    founded?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["party"]>

  export type PartySelectScalar = {
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    leader?: boolean
    founded?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PartyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidates?: boolean | Party$candidatesArgs<ExtArgs>
    _count?: boolean | PartyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PartyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Party"
    objects: {
      candidates: Prisma.$CandidatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logoUrl: string
      leader: string
      founded: number
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["party"]>
    composites: {}
  }

  type PartyGetPayload<S extends boolean | null | undefined | PartyDefaultArgs> = $Result.GetResult<Prisma.$PartyPayload, S>

  type PartyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PartyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PartyCountAggregateInputType | true
    }

  export interface PartyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Party'], meta: { name: 'Party' } }
    /**
     * Find zero or one Party that matches the filter.
     * @param {PartyFindUniqueArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartyFindUniqueArgs>(args: SelectSubset<T, PartyFindUniqueArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Party that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PartyFindUniqueOrThrowArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartyFindUniqueOrThrowArgs>(args: SelectSubset<T, PartyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Party that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindFirstArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartyFindFirstArgs>(args?: SelectSubset<T, PartyFindFirstArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Party that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindFirstOrThrowArgs} args - Arguments to find a Party
     * @example
     * // Get one Party
     * const party = await prisma.party.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartyFindFirstOrThrowArgs>(args?: SelectSubset<T, PartyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Parties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parties
     * const parties = await prisma.party.findMany()
     * 
     * // Get first 10 Parties
     * const parties = await prisma.party.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partyWithIdOnly = await prisma.party.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartyFindManyArgs>(args?: SelectSubset<T, PartyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Party.
     * @param {PartyCreateArgs} args - Arguments to create a Party.
     * @example
     * // Create one Party
     * const Party = await prisma.party.create({
     *   data: {
     *     // ... data to create a Party
     *   }
     * })
     * 
     */
    create<T extends PartyCreateArgs>(args: SelectSubset<T, PartyCreateArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Parties.
     * @param {PartyCreateManyArgs} args - Arguments to create many Parties.
     * @example
     * // Create many Parties
     * const party = await prisma.party.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartyCreateManyArgs>(args?: SelectSubset<T, PartyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parties and returns the data saved in the database.
     * @param {PartyCreateManyAndReturnArgs} args - Arguments to create many Parties.
     * @example
     * // Create many Parties
     * const party = await prisma.party.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parties and only return the `id`
     * const partyWithIdOnly = await prisma.party.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartyCreateManyAndReturnArgs>(args?: SelectSubset<T, PartyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Party.
     * @param {PartyDeleteArgs} args - Arguments to delete one Party.
     * @example
     * // Delete one Party
     * const Party = await prisma.party.delete({
     *   where: {
     *     // ... filter to delete one Party
     *   }
     * })
     * 
     */
    delete<T extends PartyDeleteArgs>(args: SelectSubset<T, PartyDeleteArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Party.
     * @param {PartyUpdateArgs} args - Arguments to update one Party.
     * @example
     * // Update one Party
     * const party = await prisma.party.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartyUpdateArgs>(args: SelectSubset<T, PartyUpdateArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Parties.
     * @param {PartyDeleteManyArgs} args - Arguments to filter Parties to delete.
     * @example
     * // Delete a few Parties
     * const { count } = await prisma.party.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartyDeleteManyArgs>(args?: SelectSubset<T, PartyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parties
     * const party = await prisma.party.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartyUpdateManyArgs>(args: SelectSubset<T, PartyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Party.
     * @param {PartyUpsertArgs} args - Arguments to update or create a Party.
     * @example
     * // Update or create a Party
     * const party = await prisma.party.upsert({
     *   create: {
     *     // ... data to create a Party
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Party we want to update
     *   }
     * })
     */
    upsert<T extends PartyUpsertArgs>(args: SelectSubset<T, PartyUpsertArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Parties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyCountArgs} args - Arguments to filter Parties to count.
     * @example
     * // Count the number of Parties
     * const count = await prisma.party.count({
     *   where: {
     *     // ... the filter for the Parties we want to count
     *   }
     * })
    **/
    count<T extends PartyCountArgs>(
      args?: Subset<T, PartyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Party.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartyAggregateArgs>(args: Subset<T, PartyAggregateArgs>): Prisma.PrismaPromise<GetPartyAggregateType<T>>

    /**
     * Group by Party.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartyGroupByArgs['orderBy'] }
        : { orderBy?: PartyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Party model
   */
  readonly fields: PartyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Party.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidates<T extends Party$candidatesArgs<ExtArgs> = {}>(args?: Subset<T, Party$candidatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Party model
   */ 
  interface PartyFieldRefs {
    readonly id: FieldRef<"Party", 'String'>
    readonly name: FieldRef<"Party", 'String'>
    readonly logoUrl: FieldRef<"Party", 'String'>
    readonly leader: FieldRef<"Party", 'String'>
    readonly founded: FieldRef<"Party", 'Int'>
    readonly description: FieldRef<"Party", 'String'>
    readonly createdAt: FieldRef<"Party", 'DateTime'>
    readonly updatedAt: FieldRef<"Party", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Party findUnique
   */
  export type PartyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party findUniqueOrThrow
   */
  export type PartyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party findFirst
   */
  export type PartyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parties.
     */
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party findFirstOrThrow
   */
  export type PartyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Party to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parties.
     */
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party findMany
   */
  export type PartyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter, which Parties to fetch.
     */
    where?: PartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parties to fetch.
     */
    orderBy?: PartyOrderByWithRelationInput | PartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parties.
     */
    cursor?: PartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parties.
     */
    skip?: number
    distinct?: PartyScalarFieldEnum | PartyScalarFieldEnum[]
  }

  /**
   * Party create
   */
  export type PartyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The data needed to create a Party.
     */
    data: XOR<PartyCreateInput, PartyUncheckedCreateInput>
  }

  /**
   * Party createMany
   */
  export type PartyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parties.
     */
    data: PartyCreateManyInput | PartyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Party createManyAndReturn
   */
  export type PartyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Parties.
     */
    data: PartyCreateManyInput | PartyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Party update
   */
  export type PartyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The data needed to update a Party.
     */
    data: XOR<PartyUpdateInput, PartyUncheckedUpdateInput>
    /**
     * Choose, which Party to update.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party updateMany
   */
  export type PartyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parties.
     */
    data: XOR<PartyUpdateManyMutationInput, PartyUncheckedUpdateManyInput>
    /**
     * Filter which Parties to update
     */
    where?: PartyWhereInput
  }

  /**
   * Party upsert
   */
  export type PartyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * The filter to search for the Party to update in case it exists.
     */
    where: PartyWhereUniqueInput
    /**
     * In case the Party found by the `where` argument doesn't exist, create a new Party with this data.
     */
    create: XOR<PartyCreateInput, PartyUncheckedCreateInput>
    /**
     * In case the Party was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartyUpdateInput, PartyUncheckedUpdateInput>
  }

  /**
   * Party delete
   */
  export type PartyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
    /**
     * Filter which Party to delete.
     */
    where: PartyWhereUniqueInput
  }

  /**
   * Party deleteMany
   */
  export type PartyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parties to delete
     */
    where?: PartyWhereInput
  }

  /**
   * Party.candidates
   */
  export type Party$candidatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    cursor?: CandidateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Party without action
   */
  export type PartyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Party
     */
    select?: PartySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartyInclude<ExtArgs> | null
  }


  /**
   * Model Candidate
   */

  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateAvgAggregateOutputType = {
    votes: number | null
  }

  export type CandidateSumAggregateOutputType = {
    votes: number | null
  }

  export type CandidateMinAggregateOutputType = {
    id: string | null
    userId: string | null
    partyId: string | null
    platformSummary: string | null
    votes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CandidateMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    partyId: string | null
    platformSummary: string | null
    votes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CandidateCountAggregateOutputType = {
    id: number
    userId: number
    partyId: number
    platformSummary: number
    votes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CandidateAvgAggregateInputType = {
    votes?: true
  }

  export type CandidateSumAggregateInputType = {
    votes?: true
  }

  export type CandidateMinAggregateInputType = {
    id?: true
    userId?: true
    partyId?: true
    platformSummary?: true
    votes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CandidateMaxAggregateInputType = {
    id?: true
    userId?: true
    partyId?: true
    platformSummary?: true
    votes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CandidateCountAggregateInputType = {
    id?: true
    userId?: true
    partyId?: true
    platformSummary?: true
    votes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CandidateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate to aggregate.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithAggregationInput | CandidateOrderByWithAggregationInput[]
    by: CandidateScalarFieldEnum[] | CandidateScalarFieldEnum
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _avg?: CandidateAvgAggregateInputType
    _sum?: CandidateSumAggregateInputType
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }

  export type CandidateGroupByOutputType = {
    id: string
    userId: string
    partyId: string
    platformSummary: string | null
    votes: number
    createdAt: Date
    updatedAt: Date
    _count: CandidateCountAggregateOutputType | null
    _avg: CandidateAvgAggregateOutputType | null
    _sum: CandidateSumAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    partyId?: boolean
    platformSummary?: boolean
    votes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    partyId?: boolean
    platformSummary?: boolean
    votes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectScalar = {
    id?: boolean
    userId?: boolean
    partyId?: boolean
    platformSummary?: boolean
    votes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CandidateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }
  export type CandidateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    party?: boolean | PartyDefaultArgs<ExtArgs>
  }

  export type $CandidatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      party: Prisma.$PartyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      partyId: string
      platformSummary: string | null
      votes: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["candidate"]>
    composites: {}
  }

  type CandidateGetPayload<S extends boolean | null | undefined | CandidateDefaultArgs> = $Result.GetResult<Prisma.$CandidatePayload, S>

  type CandidateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CandidateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CandidateCountAggregateInputType | true
    }

  export interface CandidateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate'], meta: { name: 'Candidate' } }
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateFindUniqueArgs>(args: SelectSubset<T, CandidateFindUniqueArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Candidate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CandidateFindUniqueOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateFindFirstArgs>(args?: SelectSubset<T, CandidateFindFirstArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Candidate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateWithIdOnly = await prisma.candidate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateFindManyArgs>(args?: SelectSubset<T, CandidateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
     */
    create<T extends CandidateCreateArgs>(args: SelectSubset<T, CandidateCreateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Candidates.
     * @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateCreateManyArgs>(args?: SelectSubset<T, CandidateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Candidates and returns the data saved in the database.
     * @param {CandidateCreateManyAndReturnArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
     */
    delete<T extends CandidateDeleteArgs>(args: SelectSubset<T, CandidateDeleteArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateUpdateArgs>(args: SelectSubset<T, CandidateUpdateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateDeleteManyArgs>(args?: SelectSubset<T, CandidateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateUpdateManyArgs>(args: SelectSubset<T, CandidateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
     */
    upsert<T extends CandidateUpsertArgs>(args: SelectSubset<T, CandidateUpsertArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): Prisma.PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate model
   */
  readonly fields: CandidateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    party<T extends PartyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartyDefaultArgs<ExtArgs>>): Prisma__PartyClient<$Result.GetResult<Prisma.$PartyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Candidate model
   */ 
  interface CandidateFieldRefs {
    readonly id: FieldRef<"Candidate", 'String'>
    readonly userId: FieldRef<"Candidate", 'String'>
    readonly partyId: FieldRef<"Candidate", 'String'>
    readonly platformSummary: FieldRef<"Candidate", 'String'>
    readonly votes: FieldRef<"Candidate", 'Int'>
    readonly createdAt: FieldRef<"Candidate", 'DateTime'>
    readonly updatedAt: FieldRef<"Candidate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findUniqueOrThrow
   */
  export type CandidateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findFirstOrThrow
   */
  export type CandidateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidates to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate create
   */
  export type CandidateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate.
     */
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }

  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidate createManyAndReturn
   */
  export type CandidateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Candidate update
   */
  export type CandidateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate.
     */
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
  }

  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     */
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     */
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }

  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter which Candidate to delete.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidates to delete
     */
    where?: CandidateWhereInput
  }

  /**
   * Candidate without action
   */
  export type CandidateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
  }


  /**
   * Model GovernorateStatistic
   */

  export type AggregateGovernorateStatistic = {
    _count: GovernorateStatisticCountAggregateOutputType | null
    _avg: GovernorateStatisticAvgAggregateOutputType | null
    _sum: GovernorateStatisticSumAggregateOutputType | null
    _min: GovernorateStatisticMinAggregateOutputType | null
    _max: GovernorateStatisticMaxAggregateOutputType | null
  }

  export type GovernorateStatisticAvgAggregateOutputType = {
    registeredVoters: number | null
    pollingStations: number | null
  }

  export type GovernorateStatisticSumAggregateOutputType = {
    registeredVoters: number | null
    pollingStations: number | null
  }

  export type GovernorateStatisticMinAggregateOutputType = {
    governorateId: string | null
    registeredVoters: number | null
    pollingStations: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GovernorateStatisticMaxAggregateOutputType = {
    governorateId: string | null
    registeredVoters: number | null
    pollingStations: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GovernorateStatisticCountAggregateOutputType = {
    governorateId: number
    registeredVoters: number
    pollingStations: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GovernorateStatisticAvgAggregateInputType = {
    registeredVoters?: true
    pollingStations?: true
  }

  export type GovernorateStatisticSumAggregateInputType = {
    registeredVoters?: true
    pollingStations?: true
  }

  export type GovernorateStatisticMinAggregateInputType = {
    governorateId?: true
    registeredVoters?: true
    pollingStations?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GovernorateStatisticMaxAggregateInputType = {
    governorateId?: true
    registeredVoters?: true
    pollingStations?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GovernorateStatisticCountAggregateInputType = {
    governorateId?: true
    registeredVoters?: true
    pollingStations?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GovernorateStatisticAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GovernorateStatistic to aggregate.
     */
    where?: GovernorateStatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GovernorateStatistics to fetch.
     */
    orderBy?: GovernorateStatisticOrderByWithRelationInput | GovernorateStatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GovernorateStatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GovernorateStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GovernorateStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GovernorateStatistics
    **/
    _count?: true | GovernorateStatisticCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GovernorateStatisticAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GovernorateStatisticSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GovernorateStatisticMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GovernorateStatisticMaxAggregateInputType
  }

  export type GetGovernorateStatisticAggregateType<T extends GovernorateStatisticAggregateArgs> = {
        [P in keyof T & keyof AggregateGovernorateStatistic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGovernorateStatistic[P]>
      : GetScalarType<T[P], AggregateGovernorateStatistic[P]>
  }




  export type GovernorateStatisticGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GovernorateStatisticWhereInput
    orderBy?: GovernorateStatisticOrderByWithAggregationInput | GovernorateStatisticOrderByWithAggregationInput[]
    by: GovernorateStatisticScalarFieldEnum[] | GovernorateStatisticScalarFieldEnum
    having?: GovernorateStatisticScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GovernorateStatisticCountAggregateInputType | true
    _avg?: GovernorateStatisticAvgAggregateInputType
    _sum?: GovernorateStatisticSumAggregateInputType
    _min?: GovernorateStatisticMinAggregateInputType
    _max?: GovernorateStatisticMaxAggregateInputType
  }

  export type GovernorateStatisticGroupByOutputType = {
    governorateId: string
    registeredVoters: number
    pollingStations: number
    createdAt: Date
    updatedAt: Date
    _count: GovernorateStatisticCountAggregateOutputType | null
    _avg: GovernorateStatisticAvgAggregateOutputType | null
    _sum: GovernorateStatisticSumAggregateOutputType | null
    _min: GovernorateStatisticMinAggregateOutputType | null
    _max: GovernorateStatisticMaxAggregateOutputType | null
  }

  type GetGovernorateStatisticGroupByPayload<T extends GovernorateStatisticGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GovernorateStatisticGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GovernorateStatisticGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GovernorateStatisticGroupByOutputType[P]>
            : GetScalarType<T[P], GovernorateStatisticGroupByOutputType[P]>
        }
      >
    >


  export type GovernorateStatisticSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    governorateId?: boolean
    registeredVoters?: boolean
    pollingStations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["governorateStatistic"]>

  export type GovernorateStatisticSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    governorateId?: boolean
    registeredVoters?: boolean
    pollingStations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["governorateStatistic"]>

  export type GovernorateStatisticSelectScalar = {
    governorateId?: boolean
    registeredVoters?: boolean
    pollingStations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GovernorateStatisticInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }
  export type GovernorateStatisticIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    governorate?: boolean | GovernorateDefaultArgs<ExtArgs>
  }

  export type $GovernorateStatisticPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GovernorateStatistic"
    objects: {
      governorate: Prisma.$GovernoratePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      governorateId: string
      registeredVoters: number
      pollingStations: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["governorateStatistic"]>
    composites: {}
  }

  type GovernorateStatisticGetPayload<S extends boolean | null | undefined | GovernorateStatisticDefaultArgs> = $Result.GetResult<Prisma.$GovernorateStatisticPayload, S>

  type GovernorateStatisticCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GovernorateStatisticFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GovernorateStatisticCountAggregateInputType | true
    }

  export interface GovernorateStatisticDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GovernorateStatistic'], meta: { name: 'GovernorateStatistic' } }
    /**
     * Find zero or one GovernorateStatistic that matches the filter.
     * @param {GovernorateStatisticFindUniqueArgs} args - Arguments to find a GovernorateStatistic
     * @example
     * // Get one GovernorateStatistic
     * const governorateStatistic = await prisma.governorateStatistic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GovernorateStatisticFindUniqueArgs>(args: SelectSubset<T, GovernorateStatisticFindUniqueArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GovernorateStatistic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GovernorateStatisticFindUniqueOrThrowArgs} args - Arguments to find a GovernorateStatistic
     * @example
     * // Get one GovernorateStatistic
     * const governorateStatistic = await prisma.governorateStatistic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GovernorateStatisticFindUniqueOrThrowArgs>(args: SelectSubset<T, GovernorateStatisticFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GovernorateStatistic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateStatisticFindFirstArgs} args - Arguments to find a GovernorateStatistic
     * @example
     * // Get one GovernorateStatistic
     * const governorateStatistic = await prisma.governorateStatistic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GovernorateStatisticFindFirstArgs>(args?: SelectSubset<T, GovernorateStatisticFindFirstArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GovernorateStatistic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateStatisticFindFirstOrThrowArgs} args - Arguments to find a GovernorateStatistic
     * @example
     * // Get one GovernorateStatistic
     * const governorateStatistic = await prisma.governorateStatistic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GovernorateStatisticFindFirstOrThrowArgs>(args?: SelectSubset<T, GovernorateStatisticFindFirstOrThrowArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GovernorateStatistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateStatisticFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GovernorateStatistics
     * const governorateStatistics = await prisma.governorateStatistic.findMany()
     * 
     * // Get first 10 GovernorateStatistics
     * const governorateStatistics = await prisma.governorateStatistic.findMany({ take: 10 })
     * 
     * // Only select the `governorateId`
     * const governorateStatisticWithGovernorateIdOnly = await prisma.governorateStatistic.findMany({ select: { governorateId: true } })
     * 
     */
    findMany<T extends GovernorateStatisticFindManyArgs>(args?: SelectSubset<T, GovernorateStatisticFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GovernorateStatistic.
     * @param {GovernorateStatisticCreateArgs} args - Arguments to create a GovernorateStatistic.
     * @example
     * // Create one GovernorateStatistic
     * const GovernorateStatistic = await prisma.governorateStatistic.create({
     *   data: {
     *     // ... data to create a GovernorateStatistic
     *   }
     * })
     * 
     */
    create<T extends GovernorateStatisticCreateArgs>(args: SelectSubset<T, GovernorateStatisticCreateArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GovernorateStatistics.
     * @param {GovernorateStatisticCreateManyArgs} args - Arguments to create many GovernorateStatistics.
     * @example
     * // Create many GovernorateStatistics
     * const governorateStatistic = await prisma.governorateStatistic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GovernorateStatisticCreateManyArgs>(args?: SelectSubset<T, GovernorateStatisticCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GovernorateStatistics and returns the data saved in the database.
     * @param {GovernorateStatisticCreateManyAndReturnArgs} args - Arguments to create many GovernorateStatistics.
     * @example
     * // Create many GovernorateStatistics
     * const governorateStatistic = await prisma.governorateStatistic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GovernorateStatistics and only return the `governorateId`
     * const governorateStatisticWithGovernorateIdOnly = await prisma.governorateStatistic.createManyAndReturn({ 
     *   select: { governorateId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GovernorateStatisticCreateManyAndReturnArgs>(args?: SelectSubset<T, GovernorateStatisticCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GovernorateStatistic.
     * @param {GovernorateStatisticDeleteArgs} args - Arguments to delete one GovernorateStatistic.
     * @example
     * // Delete one GovernorateStatistic
     * const GovernorateStatistic = await prisma.governorateStatistic.delete({
     *   where: {
     *     // ... filter to delete one GovernorateStatistic
     *   }
     * })
     * 
     */
    delete<T extends GovernorateStatisticDeleteArgs>(args: SelectSubset<T, GovernorateStatisticDeleteArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GovernorateStatistic.
     * @param {GovernorateStatisticUpdateArgs} args - Arguments to update one GovernorateStatistic.
     * @example
     * // Update one GovernorateStatistic
     * const governorateStatistic = await prisma.governorateStatistic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GovernorateStatisticUpdateArgs>(args: SelectSubset<T, GovernorateStatisticUpdateArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GovernorateStatistics.
     * @param {GovernorateStatisticDeleteManyArgs} args - Arguments to filter GovernorateStatistics to delete.
     * @example
     * // Delete a few GovernorateStatistics
     * const { count } = await prisma.governorateStatistic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GovernorateStatisticDeleteManyArgs>(args?: SelectSubset<T, GovernorateStatisticDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GovernorateStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateStatisticUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GovernorateStatistics
     * const governorateStatistic = await prisma.governorateStatistic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GovernorateStatisticUpdateManyArgs>(args: SelectSubset<T, GovernorateStatisticUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GovernorateStatistic.
     * @param {GovernorateStatisticUpsertArgs} args - Arguments to update or create a GovernorateStatistic.
     * @example
     * // Update or create a GovernorateStatistic
     * const governorateStatistic = await prisma.governorateStatistic.upsert({
     *   create: {
     *     // ... data to create a GovernorateStatistic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GovernorateStatistic we want to update
     *   }
     * })
     */
    upsert<T extends GovernorateStatisticUpsertArgs>(args: SelectSubset<T, GovernorateStatisticUpsertArgs<ExtArgs>>): Prisma__GovernorateStatisticClient<$Result.GetResult<Prisma.$GovernorateStatisticPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GovernorateStatistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateStatisticCountArgs} args - Arguments to filter GovernorateStatistics to count.
     * @example
     * // Count the number of GovernorateStatistics
     * const count = await prisma.governorateStatistic.count({
     *   where: {
     *     // ... the filter for the GovernorateStatistics we want to count
     *   }
     * })
    **/
    count<T extends GovernorateStatisticCountArgs>(
      args?: Subset<T, GovernorateStatisticCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GovernorateStatisticCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GovernorateStatistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateStatisticAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GovernorateStatisticAggregateArgs>(args: Subset<T, GovernorateStatisticAggregateArgs>): Prisma.PrismaPromise<GetGovernorateStatisticAggregateType<T>>

    /**
     * Group by GovernorateStatistic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateStatisticGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GovernorateStatisticGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GovernorateStatisticGroupByArgs['orderBy'] }
        : { orderBy?: GovernorateStatisticGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GovernorateStatisticGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGovernorateStatisticGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GovernorateStatistic model
   */
  readonly fields: GovernorateStatisticFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GovernorateStatistic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GovernorateStatisticClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    governorate<T extends GovernorateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GovernorateDefaultArgs<ExtArgs>>): Prisma__GovernorateClient<$Result.GetResult<Prisma.$GovernoratePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GovernorateStatistic model
   */ 
  interface GovernorateStatisticFieldRefs {
    readonly governorateId: FieldRef<"GovernorateStatistic", 'String'>
    readonly registeredVoters: FieldRef<"GovernorateStatistic", 'Int'>
    readonly pollingStations: FieldRef<"GovernorateStatistic", 'Int'>
    readonly createdAt: FieldRef<"GovernorateStatistic", 'DateTime'>
    readonly updatedAt: FieldRef<"GovernorateStatistic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GovernorateStatistic findUnique
   */
  export type GovernorateStatisticFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * Filter, which GovernorateStatistic to fetch.
     */
    where: GovernorateStatisticWhereUniqueInput
  }

  /**
   * GovernorateStatistic findUniqueOrThrow
   */
  export type GovernorateStatisticFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * Filter, which GovernorateStatistic to fetch.
     */
    where: GovernorateStatisticWhereUniqueInput
  }

  /**
   * GovernorateStatistic findFirst
   */
  export type GovernorateStatisticFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * Filter, which GovernorateStatistic to fetch.
     */
    where?: GovernorateStatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GovernorateStatistics to fetch.
     */
    orderBy?: GovernorateStatisticOrderByWithRelationInput | GovernorateStatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GovernorateStatistics.
     */
    cursor?: GovernorateStatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GovernorateStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GovernorateStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GovernorateStatistics.
     */
    distinct?: GovernorateStatisticScalarFieldEnum | GovernorateStatisticScalarFieldEnum[]
  }

  /**
   * GovernorateStatistic findFirstOrThrow
   */
  export type GovernorateStatisticFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * Filter, which GovernorateStatistic to fetch.
     */
    where?: GovernorateStatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GovernorateStatistics to fetch.
     */
    orderBy?: GovernorateStatisticOrderByWithRelationInput | GovernorateStatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GovernorateStatistics.
     */
    cursor?: GovernorateStatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GovernorateStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GovernorateStatistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GovernorateStatistics.
     */
    distinct?: GovernorateStatisticScalarFieldEnum | GovernorateStatisticScalarFieldEnum[]
  }

  /**
   * GovernorateStatistic findMany
   */
  export type GovernorateStatisticFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * Filter, which GovernorateStatistics to fetch.
     */
    where?: GovernorateStatisticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GovernorateStatistics to fetch.
     */
    orderBy?: GovernorateStatisticOrderByWithRelationInput | GovernorateStatisticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GovernorateStatistics.
     */
    cursor?: GovernorateStatisticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GovernorateStatistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GovernorateStatistics.
     */
    skip?: number
    distinct?: GovernorateStatisticScalarFieldEnum | GovernorateStatisticScalarFieldEnum[]
  }

  /**
   * GovernorateStatistic create
   */
  export type GovernorateStatisticCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * The data needed to create a GovernorateStatistic.
     */
    data: XOR<GovernorateStatisticCreateInput, GovernorateStatisticUncheckedCreateInput>
  }

  /**
   * GovernorateStatistic createMany
   */
  export type GovernorateStatisticCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GovernorateStatistics.
     */
    data: GovernorateStatisticCreateManyInput | GovernorateStatisticCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GovernorateStatistic createManyAndReturn
   */
  export type GovernorateStatisticCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GovernorateStatistics.
     */
    data: GovernorateStatisticCreateManyInput | GovernorateStatisticCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GovernorateStatistic update
   */
  export type GovernorateStatisticUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * The data needed to update a GovernorateStatistic.
     */
    data: XOR<GovernorateStatisticUpdateInput, GovernorateStatisticUncheckedUpdateInput>
    /**
     * Choose, which GovernorateStatistic to update.
     */
    where: GovernorateStatisticWhereUniqueInput
  }

  /**
   * GovernorateStatistic updateMany
   */
  export type GovernorateStatisticUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GovernorateStatistics.
     */
    data: XOR<GovernorateStatisticUpdateManyMutationInput, GovernorateStatisticUncheckedUpdateManyInput>
    /**
     * Filter which GovernorateStatistics to update
     */
    where?: GovernorateStatisticWhereInput
  }

  /**
   * GovernorateStatistic upsert
   */
  export type GovernorateStatisticUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * The filter to search for the GovernorateStatistic to update in case it exists.
     */
    where: GovernorateStatisticWhereUniqueInput
    /**
     * In case the GovernorateStatistic found by the `where` argument doesn't exist, create a new GovernorateStatistic with this data.
     */
    create: XOR<GovernorateStatisticCreateInput, GovernorateStatisticUncheckedCreateInput>
    /**
     * In case the GovernorateStatistic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GovernorateStatisticUpdateInput, GovernorateStatisticUncheckedUpdateInput>
  }

  /**
   * GovernorateStatistic delete
   */
  export type GovernorateStatisticDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
    /**
     * Filter which GovernorateStatistic to delete.
     */
    where: GovernorateStatisticWhereUniqueInput
  }

  /**
   * GovernorateStatistic deleteMany
   */
  export type GovernorateStatisticDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GovernorateStatistics to delete
     */
    where?: GovernorateStatisticWhereInput
  }

  /**
   * GovernorateStatistic without action
   */
  export type GovernorateStatisticDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateStatistic
     */
    select?: GovernorateStatisticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GovernorateStatisticInclude<ExtArgs> | null
  }


  /**
   * Model GovernorateParticipation
   */

  export type AggregateGovernorateParticipation = {
    _count: GovernorateParticipationCountAggregateOutputType | null
    _avg: GovernorateParticipationAvgAggregateOutputType | null
    _sum: GovernorateParticipationSumAggregateOutputType | null
    _min: GovernorateParticipationMinAggregateOutputType | null
    _max: GovernorateParticipationMaxAggregateOutputType | null
  }

  export type GovernorateParticipationAvgAggregateOutputType = {
    id: number | null
    estimatedTurnout: number | null
  }

  export type GovernorateParticipationSumAggregateOutputType = {
    id: number | null
    estimatedTurnout: number | null
  }

  export type GovernorateParticipationMinAggregateOutputType = {
    id: number | null
    governorateId: string | null
    governorateName: string | null
    estimatedTurnout: number | null
  }

  export type GovernorateParticipationMaxAggregateOutputType = {
    id: number | null
    governorateId: string | null
    governorateName: string | null
    estimatedTurnout: number | null
  }

  export type GovernorateParticipationCountAggregateOutputType = {
    id: number
    governorateId: number
    governorateName: number
    estimatedTurnout: number
    _all: number
  }


  export type GovernorateParticipationAvgAggregateInputType = {
    id?: true
    estimatedTurnout?: true
  }

  export type GovernorateParticipationSumAggregateInputType = {
    id?: true
    estimatedTurnout?: true
  }

  export type GovernorateParticipationMinAggregateInputType = {
    id?: true
    governorateId?: true
    governorateName?: true
    estimatedTurnout?: true
  }

  export type GovernorateParticipationMaxAggregateInputType = {
    id?: true
    governorateId?: true
    governorateName?: true
    estimatedTurnout?: true
  }

  export type GovernorateParticipationCountAggregateInputType = {
    id?: true
    governorateId?: true
    governorateName?: true
    estimatedTurnout?: true
    _all?: true
  }

  export type GovernorateParticipationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GovernorateParticipation to aggregate.
     */
    where?: GovernorateParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GovernorateParticipations to fetch.
     */
    orderBy?: GovernorateParticipationOrderByWithRelationInput | GovernorateParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GovernorateParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GovernorateParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GovernorateParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GovernorateParticipations
    **/
    _count?: true | GovernorateParticipationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GovernorateParticipationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GovernorateParticipationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GovernorateParticipationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GovernorateParticipationMaxAggregateInputType
  }

  export type GetGovernorateParticipationAggregateType<T extends GovernorateParticipationAggregateArgs> = {
        [P in keyof T & keyof AggregateGovernorateParticipation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGovernorateParticipation[P]>
      : GetScalarType<T[P], AggregateGovernorateParticipation[P]>
  }




  export type GovernorateParticipationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GovernorateParticipationWhereInput
    orderBy?: GovernorateParticipationOrderByWithAggregationInput | GovernorateParticipationOrderByWithAggregationInput[]
    by: GovernorateParticipationScalarFieldEnum[] | GovernorateParticipationScalarFieldEnum
    having?: GovernorateParticipationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GovernorateParticipationCountAggregateInputType | true
    _avg?: GovernorateParticipationAvgAggregateInputType
    _sum?: GovernorateParticipationSumAggregateInputType
    _min?: GovernorateParticipationMinAggregateInputType
    _max?: GovernorateParticipationMaxAggregateInputType
  }

  export type GovernorateParticipationGroupByOutputType = {
    id: number
    governorateId: string
    governorateName: string
    estimatedTurnout: number
    _count: GovernorateParticipationCountAggregateOutputType | null
    _avg: GovernorateParticipationAvgAggregateOutputType | null
    _sum: GovernorateParticipationSumAggregateOutputType | null
    _min: GovernorateParticipationMinAggregateOutputType | null
    _max: GovernorateParticipationMaxAggregateOutputType | null
  }

  type GetGovernorateParticipationGroupByPayload<T extends GovernorateParticipationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GovernorateParticipationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GovernorateParticipationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GovernorateParticipationGroupByOutputType[P]>
            : GetScalarType<T[P], GovernorateParticipationGroupByOutputType[P]>
        }
      >
    >


  export type GovernorateParticipationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    governorateId?: boolean
    governorateName?: boolean
    estimatedTurnout?: boolean
  }, ExtArgs["result"]["governorateParticipation"]>

  export type GovernorateParticipationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    governorateId?: boolean
    governorateName?: boolean
    estimatedTurnout?: boolean
  }, ExtArgs["result"]["governorateParticipation"]>

  export type GovernorateParticipationSelectScalar = {
    id?: boolean
    governorateId?: boolean
    governorateName?: boolean
    estimatedTurnout?: boolean
  }


  export type $GovernorateParticipationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GovernorateParticipation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      governorateId: string
      governorateName: string
      estimatedTurnout: number
    }, ExtArgs["result"]["governorateParticipation"]>
    composites: {}
  }

  type GovernorateParticipationGetPayload<S extends boolean | null | undefined | GovernorateParticipationDefaultArgs> = $Result.GetResult<Prisma.$GovernorateParticipationPayload, S>

  type GovernorateParticipationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GovernorateParticipationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GovernorateParticipationCountAggregateInputType | true
    }

  export interface GovernorateParticipationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GovernorateParticipation'], meta: { name: 'GovernorateParticipation' } }
    /**
     * Find zero or one GovernorateParticipation that matches the filter.
     * @param {GovernorateParticipationFindUniqueArgs} args - Arguments to find a GovernorateParticipation
     * @example
     * // Get one GovernorateParticipation
     * const governorateParticipation = await prisma.governorateParticipation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GovernorateParticipationFindUniqueArgs>(args: SelectSubset<T, GovernorateParticipationFindUniqueArgs<ExtArgs>>): Prisma__GovernorateParticipationClient<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GovernorateParticipation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GovernorateParticipationFindUniqueOrThrowArgs} args - Arguments to find a GovernorateParticipation
     * @example
     * // Get one GovernorateParticipation
     * const governorateParticipation = await prisma.governorateParticipation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GovernorateParticipationFindUniqueOrThrowArgs>(args: SelectSubset<T, GovernorateParticipationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GovernorateParticipationClient<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GovernorateParticipation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateParticipationFindFirstArgs} args - Arguments to find a GovernorateParticipation
     * @example
     * // Get one GovernorateParticipation
     * const governorateParticipation = await prisma.governorateParticipation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GovernorateParticipationFindFirstArgs>(args?: SelectSubset<T, GovernorateParticipationFindFirstArgs<ExtArgs>>): Prisma__GovernorateParticipationClient<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GovernorateParticipation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateParticipationFindFirstOrThrowArgs} args - Arguments to find a GovernorateParticipation
     * @example
     * // Get one GovernorateParticipation
     * const governorateParticipation = await prisma.governorateParticipation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GovernorateParticipationFindFirstOrThrowArgs>(args?: SelectSubset<T, GovernorateParticipationFindFirstOrThrowArgs<ExtArgs>>): Prisma__GovernorateParticipationClient<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GovernorateParticipations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateParticipationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GovernorateParticipations
     * const governorateParticipations = await prisma.governorateParticipation.findMany()
     * 
     * // Get first 10 GovernorateParticipations
     * const governorateParticipations = await prisma.governorateParticipation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const governorateParticipationWithIdOnly = await prisma.governorateParticipation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GovernorateParticipationFindManyArgs>(args?: SelectSubset<T, GovernorateParticipationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GovernorateParticipation.
     * @param {GovernorateParticipationCreateArgs} args - Arguments to create a GovernorateParticipation.
     * @example
     * // Create one GovernorateParticipation
     * const GovernorateParticipation = await prisma.governorateParticipation.create({
     *   data: {
     *     // ... data to create a GovernorateParticipation
     *   }
     * })
     * 
     */
    create<T extends GovernorateParticipationCreateArgs>(args: SelectSubset<T, GovernorateParticipationCreateArgs<ExtArgs>>): Prisma__GovernorateParticipationClient<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GovernorateParticipations.
     * @param {GovernorateParticipationCreateManyArgs} args - Arguments to create many GovernorateParticipations.
     * @example
     * // Create many GovernorateParticipations
     * const governorateParticipation = await prisma.governorateParticipation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GovernorateParticipationCreateManyArgs>(args?: SelectSubset<T, GovernorateParticipationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GovernorateParticipations and returns the data saved in the database.
     * @param {GovernorateParticipationCreateManyAndReturnArgs} args - Arguments to create many GovernorateParticipations.
     * @example
     * // Create many GovernorateParticipations
     * const governorateParticipation = await prisma.governorateParticipation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GovernorateParticipations and only return the `id`
     * const governorateParticipationWithIdOnly = await prisma.governorateParticipation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GovernorateParticipationCreateManyAndReturnArgs>(args?: SelectSubset<T, GovernorateParticipationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GovernorateParticipation.
     * @param {GovernorateParticipationDeleteArgs} args - Arguments to delete one GovernorateParticipation.
     * @example
     * // Delete one GovernorateParticipation
     * const GovernorateParticipation = await prisma.governorateParticipation.delete({
     *   where: {
     *     // ... filter to delete one GovernorateParticipation
     *   }
     * })
     * 
     */
    delete<T extends GovernorateParticipationDeleteArgs>(args: SelectSubset<T, GovernorateParticipationDeleteArgs<ExtArgs>>): Prisma__GovernorateParticipationClient<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GovernorateParticipation.
     * @param {GovernorateParticipationUpdateArgs} args - Arguments to update one GovernorateParticipation.
     * @example
     * // Update one GovernorateParticipation
     * const governorateParticipation = await prisma.governorateParticipation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GovernorateParticipationUpdateArgs>(args: SelectSubset<T, GovernorateParticipationUpdateArgs<ExtArgs>>): Prisma__GovernorateParticipationClient<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GovernorateParticipations.
     * @param {GovernorateParticipationDeleteManyArgs} args - Arguments to filter GovernorateParticipations to delete.
     * @example
     * // Delete a few GovernorateParticipations
     * const { count } = await prisma.governorateParticipation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GovernorateParticipationDeleteManyArgs>(args?: SelectSubset<T, GovernorateParticipationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GovernorateParticipations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateParticipationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GovernorateParticipations
     * const governorateParticipation = await prisma.governorateParticipation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GovernorateParticipationUpdateManyArgs>(args: SelectSubset<T, GovernorateParticipationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GovernorateParticipation.
     * @param {GovernorateParticipationUpsertArgs} args - Arguments to update or create a GovernorateParticipation.
     * @example
     * // Update or create a GovernorateParticipation
     * const governorateParticipation = await prisma.governorateParticipation.upsert({
     *   create: {
     *     // ... data to create a GovernorateParticipation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GovernorateParticipation we want to update
     *   }
     * })
     */
    upsert<T extends GovernorateParticipationUpsertArgs>(args: SelectSubset<T, GovernorateParticipationUpsertArgs<ExtArgs>>): Prisma__GovernorateParticipationClient<$Result.GetResult<Prisma.$GovernorateParticipationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GovernorateParticipations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateParticipationCountArgs} args - Arguments to filter GovernorateParticipations to count.
     * @example
     * // Count the number of GovernorateParticipations
     * const count = await prisma.governorateParticipation.count({
     *   where: {
     *     // ... the filter for the GovernorateParticipations we want to count
     *   }
     * })
    **/
    count<T extends GovernorateParticipationCountArgs>(
      args?: Subset<T, GovernorateParticipationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GovernorateParticipationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GovernorateParticipation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateParticipationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GovernorateParticipationAggregateArgs>(args: Subset<T, GovernorateParticipationAggregateArgs>): Prisma.PrismaPromise<GetGovernorateParticipationAggregateType<T>>

    /**
     * Group by GovernorateParticipation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GovernorateParticipationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GovernorateParticipationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GovernorateParticipationGroupByArgs['orderBy'] }
        : { orderBy?: GovernorateParticipationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GovernorateParticipationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGovernorateParticipationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GovernorateParticipation model
   */
  readonly fields: GovernorateParticipationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GovernorateParticipation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GovernorateParticipationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GovernorateParticipation model
   */ 
  interface GovernorateParticipationFieldRefs {
    readonly id: FieldRef<"GovernorateParticipation", 'Int'>
    readonly governorateId: FieldRef<"GovernorateParticipation", 'String'>
    readonly governorateName: FieldRef<"GovernorateParticipation", 'String'>
    readonly estimatedTurnout: FieldRef<"GovernorateParticipation", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GovernorateParticipation findUnique
   */
  export type GovernorateParticipationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * Filter, which GovernorateParticipation to fetch.
     */
    where: GovernorateParticipationWhereUniqueInput
  }

  /**
   * GovernorateParticipation findUniqueOrThrow
   */
  export type GovernorateParticipationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * Filter, which GovernorateParticipation to fetch.
     */
    where: GovernorateParticipationWhereUniqueInput
  }

  /**
   * GovernorateParticipation findFirst
   */
  export type GovernorateParticipationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * Filter, which GovernorateParticipation to fetch.
     */
    where?: GovernorateParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GovernorateParticipations to fetch.
     */
    orderBy?: GovernorateParticipationOrderByWithRelationInput | GovernorateParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GovernorateParticipations.
     */
    cursor?: GovernorateParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GovernorateParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GovernorateParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GovernorateParticipations.
     */
    distinct?: GovernorateParticipationScalarFieldEnum | GovernorateParticipationScalarFieldEnum[]
  }

  /**
   * GovernorateParticipation findFirstOrThrow
   */
  export type GovernorateParticipationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * Filter, which GovernorateParticipation to fetch.
     */
    where?: GovernorateParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GovernorateParticipations to fetch.
     */
    orderBy?: GovernorateParticipationOrderByWithRelationInput | GovernorateParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GovernorateParticipations.
     */
    cursor?: GovernorateParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GovernorateParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GovernorateParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GovernorateParticipations.
     */
    distinct?: GovernorateParticipationScalarFieldEnum | GovernorateParticipationScalarFieldEnum[]
  }

  /**
   * GovernorateParticipation findMany
   */
  export type GovernorateParticipationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * Filter, which GovernorateParticipations to fetch.
     */
    where?: GovernorateParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GovernorateParticipations to fetch.
     */
    orderBy?: GovernorateParticipationOrderByWithRelationInput | GovernorateParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GovernorateParticipations.
     */
    cursor?: GovernorateParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GovernorateParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GovernorateParticipations.
     */
    skip?: number
    distinct?: GovernorateParticipationScalarFieldEnum | GovernorateParticipationScalarFieldEnum[]
  }

  /**
   * GovernorateParticipation create
   */
  export type GovernorateParticipationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * The data needed to create a GovernorateParticipation.
     */
    data: XOR<GovernorateParticipationCreateInput, GovernorateParticipationUncheckedCreateInput>
  }

  /**
   * GovernorateParticipation createMany
   */
  export type GovernorateParticipationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GovernorateParticipations.
     */
    data: GovernorateParticipationCreateManyInput | GovernorateParticipationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GovernorateParticipation createManyAndReturn
   */
  export type GovernorateParticipationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GovernorateParticipations.
     */
    data: GovernorateParticipationCreateManyInput | GovernorateParticipationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GovernorateParticipation update
   */
  export type GovernorateParticipationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * The data needed to update a GovernorateParticipation.
     */
    data: XOR<GovernorateParticipationUpdateInput, GovernorateParticipationUncheckedUpdateInput>
    /**
     * Choose, which GovernorateParticipation to update.
     */
    where: GovernorateParticipationWhereUniqueInput
  }

  /**
   * GovernorateParticipation updateMany
   */
  export type GovernorateParticipationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GovernorateParticipations.
     */
    data: XOR<GovernorateParticipationUpdateManyMutationInput, GovernorateParticipationUncheckedUpdateManyInput>
    /**
     * Filter which GovernorateParticipations to update
     */
    where?: GovernorateParticipationWhereInput
  }

  /**
   * GovernorateParticipation upsert
   */
  export type GovernorateParticipationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * The filter to search for the GovernorateParticipation to update in case it exists.
     */
    where: GovernorateParticipationWhereUniqueInput
    /**
     * In case the GovernorateParticipation found by the `where` argument doesn't exist, create a new GovernorateParticipation with this data.
     */
    create: XOR<GovernorateParticipationCreateInput, GovernorateParticipationUncheckedCreateInput>
    /**
     * In case the GovernorateParticipation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GovernorateParticipationUpdateInput, GovernorateParticipationUncheckedUpdateInput>
  }

  /**
   * GovernorateParticipation delete
   */
  export type GovernorateParticipationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
    /**
     * Filter which GovernorateParticipation to delete.
     */
    where: GovernorateParticipationWhereUniqueInput
  }

  /**
   * GovernorateParticipation deleteMany
   */
  export type GovernorateParticipationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GovernorateParticipations to delete
     */
    where?: GovernorateParticipationWhereInput
  }

  /**
   * GovernorateParticipation without action
   */
  export type GovernorateParticipationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GovernorateParticipation
     */
    select?: GovernorateParticipationSelect<ExtArgs> | null
  }


  /**
   * Model DashboardSnapshot
   */

  export type AggregateDashboardSnapshot = {
    _count: DashboardSnapshotCountAggregateOutputType | null
    _avg: DashboardSnapshotAvgAggregateOutputType | null
    _sum: DashboardSnapshotSumAggregateOutputType | null
    _min: DashboardSnapshotMinAggregateOutputType | null
    _max: DashboardSnapshotMaxAggregateOutputType | null
  }

  export type DashboardSnapshotAvgAggregateOutputType = {
    id: number | null
  }

  export type DashboardSnapshotSumAggregateOutputType = {
    id: number | null
  }

  export type DashboardSnapshotMinAggregateOutputType = {
    id: number | null
    updatedAt: Date | null
  }

  export type DashboardSnapshotMaxAggregateOutputType = {
    id: number | null
    updatedAt: Date | null
  }

  export type DashboardSnapshotCountAggregateOutputType = {
    id: number
    metrics: number
    updatedAt: number
    _all: number
  }


  export type DashboardSnapshotAvgAggregateInputType = {
    id?: true
  }

  export type DashboardSnapshotSumAggregateInputType = {
    id?: true
  }

  export type DashboardSnapshotMinAggregateInputType = {
    id?: true
    updatedAt?: true
  }

  export type DashboardSnapshotMaxAggregateInputType = {
    id?: true
    updatedAt?: true
  }

  export type DashboardSnapshotCountAggregateInputType = {
    id?: true
    metrics?: true
    updatedAt?: true
    _all?: true
  }

  export type DashboardSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DashboardSnapshot to aggregate.
     */
    where?: DashboardSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DashboardSnapshots to fetch.
     */
    orderBy?: DashboardSnapshotOrderByWithRelationInput | DashboardSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DashboardSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DashboardSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DashboardSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DashboardSnapshots
    **/
    _count?: true | DashboardSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DashboardSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DashboardSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DashboardSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DashboardSnapshotMaxAggregateInputType
  }

  export type GetDashboardSnapshotAggregateType<T extends DashboardSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateDashboardSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDashboardSnapshot[P]>
      : GetScalarType<T[P], AggregateDashboardSnapshot[P]>
  }




  export type DashboardSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DashboardSnapshotWhereInput
    orderBy?: DashboardSnapshotOrderByWithAggregationInput | DashboardSnapshotOrderByWithAggregationInput[]
    by: DashboardSnapshotScalarFieldEnum[] | DashboardSnapshotScalarFieldEnum
    having?: DashboardSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DashboardSnapshotCountAggregateInputType | true
    _avg?: DashboardSnapshotAvgAggregateInputType
    _sum?: DashboardSnapshotSumAggregateInputType
    _min?: DashboardSnapshotMinAggregateInputType
    _max?: DashboardSnapshotMaxAggregateInputType
  }

  export type DashboardSnapshotGroupByOutputType = {
    id: number
    metrics: JsonValue
    updatedAt: Date
    _count: DashboardSnapshotCountAggregateOutputType | null
    _avg: DashboardSnapshotAvgAggregateOutputType | null
    _sum: DashboardSnapshotSumAggregateOutputType | null
    _min: DashboardSnapshotMinAggregateOutputType | null
    _max: DashboardSnapshotMaxAggregateOutputType | null
  }

  type GetDashboardSnapshotGroupByPayload<T extends DashboardSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DashboardSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DashboardSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DashboardSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], DashboardSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type DashboardSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metrics?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dashboardSnapshot"]>

  export type DashboardSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metrics?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dashboardSnapshot"]>

  export type DashboardSnapshotSelectScalar = {
    id?: boolean
    metrics?: boolean
    updatedAt?: boolean
  }


  export type $DashboardSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DashboardSnapshot"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      metrics: Prisma.JsonValue
      updatedAt: Date
    }, ExtArgs["result"]["dashboardSnapshot"]>
    composites: {}
  }

  type DashboardSnapshotGetPayload<S extends boolean | null | undefined | DashboardSnapshotDefaultArgs> = $Result.GetResult<Prisma.$DashboardSnapshotPayload, S>

  type DashboardSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DashboardSnapshotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DashboardSnapshotCountAggregateInputType | true
    }

  export interface DashboardSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DashboardSnapshot'], meta: { name: 'DashboardSnapshot' } }
    /**
     * Find zero or one DashboardSnapshot that matches the filter.
     * @param {DashboardSnapshotFindUniqueArgs} args - Arguments to find a DashboardSnapshot
     * @example
     * // Get one DashboardSnapshot
     * const dashboardSnapshot = await prisma.dashboardSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DashboardSnapshotFindUniqueArgs>(args: SelectSubset<T, DashboardSnapshotFindUniqueArgs<ExtArgs>>): Prisma__DashboardSnapshotClient<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DashboardSnapshot that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DashboardSnapshotFindUniqueOrThrowArgs} args - Arguments to find a DashboardSnapshot
     * @example
     * // Get one DashboardSnapshot
     * const dashboardSnapshot = await prisma.dashboardSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DashboardSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, DashboardSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DashboardSnapshotClient<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DashboardSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardSnapshotFindFirstArgs} args - Arguments to find a DashboardSnapshot
     * @example
     * // Get one DashboardSnapshot
     * const dashboardSnapshot = await prisma.dashboardSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DashboardSnapshotFindFirstArgs>(args?: SelectSubset<T, DashboardSnapshotFindFirstArgs<ExtArgs>>): Prisma__DashboardSnapshotClient<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DashboardSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardSnapshotFindFirstOrThrowArgs} args - Arguments to find a DashboardSnapshot
     * @example
     * // Get one DashboardSnapshot
     * const dashboardSnapshot = await prisma.dashboardSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DashboardSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, DashboardSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__DashboardSnapshotClient<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DashboardSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DashboardSnapshots
     * const dashboardSnapshots = await prisma.dashboardSnapshot.findMany()
     * 
     * // Get first 10 DashboardSnapshots
     * const dashboardSnapshots = await prisma.dashboardSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dashboardSnapshotWithIdOnly = await prisma.dashboardSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DashboardSnapshotFindManyArgs>(args?: SelectSubset<T, DashboardSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DashboardSnapshot.
     * @param {DashboardSnapshotCreateArgs} args - Arguments to create a DashboardSnapshot.
     * @example
     * // Create one DashboardSnapshot
     * const DashboardSnapshot = await prisma.dashboardSnapshot.create({
     *   data: {
     *     // ... data to create a DashboardSnapshot
     *   }
     * })
     * 
     */
    create<T extends DashboardSnapshotCreateArgs>(args: SelectSubset<T, DashboardSnapshotCreateArgs<ExtArgs>>): Prisma__DashboardSnapshotClient<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DashboardSnapshots.
     * @param {DashboardSnapshotCreateManyArgs} args - Arguments to create many DashboardSnapshots.
     * @example
     * // Create many DashboardSnapshots
     * const dashboardSnapshot = await prisma.dashboardSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DashboardSnapshotCreateManyArgs>(args?: SelectSubset<T, DashboardSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DashboardSnapshots and returns the data saved in the database.
     * @param {DashboardSnapshotCreateManyAndReturnArgs} args - Arguments to create many DashboardSnapshots.
     * @example
     * // Create many DashboardSnapshots
     * const dashboardSnapshot = await prisma.dashboardSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DashboardSnapshots and only return the `id`
     * const dashboardSnapshotWithIdOnly = await prisma.dashboardSnapshot.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DashboardSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, DashboardSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DashboardSnapshot.
     * @param {DashboardSnapshotDeleteArgs} args - Arguments to delete one DashboardSnapshot.
     * @example
     * // Delete one DashboardSnapshot
     * const DashboardSnapshot = await prisma.dashboardSnapshot.delete({
     *   where: {
     *     // ... filter to delete one DashboardSnapshot
     *   }
     * })
     * 
     */
    delete<T extends DashboardSnapshotDeleteArgs>(args: SelectSubset<T, DashboardSnapshotDeleteArgs<ExtArgs>>): Prisma__DashboardSnapshotClient<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DashboardSnapshot.
     * @param {DashboardSnapshotUpdateArgs} args - Arguments to update one DashboardSnapshot.
     * @example
     * // Update one DashboardSnapshot
     * const dashboardSnapshot = await prisma.dashboardSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DashboardSnapshotUpdateArgs>(args: SelectSubset<T, DashboardSnapshotUpdateArgs<ExtArgs>>): Prisma__DashboardSnapshotClient<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DashboardSnapshots.
     * @param {DashboardSnapshotDeleteManyArgs} args - Arguments to filter DashboardSnapshots to delete.
     * @example
     * // Delete a few DashboardSnapshots
     * const { count } = await prisma.dashboardSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DashboardSnapshotDeleteManyArgs>(args?: SelectSubset<T, DashboardSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DashboardSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DashboardSnapshots
     * const dashboardSnapshot = await prisma.dashboardSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DashboardSnapshotUpdateManyArgs>(args: SelectSubset<T, DashboardSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DashboardSnapshot.
     * @param {DashboardSnapshotUpsertArgs} args - Arguments to update or create a DashboardSnapshot.
     * @example
     * // Update or create a DashboardSnapshot
     * const dashboardSnapshot = await prisma.dashboardSnapshot.upsert({
     *   create: {
     *     // ... data to create a DashboardSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DashboardSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends DashboardSnapshotUpsertArgs>(args: SelectSubset<T, DashboardSnapshotUpsertArgs<ExtArgs>>): Prisma__DashboardSnapshotClient<$Result.GetResult<Prisma.$DashboardSnapshotPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DashboardSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardSnapshotCountArgs} args - Arguments to filter DashboardSnapshots to count.
     * @example
     * // Count the number of DashboardSnapshots
     * const count = await prisma.dashboardSnapshot.count({
     *   where: {
     *     // ... the filter for the DashboardSnapshots we want to count
     *   }
     * })
    **/
    count<T extends DashboardSnapshotCountArgs>(
      args?: Subset<T, DashboardSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DashboardSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DashboardSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DashboardSnapshotAggregateArgs>(args: Subset<T, DashboardSnapshotAggregateArgs>): Prisma.PrismaPromise<GetDashboardSnapshotAggregateType<T>>

    /**
     * Group by DashboardSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DashboardSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DashboardSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: DashboardSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DashboardSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboardSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DashboardSnapshot model
   */
  readonly fields: DashboardSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DashboardSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DashboardSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DashboardSnapshot model
   */ 
  interface DashboardSnapshotFieldRefs {
    readonly id: FieldRef<"DashboardSnapshot", 'Int'>
    readonly metrics: FieldRef<"DashboardSnapshot", 'Json'>
    readonly updatedAt: FieldRef<"DashboardSnapshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DashboardSnapshot findUnique
   */
  export type DashboardSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which DashboardSnapshot to fetch.
     */
    where: DashboardSnapshotWhereUniqueInput
  }

  /**
   * DashboardSnapshot findUniqueOrThrow
   */
  export type DashboardSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which DashboardSnapshot to fetch.
     */
    where: DashboardSnapshotWhereUniqueInput
  }

  /**
   * DashboardSnapshot findFirst
   */
  export type DashboardSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which DashboardSnapshot to fetch.
     */
    where?: DashboardSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DashboardSnapshots to fetch.
     */
    orderBy?: DashboardSnapshotOrderByWithRelationInput | DashboardSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DashboardSnapshots.
     */
    cursor?: DashboardSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DashboardSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DashboardSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DashboardSnapshots.
     */
    distinct?: DashboardSnapshotScalarFieldEnum | DashboardSnapshotScalarFieldEnum[]
  }

  /**
   * DashboardSnapshot findFirstOrThrow
   */
  export type DashboardSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which DashboardSnapshot to fetch.
     */
    where?: DashboardSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DashboardSnapshots to fetch.
     */
    orderBy?: DashboardSnapshotOrderByWithRelationInput | DashboardSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DashboardSnapshots.
     */
    cursor?: DashboardSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DashboardSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DashboardSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DashboardSnapshots.
     */
    distinct?: DashboardSnapshotScalarFieldEnum | DashboardSnapshotScalarFieldEnum[]
  }

  /**
   * DashboardSnapshot findMany
   */
  export type DashboardSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which DashboardSnapshots to fetch.
     */
    where?: DashboardSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DashboardSnapshots to fetch.
     */
    orderBy?: DashboardSnapshotOrderByWithRelationInput | DashboardSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DashboardSnapshots.
     */
    cursor?: DashboardSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DashboardSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DashboardSnapshots.
     */
    skip?: number
    distinct?: DashboardSnapshotScalarFieldEnum | DashboardSnapshotScalarFieldEnum[]
  }

  /**
   * DashboardSnapshot create
   */
  export type DashboardSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * The data needed to create a DashboardSnapshot.
     */
    data: XOR<DashboardSnapshotCreateInput, DashboardSnapshotUncheckedCreateInput>
  }

  /**
   * DashboardSnapshot createMany
   */
  export type DashboardSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DashboardSnapshots.
     */
    data: DashboardSnapshotCreateManyInput | DashboardSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DashboardSnapshot createManyAndReturn
   */
  export type DashboardSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DashboardSnapshots.
     */
    data: DashboardSnapshotCreateManyInput | DashboardSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DashboardSnapshot update
   */
  export type DashboardSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * The data needed to update a DashboardSnapshot.
     */
    data: XOR<DashboardSnapshotUpdateInput, DashboardSnapshotUncheckedUpdateInput>
    /**
     * Choose, which DashboardSnapshot to update.
     */
    where: DashboardSnapshotWhereUniqueInput
  }

  /**
   * DashboardSnapshot updateMany
   */
  export type DashboardSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DashboardSnapshots.
     */
    data: XOR<DashboardSnapshotUpdateManyMutationInput, DashboardSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which DashboardSnapshots to update
     */
    where?: DashboardSnapshotWhereInput
  }

  /**
   * DashboardSnapshot upsert
   */
  export type DashboardSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * The filter to search for the DashboardSnapshot to update in case it exists.
     */
    where: DashboardSnapshotWhereUniqueInput
    /**
     * In case the DashboardSnapshot found by the `where` argument doesn't exist, create a new DashboardSnapshot with this data.
     */
    create: XOR<DashboardSnapshotCreateInput, DashboardSnapshotUncheckedCreateInput>
    /**
     * In case the DashboardSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DashboardSnapshotUpdateInput, DashboardSnapshotUncheckedUpdateInput>
  }

  /**
   * DashboardSnapshot delete
   */
  export type DashboardSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
    /**
     * Filter which DashboardSnapshot to delete.
     */
    where: DashboardSnapshotWhereUniqueInput
  }

  /**
   * DashboardSnapshot deleteMany
   */
  export type DashboardSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DashboardSnapshots to delete
     */
    where?: DashboardSnapshotWhereInput
  }

  /**
   * DashboardSnapshot without action
   */
  export type DashboardSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardSnapshot
     */
    select?: DashboardSnapshotSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GovernorateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    enName: 'enName',
    slug: 'slug',
    path: 'path',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GovernorateScalarFieldEnum = (typeof GovernorateScalarFieldEnum)[keyof typeof GovernorateScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    avatarUrl: 'avatarUrl',
    role: 'role',
    verified: 'verified',
    party: 'party',
    governorateId: 'governorateId',
    bio: 'bio',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    timestamp: 'timestamp',
    content: 'content',
    mediaUrl: 'mediaUrl',
    likes: 'likes',
    comments: 'comments',
    shares: 'shares',
    isSponsored: 'isSponsored',
    type: 'type',
    governorates: 'governorates',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    date: 'date',
    location: 'location',
    organizerId: 'organizerId',
    governorateId: 'governorateId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const ArticleScalarFieldEnum: {
    id: 'id',
    source: 'source',
    timestamp: 'timestamp',
    title: 'title',
    authorName: 'authorName',
    contentSnippet: 'contentSnippet',
    url: 'url',
    governorates: 'governorates',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const DebateScalarFieldEnum: {
    id: 'id',
    title: 'title',
    topic: 'topic',
    scheduledTime: 'scheduledTime',
    isLive: 'isLive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DebateScalarFieldEnum = (typeof DebateScalarFieldEnum)[keyof typeof DebateScalarFieldEnum]


  export const DebateParticipantScalarFieldEnum: {
    debateId: 'debateId',
    userId: 'userId'
  };

  export type DebateParticipantScalarFieldEnum = (typeof DebateParticipantScalarFieldEnum)[keyof typeof DebateParticipantScalarFieldEnum]


  export const PartyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logoUrl: 'logoUrl',
    leader: 'leader',
    founded: 'founded',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PartyScalarFieldEnum = (typeof PartyScalarFieldEnum)[keyof typeof PartyScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    partyId: 'partyId',
    platformSummary: 'platformSummary',
    votes: 'votes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const GovernorateStatisticScalarFieldEnum: {
    governorateId: 'governorateId',
    registeredVoters: 'registeredVoters',
    pollingStations: 'pollingStations',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GovernorateStatisticScalarFieldEnum = (typeof GovernorateStatisticScalarFieldEnum)[keyof typeof GovernorateStatisticScalarFieldEnum]


  export const GovernorateParticipationScalarFieldEnum: {
    id: 'id',
    governorateId: 'governorateId',
    governorateName: 'governorateName',
    estimatedTurnout: 'estimatedTurnout'
  };

  export type GovernorateParticipationScalarFieldEnum = (typeof GovernorateParticipationScalarFieldEnum)[keyof typeof GovernorateParticipationScalarFieldEnum]


  export const DashboardSnapshotScalarFieldEnum: {
    id: 'id',
    metrics: 'metrics',
    updatedAt: 'updatedAt'
  };

  export type DashboardSnapshotScalarFieldEnum = (typeof DashboardSnapshotScalarFieldEnum)[keyof typeof DashboardSnapshotScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'PostType'
   */
  export type EnumPostTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostType'>
    


  /**
   * Reference to a field of type 'PostType[]'
   */
  export type ListEnumPostTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type GovernorateWhereInput = {
    AND?: GovernorateWhereInput | GovernorateWhereInput[]
    OR?: GovernorateWhereInput[]
    NOT?: GovernorateWhereInput | GovernorateWhereInput[]
    id?: StringFilter<"Governorate"> | string
    name?: StringFilter<"Governorate"> | string
    enName?: StringFilter<"Governorate"> | string
    slug?: StringFilter<"Governorate"> | string
    path?: StringNullableFilter<"Governorate"> | string | null
    createdAt?: DateTimeFilter<"Governorate"> | Date | string
    updatedAt?: DateTimeFilter<"Governorate"> | Date | string
    users?: UserListRelationFilter
    events?: EventListRelationFilter
    stats?: XOR<GovernorateStatisticNullableRelationFilter, GovernorateStatisticWhereInput> | null
  }

  export type GovernorateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    enName?: SortOrder
    slug?: SortOrder
    path?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    stats?: GovernorateStatisticOrderByWithRelationInput
  }

  export type GovernorateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: GovernorateWhereInput | GovernorateWhereInput[]
    OR?: GovernorateWhereInput[]
    NOT?: GovernorateWhereInput | GovernorateWhereInput[]
    name?: StringFilter<"Governorate"> | string
    enName?: StringFilter<"Governorate"> | string
    path?: StringNullableFilter<"Governorate"> | string | null
    createdAt?: DateTimeFilter<"Governorate"> | Date | string
    updatedAt?: DateTimeFilter<"Governorate"> | Date | string
    users?: UserListRelationFilter
    events?: EventListRelationFilter
    stats?: XOR<GovernorateStatisticNullableRelationFilter, GovernorateStatisticWhereInput> | null
  }, "id" | "slug">

  export type GovernorateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    enName?: SortOrder
    slug?: SortOrder
    path?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GovernorateCountOrderByAggregateInput
    _max?: GovernorateMaxOrderByAggregateInput
    _min?: GovernorateMinOrderByAggregateInput
  }

  export type GovernorateScalarWhereWithAggregatesInput = {
    AND?: GovernorateScalarWhereWithAggregatesInput | GovernorateScalarWhereWithAggregatesInput[]
    OR?: GovernorateScalarWhereWithAggregatesInput[]
    NOT?: GovernorateScalarWhereWithAggregatesInput | GovernorateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Governorate"> | string
    name?: StringWithAggregatesFilter<"Governorate"> | string
    enName?: StringWithAggregatesFilter<"Governorate"> | string
    slug?: StringWithAggregatesFilter<"Governorate"> | string
    path?: StringNullableWithAggregatesFilter<"Governorate"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Governorate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Governorate"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatarUrl?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    verified?: BoolFilter<"User"> | boolean
    party?: StringFilter<"User"> | string
    governorateId?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    governorate?: XOR<GovernorateRelationFilter, GovernorateWhereInput>
    posts?: PostListRelationFilter
    organized?: EventListRelationFilter
    debates?: DebateParticipantListRelationFilter
    candidate?: XOR<CandidateNullableRelationFilter, CandidateWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    party?: SortOrder
    governorateId?: SortOrder
    bio?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    governorate?: GovernorateOrderByWithRelationInput
    posts?: PostOrderByRelationAggregateInput
    organized?: EventOrderByRelationAggregateInput
    debates?: DebateParticipantOrderByRelationAggregateInput
    candidate?: CandidateOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    avatarUrl?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    verified?: BoolFilter<"User"> | boolean
    party?: StringFilter<"User"> | string
    governorateId?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    governorate?: XOR<GovernorateRelationFilter, GovernorateWhereInput>
    posts?: PostListRelationFilter
    organized?: EventListRelationFilter
    debates?: DebateParticipantListRelationFilter
    candidate?: XOR<CandidateNullableRelationFilter, CandidateWhereInput> | null
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    party?: SortOrder
    governorateId?: SortOrder
    bio?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    avatarUrl?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    verified?: BoolWithAggregatesFilter<"User"> | boolean
    party?: StringWithAggregatesFilter<"User"> | string
    governorateId?: StringWithAggregatesFilter<"User"> | string
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    authorId?: StringFilter<"Post"> | string
    timestamp?: DateTimeFilter<"Post"> | Date | string
    content?: StringFilter<"Post"> | string
    mediaUrl?: StringNullableFilter<"Post"> | string | null
    likes?: IntFilter<"Post"> | number
    comments?: IntFilter<"Post"> | number
    shares?: IntFilter<"Post"> | number
    isSponsored?: BoolFilter<"Post"> | boolean
    type?: EnumPostTypeFilter<"Post"> | $Enums.PostType
    governorates?: StringNullableListFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    timestamp?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    isSponsored?: SortOrder
    type?: SortOrder
    governorates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    author?: UserOrderByWithRelationInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    authorId?: StringFilter<"Post"> | string
    timestamp?: DateTimeFilter<"Post"> | Date | string
    content?: StringFilter<"Post"> | string
    mediaUrl?: StringNullableFilter<"Post"> | string | null
    likes?: IntFilter<"Post"> | number
    comments?: IntFilter<"Post"> | number
    shares?: IntFilter<"Post"> | number
    isSponsored?: BoolFilter<"Post"> | boolean
    type?: EnumPostTypeFilter<"Post"> | $Enums.PostType
    governorates?: StringNullableListFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    timestamp?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    isSponsored?: SortOrder
    type?: SortOrder
    governorates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    authorId?: StringWithAggregatesFilter<"Post"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    content?: StringWithAggregatesFilter<"Post"> | string
    mediaUrl?: StringNullableWithAggregatesFilter<"Post"> | string | null
    likes?: IntWithAggregatesFilter<"Post"> | number
    comments?: IntWithAggregatesFilter<"Post"> | number
    shares?: IntWithAggregatesFilter<"Post"> | number
    isSponsored?: BoolWithAggregatesFilter<"Post"> | boolean
    type?: EnumPostTypeWithAggregatesFilter<"Post"> | $Enums.PostType
    governorates?: StringNullableListFilter<"Post">
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringFilter<"Event"> | string
    organizerId?: StringFilter<"Event"> | string
    governorateId?: StringFilter<"Event"> | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    organizer?: XOR<UserRelationFilter, UserWhereInput>
    governorate?: XOR<GovernorateRelationFilter, GovernorateWhereInput>
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    location?: SortOrder
    organizerId?: SortOrder
    governorateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organizer?: UserOrderByWithRelationInput
    governorate?: GovernorateOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringFilter<"Event"> | string
    organizerId?: StringFilter<"Event"> | string
    governorateId?: StringFilter<"Event"> | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    organizer?: XOR<UserRelationFilter, UserWhereInput>
    governorate?: XOR<GovernorateRelationFilter, GovernorateWhereInput>
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    location?: SortOrder
    organizerId?: SortOrder
    governorateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    location?: StringWithAggregatesFilter<"Event"> | string
    organizerId?: StringWithAggregatesFilter<"Event"> | string
    governorateId?: StringWithAggregatesFilter<"Event"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type ArticleWhereInput = {
    AND?: ArticleWhereInput | ArticleWhereInput[]
    OR?: ArticleWhereInput[]
    NOT?: ArticleWhereInput | ArticleWhereInput[]
    id?: StringFilter<"Article"> | string
    source?: StringFilter<"Article"> | string
    timestamp?: DateTimeFilter<"Article"> | Date | string
    title?: StringFilter<"Article"> | string
    authorName?: StringFilter<"Article"> | string
    contentSnippet?: StringFilter<"Article"> | string
    url?: StringFilter<"Article"> | string
    governorates?: StringNullableListFilter<"Article">
    createdAt?: DateTimeFilter<"Article"> | Date | string
    updatedAt?: DateTimeFilter<"Article"> | Date | string
  }

  export type ArticleOrderByWithRelationInput = {
    id?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
    title?: SortOrder
    authorName?: SortOrder
    contentSnippet?: SortOrder
    url?: SortOrder
    governorates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArticleWhereInput | ArticleWhereInput[]
    OR?: ArticleWhereInput[]
    NOT?: ArticleWhereInput | ArticleWhereInput[]
    source?: StringFilter<"Article"> | string
    timestamp?: DateTimeFilter<"Article"> | Date | string
    title?: StringFilter<"Article"> | string
    authorName?: StringFilter<"Article"> | string
    contentSnippet?: StringFilter<"Article"> | string
    url?: StringFilter<"Article"> | string
    governorates?: StringNullableListFilter<"Article">
    createdAt?: DateTimeFilter<"Article"> | Date | string
    updatedAt?: DateTimeFilter<"Article"> | Date | string
  }, "id">

  export type ArticleOrderByWithAggregationInput = {
    id?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
    title?: SortOrder
    authorName?: SortOrder
    contentSnippet?: SortOrder
    url?: SortOrder
    governorates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: ArticleScalarWhereWithAggregatesInput | ArticleScalarWhereWithAggregatesInput[]
    OR?: ArticleScalarWhereWithAggregatesInput[]
    NOT?: ArticleScalarWhereWithAggregatesInput | ArticleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Article"> | string
    source?: StringWithAggregatesFilter<"Article"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Article"> | Date | string
    title?: StringWithAggregatesFilter<"Article"> | string
    authorName?: StringWithAggregatesFilter<"Article"> | string
    contentSnippet?: StringWithAggregatesFilter<"Article"> | string
    url?: StringWithAggregatesFilter<"Article"> | string
    governorates?: StringNullableListFilter<"Article">
    createdAt?: DateTimeWithAggregatesFilter<"Article"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Article"> | Date | string
  }

  export type DebateWhereInput = {
    AND?: DebateWhereInput | DebateWhereInput[]
    OR?: DebateWhereInput[]
    NOT?: DebateWhereInput | DebateWhereInput[]
    id?: StringFilter<"Debate"> | string
    title?: StringFilter<"Debate"> | string
    topic?: StringFilter<"Debate"> | string
    scheduledTime?: DateTimeFilter<"Debate"> | Date | string
    isLive?: BoolFilter<"Debate"> | boolean
    createdAt?: DateTimeFilter<"Debate"> | Date | string
    updatedAt?: DateTimeFilter<"Debate"> | Date | string
    participants?: DebateParticipantListRelationFilter
  }

  export type DebateOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    topic?: SortOrder
    scheduledTime?: SortOrder
    isLive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    participants?: DebateParticipantOrderByRelationAggregateInput
  }

  export type DebateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DebateWhereInput | DebateWhereInput[]
    OR?: DebateWhereInput[]
    NOT?: DebateWhereInput | DebateWhereInput[]
    title?: StringFilter<"Debate"> | string
    topic?: StringFilter<"Debate"> | string
    scheduledTime?: DateTimeFilter<"Debate"> | Date | string
    isLive?: BoolFilter<"Debate"> | boolean
    createdAt?: DateTimeFilter<"Debate"> | Date | string
    updatedAt?: DateTimeFilter<"Debate"> | Date | string
    participants?: DebateParticipantListRelationFilter
  }, "id">

  export type DebateOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    topic?: SortOrder
    scheduledTime?: SortOrder
    isLive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DebateCountOrderByAggregateInput
    _max?: DebateMaxOrderByAggregateInput
    _min?: DebateMinOrderByAggregateInput
  }

  export type DebateScalarWhereWithAggregatesInput = {
    AND?: DebateScalarWhereWithAggregatesInput | DebateScalarWhereWithAggregatesInput[]
    OR?: DebateScalarWhereWithAggregatesInput[]
    NOT?: DebateScalarWhereWithAggregatesInput | DebateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Debate"> | string
    title?: StringWithAggregatesFilter<"Debate"> | string
    topic?: StringWithAggregatesFilter<"Debate"> | string
    scheduledTime?: DateTimeWithAggregatesFilter<"Debate"> | Date | string
    isLive?: BoolWithAggregatesFilter<"Debate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Debate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Debate"> | Date | string
  }

  export type DebateParticipantWhereInput = {
    AND?: DebateParticipantWhereInput | DebateParticipantWhereInput[]
    OR?: DebateParticipantWhereInput[]
    NOT?: DebateParticipantWhereInput | DebateParticipantWhereInput[]
    debateId?: StringFilter<"DebateParticipant"> | string
    userId?: StringFilter<"DebateParticipant"> | string
    debate?: XOR<DebateRelationFilter, DebateWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DebateParticipantOrderByWithRelationInput = {
    debateId?: SortOrder
    userId?: SortOrder
    debate?: DebateOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type DebateParticipantWhereUniqueInput = Prisma.AtLeast<{
    debateId_userId?: DebateParticipantDebateIdUserIdCompoundUniqueInput
    AND?: DebateParticipantWhereInput | DebateParticipantWhereInput[]
    OR?: DebateParticipantWhereInput[]
    NOT?: DebateParticipantWhereInput | DebateParticipantWhereInput[]
    debateId?: StringFilter<"DebateParticipant"> | string
    userId?: StringFilter<"DebateParticipant"> | string
    debate?: XOR<DebateRelationFilter, DebateWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "debateId_userId">

  export type DebateParticipantOrderByWithAggregationInput = {
    debateId?: SortOrder
    userId?: SortOrder
    _count?: DebateParticipantCountOrderByAggregateInput
    _max?: DebateParticipantMaxOrderByAggregateInput
    _min?: DebateParticipantMinOrderByAggregateInput
  }

  export type DebateParticipantScalarWhereWithAggregatesInput = {
    AND?: DebateParticipantScalarWhereWithAggregatesInput | DebateParticipantScalarWhereWithAggregatesInput[]
    OR?: DebateParticipantScalarWhereWithAggregatesInput[]
    NOT?: DebateParticipantScalarWhereWithAggregatesInput | DebateParticipantScalarWhereWithAggregatesInput[]
    debateId?: StringWithAggregatesFilter<"DebateParticipant"> | string
    userId?: StringWithAggregatesFilter<"DebateParticipant"> | string
  }

  export type PartyWhereInput = {
    AND?: PartyWhereInput | PartyWhereInput[]
    OR?: PartyWhereInput[]
    NOT?: PartyWhereInput | PartyWhereInput[]
    id?: StringFilter<"Party"> | string
    name?: StringFilter<"Party"> | string
    logoUrl?: StringFilter<"Party"> | string
    leader?: StringFilter<"Party"> | string
    founded?: IntFilter<"Party"> | number
    description?: StringFilter<"Party"> | string
    createdAt?: DateTimeFilter<"Party"> | Date | string
    updatedAt?: DateTimeFilter<"Party"> | Date | string
    candidates?: CandidateListRelationFilter
  }

  export type PartyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    leader?: SortOrder
    founded?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    candidates?: CandidateOrderByRelationAggregateInput
  }

  export type PartyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PartyWhereInput | PartyWhereInput[]
    OR?: PartyWhereInput[]
    NOT?: PartyWhereInput | PartyWhereInput[]
    name?: StringFilter<"Party"> | string
    logoUrl?: StringFilter<"Party"> | string
    leader?: StringFilter<"Party"> | string
    founded?: IntFilter<"Party"> | number
    description?: StringFilter<"Party"> | string
    createdAt?: DateTimeFilter<"Party"> | Date | string
    updatedAt?: DateTimeFilter<"Party"> | Date | string
    candidates?: CandidateListRelationFilter
  }, "id">

  export type PartyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    leader?: SortOrder
    founded?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PartyCountOrderByAggregateInput
    _avg?: PartyAvgOrderByAggregateInput
    _max?: PartyMaxOrderByAggregateInput
    _min?: PartyMinOrderByAggregateInput
    _sum?: PartySumOrderByAggregateInput
  }

  export type PartyScalarWhereWithAggregatesInput = {
    AND?: PartyScalarWhereWithAggregatesInput | PartyScalarWhereWithAggregatesInput[]
    OR?: PartyScalarWhereWithAggregatesInput[]
    NOT?: PartyScalarWhereWithAggregatesInput | PartyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Party"> | string
    name?: StringWithAggregatesFilter<"Party"> | string
    logoUrl?: StringWithAggregatesFilter<"Party"> | string
    leader?: StringWithAggregatesFilter<"Party"> | string
    founded?: IntWithAggregatesFilter<"Party"> | number
    description?: StringWithAggregatesFilter<"Party"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Party"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Party"> | Date | string
  }

  export type CandidateWhereInput = {
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    id?: StringFilter<"Candidate"> | string
    userId?: StringFilter<"Candidate"> | string
    partyId?: StringFilter<"Candidate"> | string
    platformSummary?: StringNullableFilter<"Candidate"> | string | null
    votes?: IntFilter<"Candidate"> | number
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    party?: XOR<PartyRelationFilter, PartyWhereInput>
  }

  export type CandidateOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    partyId?: SortOrder
    platformSummary?: SortOrderInput | SortOrder
    votes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    party?: PartyOrderByWithRelationInput
  }

  export type CandidateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    partyId?: StringFilter<"Candidate"> | string
    platformSummary?: StringNullableFilter<"Candidate"> | string | null
    votes?: IntFilter<"Candidate"> | number
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    party?: XOR<PartyRelationFilter, PartyWhereInput>
  }, "id" | "userId">

  export type CandidateOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    partyId?: SortOrder
    platformSummary?: SortOrderInput | SortOrder
    votes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _avg?: CandidateAvgOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
    _sum?: CandidateSumOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    OR?: CandidateScalarWhereWithAggregatesInput[]
    NOT?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Candidate"> | string
    userId?: StringWithAggregatesFilter<"Candidate"> | string
    partyId?: StringWithAggregatesFilter<"Candidate"> | string
    platformSummary?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    votes?: IntWithAggregatesFilter<"Candidate"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
  }

  export type GovernorateStatisticWhereInput = {
    AND?: GovernorateStatisticWhereInput | GovernorateStatisticWhereInput[]
    OR?: GovernorateStatisticWhereInput[]
    NOT?: GovernorateStatisticWhereInput | GovernorateStatisticWhereInput[]
    governorateId?: StringFilter<"GovernorateStatistic"> | string
    registeredVoters?: IntFilter<"GovernorateStatistic"> | number
    pollingStations?: IntFilter<"GovernorateStatistic"> | number
    createdAt?: DateTimeFilter<"GovernorateStatistic"> | Date | string
    updatedAt?: DateTimeFilter<"GovernorateStatistic"> | Date | string
    governorate?: XOR<GovernorateRelationFilter, GovernorateWhereInput>
  }

  export type GovernorateStatisticOrderByWithRelationInput = {
    governorateId?: SortOrder
    registeredVoters?: SortOrder
    pollingStations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    governorate?: GovernorateOrderByWithRelationInput
  }

  export type GovernorateStatisticWhereUniqueInput = Prisma.AtLeast<{
    governorateId?: string
    AND?: GovernorateStatisticWhereInput | GovernorateStatisticWhereInput[]
    OR?: GovernorateStatisticWhereInput[]
    NOT?: GovernorateStatisticWhereInput | GovernorateStatisticWhereInput[]
    registeredVoters?: IntFilter<"GovernorateStatistic"> | number
    pollingStations?: IntFilter<"GovernorateStatistic"> | number
    createdAt?: DateTimeFilter<"GovernorateStatistic"> | Date | string
    updatedAt?: DateTimeFilter<"GovernorateStatistic"> | Date | string
    governorate?: XOR<GovernorateRelationFilter, GovernorateWhereInput>
  }, "governorateId">

  export type GovernorateStatisticOrderByWithAggregationInput = {
    governorateId?: SortOrder
    registeredVoters?: SortOrder
    pollingStations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GovernorateStatisticCountOrderByAggregateInput
    _avg?: GovernorateStatisticAvgOrderByAggregateInput
    _max?: GovernorateStatisticMaxOrderByAggregateInput
    _min?: GovernorateStatisticMinOrderByAggregateInput
    _sum?: GovernorateStatisticSumOrderByAggregateInput
  }

  export type GovernorateStatisticScalarWhereWithAggregatesInput = {
    AND?: GovernorateStatisticScalarWhereWithAggregatesInput | GovernorateStatisticScalarWhereWithAggregatesInput[]
    OR?: GovernorateStatisticScalarWhereWithAggregatesInput[]
    NOT?: GovernorateStatisticScalarWhereWithAggregatesInput | GovernorateStatisticScalarWhereWithAggregatesInput[]
    governorateId?: StringWithAggregatesFilter<"GovernorateStatistic"> | string
    registeredVoters?: IntWithAggregatesFilter<"GovernorateStatistic"> | number
    pollingStations?: IntWithAggregatesFilter<"GovernorateStatistic"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GovernorateStatistic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GovernorateStatistic"> | Date | string
  }

  export type GovernorateParticipationWhereInput = {
    AND?: GovernorateParticipationWhereInput | GovernorateParticipationWhereInput[]
    OR?: GovernorateParticipationWhereInput[]
    NOT?: GovernorateParticipationWhereInput | GovernorateParticipationWhereInput[]
    id?: IntFilter<"GovernorateParticipation"> | number
    governorateId?: StringFilter<"GovernorateParticipation"> | string
    governorateName?: StringFilter<"GovernorateParticipation"> | string
    estimatedTurnout?: IntFilter<"GovernorateParticipation"> | number
  }

  export type GovernorateParticipationOrderByWithRelationInput = {
    id?: SortOrder
    governorateId?: SortOrder
    governorateName?: SortOrder
    estimatedTurnout?: SortOrder
  }

  export type GovernorateParticipationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GovernorateParticipationWhereInput | GovernorateParticipationWhereInput[]
    OR?: GovernorateParticipationWhereInput[]
    NOT?: GovernorateParticipationWhereInput | GovernorateParticipationWhereInput[]
    governorateId?: StringFilter<"GovernorateParticipation"> | string
    governorateName?: StringFilter<"GovernorateParticipation"> | string
    estimatedTurnout?: IntFilter<"GovernorateParticipation"> | number
  }, "id">

  export type GovernorateParticipationOrderByWithAggregationInput = {
    id?: SortOrder
    governorateId?: SortOrder
    governorateName?: SortOrder
    estimatedTurnout?: SortOrder
    _count?: GovernorateParticipationCountOrderByAggregateInput
    _avg?: GovernorateParticipationAvgOrderByAggregateInput
    _max?: GovernorateParticipationMaxOrderByAggregateInput
    _min?: GovernorateParticipationMinOrderByAggregateInput
    _sum?: GovernorateParticipationSumOrderByAggregateInput
  }

  export type GovernorateParticipationScalarWhereWithAggregatesInput = {
    AND?: GovernorateParticipationScalarWhereWithAggregatesInput | GovernorateParticipationScalarWhereWithAggregatesInput[]
    OR?: GovernorateParticipationScalarWhereWithAggregatesInput[]
    NOT?: GovernorateParticipationScalarWhereWithAggregatesInput | GovernorateParticipationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GovernorateParticipation"> | number
    governorateId?: StringWithAggregatesFilter<"GovernorateParticipation"> | string
    governorateName?: StringWithAggregatesFilter<"GovernorateParticipation"> | string
    estimatedTurnout?: IntWithAggregatesFilter<"GovernorateParticipation"> | number
  }

  export type DashboardSnapshotWhereInput = {
    AND?: DashboardSnapshotWhereInput | DashboardSnapshotWhereInput[]
    OR?: DashboardSnapshotWhereInput[]
    NOT?: DashboardSnapshotWhereInput | DashboardSnapshotWhereInput[]
    id?: IntFilter<"DashboardSnapshot"> | number
    metrics?: JsonFilter<"DashboardSnapshot">
    updatedAt?: DateTimeFilter<"DashboardSnapshot"> | Date | string
  }

  export type DashboardSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    metrics?: SortOrder
    updatedAt?: SortOrder
  }

  export type DashboardSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DashboardSnapshotWhereInput | DashboardSnapshotWhereInput[]
    OR?: DashboardSnapshotWhereInput[]
    NOT?: DashboardSnapshotWhereInput | DashboardSnapshotWhereInput[]
    metrics?: JsonFilter<"DashboardSnapshot">
    updatedAt?: DateTimeFilter<"DashboardSnapshot"> | Date | string
  }, "id">

  export type DashboardSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    metrics?: SortOrder
    updatedAt?: SortOrder
    _count?: DashboardSnapshotCountOrderByAggregateInput
    _avg?: DashboardSnapshotAvgOrderByAggregateInput
    _max?: DashboardSnapshotMaxOrderByAggregateInput
    _min?: DashboardSnapshotMinOrderByAggregateInput
    _sum?: DashboardSnapshotSumOrderByAggregateInput
  }

  export type DashboardSnapshotScalarWhereWithAggregatesInput = {
    AND?: DashboardSnapshotScalarWhereWithAggregatesInput | DashboardSnapshotScalarWhereWithAggregatesInput[]
    OR?: DashboardSnapshotScalarWhereWithAggregatesInput[]
    NOT?: DashboardSnapshotScalarWhereWithAggregatesInput | DashboardSnapshotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DashboardSnapshot"> | number
    metrics?: JsonWithAggregatesFilter<"DashboardSnapshot">
    updatedAt?: DateTimeWithAggregatesFilter<"DashboardSnapshot"> | Date | string
  }

  export type GovernorateCreateInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutGovernorateInput
    events?: EventCreateNestedManyWithoutGovernorateInput
    stats?: GovernorateStatisticCreateNestedOneWithoutGovernorateInput
  }

  export type GovernorateUncheckedCreateInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutGovernorateInput
    events?: EventUncheckedCreateNestedManyWithoutGovernorateInput
    stats?: GovernorateStatisticUncheckedCreateNestedOneWithoutGovernorateInput
  }

  export type GovernorateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutGovernorateNestedInput
    events?: EventUpdateManyWithoutGovernorateNestedInput
    stats?: GovernorateStatisticUpdateOneWithoutGovernorateNestedInput
  }

  export type GovernorateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutGovernorateNestedInput
    events?: EventUncheckedUpdateManyWithoutGovernorateNestedInput
    stats?: GovernorateStatisticUncheckedUpdateOneWithoutGovernorateNestedInput
  }

  export type GovernorateCreateManyInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GovernorateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GovernorateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    governorate: GovernorateCreateNestedOneWithoutUsersInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    organized?: EventCreateNestedManyWithoutOrganizerInput
    debates?: DebateParticipantCreateNestedManyWithoutUserInput
    candidate?: CandidateCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    governorateId: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    organized?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    debates?: DebateParticipantUncheckedCreateNestedManyWithoutUserInput
    candidate?: CandidateUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    governorate?: GovernorateUpdateOneRequiredWithoutUsersNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    organized?: EventUpdateManyWithoutOrganizerNestedInput
    debates?: DebateParticipantUpdateManyWithoutUserNestedInput
    candidate?: CandidateUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    organized?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    debates?: DebateParticipantUncheckedUpdateManyWithoutUserNestedInput
    candidate?: CandidateUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    governorateId: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    id: string
    timestamp?: Date | string
    content: string
    mediaUrl?: string | null
    likes?: number
    comments?: number
    shares?: number
    isSponsored?: boolean
    type: $Enums.PostType
    governorates?: PostCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id: string
    authorId: string
    timestamp?: Date | string
    content: string
    mediaUrl?: string | null
    likes?: number
    comments?: number
    shares?: number
    isSponsored?: boolean
    type: $Enums.PostType
    governorates?: PostCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    isSponsored?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    governorates?: PostUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    isSponsored?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    governorates?: PostUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateManyInput = {
    id: string
    authorId: string
    timestamp?: Date | string
    content: string
    mediaUrl?: string | null
    likes?: number
    comments?: number
    shares?: number
    isSponsored?: boolean
    type: $Enums.PostType
    governorates?: PostCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    isSponsored?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    governorates?: PostUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    isSponsored?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    governorates?: PostUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id: string
    title: string
    date: Date | string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizer: UserCreateNestedOneWithoutOrganizedInput
    governorate: GovernorateCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    id: string
    title: string
    date: Date | string
    location: string
    organizerId: string
    governorateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserUpdateOneRequiredWithoutOrganizedNestedInput
    governorate?: GovernorateUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyInput = {
    id: string
    title: string
    date: Date | string
    location: string
    organizerId: string
    governorateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleCreateInput = {
    id: string
    source: string
    timestamp: Date | string
    title: string
    authorName: string
    contentSnippet: string
    url: string
    governorates?: ArticleCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUncheckedCreateInput = {
    id: string
    source: string
    timestamp: Date | string
    title: string
    authorName: string
    contentSnippet: string
    url: string
    governorates?: ArticleCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    authorName?: StringFieldUpdateOperationsInput | string
    contentSnippet?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    governorates?: ArticleUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    authorName?: StringFieldUpdateOperationsInput | string
    contentSnippet?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    governorates?: ArticleUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleCreateManyInput = {
    id: string
    source: string
    timestamp: Date | string
    title: string
    authorName: string
    contentSnippet: string
    url: string
    governorates?: ArticleCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    authorName?: StringFieldUpdateOperationsInput | string
    contentSnippet?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    governorates?: ArticleUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    authorName?: StringFieldUpdateOperationsInput | string
    contentSnippet?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    governorates?: ArticleUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DebateCreateInput = {
    id: string
    title: string
    topic: string
    scheduledTime: Date | string
    isLive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: DebateParticipantCreateNestedManyWithoutDebateInput
  }

  export type DebateUncheckedCreateInput = {
    id: string
    title: string
    topic: string
    scheduledTime: Date | string
    isLive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: DebateParticipantUncheckedCreateNestedManyWithoutDebateInput
  }

  export type DebateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    scheduledTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isLive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: DebateParticipantUpdateManyWithoutDebateNestedInput
  }

  export type DebateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    scheduledTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isLive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: DebateParticipantUncheckedUpdateManyWithoutDebateNestedInput
  }

  export type DebateCreateManyInput = {
    id: string
    title: string
    topic: string
    scheduledTime: Date | string
    isLive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DebateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    scheduledTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isLive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DebateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    scheduledTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isLive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DebateParticipantCreateInput = {
    debate: DebateCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutDebatesInput
  }

  export type DebateParticipantUncheckedCreateInput = {
    debateId: string
    userId: string
  }

  export type DebateParticipantUpdateInput = {
    debate?: DebateUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutDebatesNestedInput
  }

  export type DebateParticipantUncheckedUpdateInput = {
    debateId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DebateParticipantCreateManyInput = {
    debateId: string
    userId: string
  }

  export type DebateParticipantUpdateManyMutationInput = {

  }

  export type DebateParticipantUncheckedUpdateManyInput = {
    debateId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PartyCreateInput = {
    id: string
    name: string
    logoUrl: string
    leader: string
    founded: number
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateCreateNestedManyWithoutPartyInput
  }

  export type PartyUncheckedCreateInput = {
    id: string
    name: string
    logoUrl: string
    leader: string
    founded: number
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    candidates?: CandidateUncheckedCreateNestedManyWithoutPartyInput
  }

  export type PartyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    leader?: StringFieldUpdateOperationsInput | string
    founded?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUpdateManyWithoutPartyNestedInput
  }

  export type PartyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    leader?: StringFieldUpdateOperationsInput | string
    founded?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidates?: CandidateUncheckedUpdateManyWithoutPartyNestedInput
  }

  export type PartyCreateManyInput = {
    id: string
    name: string
    logoUrl: string
    leader: string
    founded: number
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    leader?: StringFieldUpdateOperationsInput | string
    founded?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    leader?: StringFieldUpdateOperationsInput | string
    founded?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateCreateInput = {
    id: string
    platformSummary?: string | null
    votes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCandidateInput
    party: PartyCreateNestedOneWithoutCandidatesInput
  }

  export type CandidateUncheckedCreateInput = {
    id: string
    userId: string
    partyId: string
    platformSummary?: string | null
    votes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCandidateNestedInput
    party?: PartyUpdateOneRequiredWithoutCandidatesNestedInput
  }

  export type CandidateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    partyId?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateCreateManyInput = {
    id: string
    userId: string
    partyId: string
    platformSummary?: string | null
    votes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    partyId?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GovernorateStatisticCreateInput = {
    registeredVoters: number
    pollingStations: number
    createdAt?: Date | string
    updatedAt?: Date | string
    governorate: GovernorateCreateNestedOneWithoutStatsInput
  }

  export type GovernorateStatisticUncheckedCreateInput = {
    governorateId: string
    registeredVoters: number
    pollingStations: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GovernorateStatisticUpdateInput = {
    registeredVoters?: IntFieldUpdateOperationsInput | number
    pollingStations?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    governorate?: GovernorateUpdateOneRequiredWithoutStatsNestedInput
  }

  export type GovernorateStatisticUncheckedUpdateInput = {
    governorateId?: StringFieldUpdateOperationsInput | string
    registeredVoters?: IntFieldUpdateOperationsInput | number
    pollingStations?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GovernorateStatisticCreateManyInput = {
    governorateId: string
    registeredVoters: number
    pollingStations: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GovernorateStatisticUpdateManyMutationInput = {
    registeredVoters?: IntFieldUpdateOperationsInput | number
    pollingStations?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GovernorateStatisticUncheckedUpdateManyInput = {
    governorateId?: StringFieldUpdateOperationsInput | string
    registeredVoters?: IntFieldUpdateOperationsInput | number
    pollingStations?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GovernorateParticipationCreateInput = {
    governorateId: string
    governorateName: string
    estimatedTurnout: number
  }

  export type GovernorateParticipationUncheckedCreateInput = {
    id?: number
    governorateId: string
    governorateName: string
    estimatedTurnout: number
  }

  export type GovernorateParticipationUpdateInput = {
    governorateId?: StringFieldUpdateOperationsInput | string
    governorateName?: StringFieldUpdateOperationsInput | string
    estimatedTurnout?: IntFieldUpdateOperationsInput | number
  }

  export type GovernorateParticipationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    governorateId?: StringFieldUpdateOperationsInput | string
    governorateName?: StringFieldUpdateOperationsInput | string
    estimatedTurnout?: IntFieldUpdateOperationsInput | number
  }

  export type GovernorateParticipationCreateManyInput = {
    id?: number
    governorateId: string
    governorateName: string
    estimatedTurnout: number
  }

  export type GovernorateParticipationUpdateManyMutationInput = {
    governorateId?: StringFieldUpdateOperationsInput | string
    governorateName?: StringFieldUpdateOperationsInput | string
    estimatedTurnout?: IntFieldUpdateOperationsInput | number
  }

  export type GovernorateParticipationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    governorateId?: StringFieldUpdateOperationsInput | string
    governorateName?: StringFieldUpdateOperationsInput | string
    estimatedTurnout?: IntFieldUpdateOperationsInput | number
  }

  export type DashboardSnapshotCreateInput = {
    id?: number
    metrics: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type DashboardSnapshotUncheckedCreateInput = {
    id?: number
    metrics: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type DashboardSnapshotUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DashboardSnapshotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DashboardSnapshotCreateManyInput = {
    id?: number
    metrics: JsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type DashboardSnapshotUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DashboardSnapshotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type GovernorateStatisticNullableRelationFilter = {
    is?: GovernorateStatisticWhereInput | null
    isNot?: GovernorateStatisticWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GovernorateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    enName?: SortOrder
    slug?: SortOrder
    path?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GovernorateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    enName?: SortOrder
    slug?: SortOrder
    path?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GovernorateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    enName?: SortOrder
    slug?: SortOrder
    path?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type GovernorateRelationFilter = {
    is?: GovernorateWhereInput
    isNot?: GovernorateWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type DebateParticipantListRelationFilter = {
    every?: DebateParticipantWhereInput
    some?: DebateParticipantWhereInput
    none?: DebateParticipantWhereInput
  }

  export type CandidateNullableRelationFilter = {
    is?: CandidateWhereInput | null
    isNot?: CandidateWhereInput | null
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DebateParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    party?: SortOrder
    governorateId?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    party?: SortOrder
    governorateId?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    party?: SortOrder
    governorateId?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumPostTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PostType | EnumPostTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPostTypeFilter<$PrismaModel> | $Enums.PostType
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    timestamp?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    isSponsored?: SortOrder
    type?: SortOrder
    governorates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    timestamp?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    isSponsored?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    timestamp?: SortOrder
    content?: SortOrder
    mediaUrl?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    isSponsored?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumPostTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostType | EnumPostTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPostTypeWithAggregatesFilter<$PrismaModel> | $Enums.PostType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostTypeFilter<$PrismaModel>
    _max?: NestedEnumPostTypeFilter<$PrismaModel>
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    location?: SortOrder
    organizerId?: SortOrder
    governorateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    location?: SortOrder
    organizerId?: SortOrder
    governorateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    location?: SortOrder
    organizerId?: SortOrder
    governorateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleCountOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
    title?: SortOrder
    authorName?: SortOrder
    contentSnippet?: SortOrder
    url?: SortOrder
    governorates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
    title?: SortOrder
    authorName?: SortOrder
    contentSnippet?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    timestamp?: SortOrder
    title?: SortOrder
    authorName?: SortOrder
    contentSnippet?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DebateCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    topic?: SortOrder
    scheduledTime?: SortOrder
    isLive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DebateMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    topic?: SortOrder
    scheduledTime?: SortOrder
    isLive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DebateMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    topic?: SortOrder
    scheduledTime?: SortOrder
    isLive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DebateRelationFilter = {
    is?: DebateWhereInput
    isNot?: DebateWhereInput
  }

  export type DebateParticipantDebateIdUserIdCompoundUniqueInput = {
    debateId: string
    userId: string
  }

  export type DebateParticipantCountOrderByAggregateInput = {
    debateId?: SortOrder
    userId?: SortOrder
  }

  export type DebateParticipantMaxOrderByAggregateInput = {
    debateId?: SortOrder
    userId?: SortOrder
  }

  export type DebateParticipantMinOrderByAggregateInput = {
    debateId?: SortOrder
    userId?: SortOrder
  }

  export type CandidateListRelationFilter = {
    every?: CandidateWhereInput
    some?: CandidateWhereInput
    none?: CandidateWhereInput
  }

  export type CandidateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    leader?: SortOrder
    founded?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartyAvgOrderByAggregateInput = {
    founded?: SortOrder
  }

  export type PartyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    leader?: SortOrder
    founded?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    leader?: SortOrder
    founded?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PartySumOrderByAggregateInput = {
    founded?: SortOrder
  }

  export type PartyRelationFilter = {
    is?: PartyWhereInput
    isNot?: PartyWhereInput
  }

  export type CandidateCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    partyId?: SortOrder
    platformSummary?: SortOrder
    votes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CandidateAvgOrderByAggregateInput = {
    votes?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    partyId?: SortOrder
    platformSummary?: SortOrder
    votes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    partyId?: SortOrder
    platformSummary?: SortOrder
    votes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CandidateSumOrderByAggregateInput = {
    votes?: SortOrder
  }

  export type GovernorateStatisticCountOrderByAggregateInput = {
    governorateId?: SortOrder
    registeredVoters?: SortOrder
    pollingStations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GovernorateStatisticAvgOrderByAggregateInput = {
    registeredVoters?: SortOrder
    pollingStations?: SortOrder
  }

  export type GovernorateStatisticMaxOrderByAggregateInput = {
    governorateId?: SortOrder
    registeredVoters?: SortOrder
    pollingStations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GovernorateStatisticMinOrderByAggregateInput = {
    governorateId?: SortOrder
    registeredVoters?: SortOrder
    pollingStations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GovernorateStatisticSumOrderByAggregateInput = {
    registeredVoters?: SortOrder
    pollingStations?: SortOrder
  }

  export type GovernorateParticipationCountOrderByAggregateInput = {
    id?: SortOrder
    governorateId?: SortOrder
    governorateName?: SortOrder
    estimatedTurnout?: SortOrder
  }

  export type GovernorateParticipationAvgOrderByAggregateInput = {
    id?: SortOrder
    estimatedTurnout?: SortOrder
  }

  export type GovernorateParticipationMaxOrderByAggregateInput = {
    id?: SortOrder
    governorateId?: SortOrder
    governorateName?: SortOrder
    estimatedTurnout?: SortOrder
  }

  export type GovernorateParticipationMinOrderByAggregateInput = {
    id?: SortOrder
    governorateId?: SortOrder
    governorateName?: SortOrder
    estimatedTurnout?: SortOrder
  }

  export type GovernorateParticipationSumOrderByAggregateInput = {
    id?: SortOrder
    estimatedTurnout?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DashboardSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    metrics?: SortOrder
    updatedAt?: SortOrder
  }

  export type DashboardSnapshotAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DashboardSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
  }

  export type DashboardSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
  }

  export type DashboardSnapshotSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserCreateNestedManyWithoutGovernorateInput = {
    create?: XOR<UserCreateWithoutGovernorateInput, UserUncheckedCreateWithoutGovernorateInput> | UserCreateWithoutGovernorateInput[] | UserUncheckedCreateWithoutGovernorateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGovernorateInput | UserCreateOrConnectWithoutGovernorateInput[]
    createMany?: UserCreateManyGovernorateInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutGovernorateInput = {
    create?: XOR<EventCreateWithoutGovernorateInput, EventUncheckedCreateWithoutGovernorateInput> | EventCreateWithoutGovernorateInput[] | EventUncheckedCreateWithoutGovernorateInput[]
    connectOrCreate?: EventCreateOrConnectWithoutGovernorateInput | EventCreateOrConnectWithoutGovernorateInput[]
    createMany?: EventCreateManyGovernorateInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type GovernorateStatisticCreateNestedOneWithoutGovernorateInput = {
    create?: XOR<GovernorateStatisticCreateWithoutGovernorateInput, GovernorateStatisticUncheckedCreateWithoutGovernorateInput>
    connectOrCreate?: GovernorateStatisticCreateOrConnectWithoutGovernorateInput
    connect?: GovernorateStatisticWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutGovernorateInput = {
    create?: XOR<UserCreateWithoutGovernorateInput, UserUncheckedCreateWithoutGovernorateInput> | UserCreateWithoutGovernorateInput[] | UserUncheckedCreateWithoutGovernorateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGovernorateInput | UserCreateOrConnectWithoutGovernorateInput[]
    createMany?: UserCreateManyGovernorateInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutGovernorateInput = {
    create?: XOR<EventCreateWithoutGovernorateInput, EventUncheckedCreateWithoutGovernorateInput> | EventCreateWithoutGovernorateInput[] | EventUncheckedCreateWithoutGovernorateInput[]
    connectOrCreate?: EventCreateOrConnectWithoutGovernorateInput | EventCreateOrConnectWithoutGovernorateInput[]
    createMany?: EventCreateManyGovernorateInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type GovernorateStatisticUncheckedCreateNestedOneWithoutGovernorateInput = {
    create?: XOR<GovernorateStatisticCreateWithoutGovernorateInput, GovernorateStatisticUncheckedCreateWithoutGovernorateInput>
    connectOrCreate?: GovernorateStatisticCreateOrConnectWithoutGovernorateInput
    connect?: GovernorateStatisticWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutGovernorateNestedInput = {
    create?: XOR<UserCreateWithoutGovernorateInput, UserUncheckedCreateWithoutGovernorateInput> | UserCreateWithoutGovernorateInput[] | UserUncheckedCreateWithoutGovernorateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGovernorateInput | UserCreateOrConnectWithoutGovernorateInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGovernorateInput | UserUpsertWithWhereUniqueWithoutGovernorateInput[]
    createMany?: UserCreateManyGovernorateInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGovernorateInput | UserUpdateWithWhereUniqueWithoutGovernorateInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGovernorateInput | UserUpdateManyWithWhereWithoutGovernorateInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type EventUpdateManyWithoutGovernorateNestedInput = {
    create?: XOR<EventCreateWithoutGovernorateInput, EventUncheckedCreateWithoutGovernorateInput> | EventCreateWithoutGovernorateInput[] | EventUncheckedCreateWithoutGovernorateInput[]
    connectOrCreate?: EventCreateOrConnectWithoutGovernorateInput | EventCreateOrConnectWithoutGovernorateInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutGovernorateInput | EventUpsertWithWhereUniqueWithoutGovernorateInput[]
    createMany?: EventCreateManyGovernorateInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutGovernorateInput | EventUpdateWithWhereUniqueWithoutGovernorateInput[]
    updateMany?: EventUpdateManyWithWhereWithoutGovernorateInput | EventUpdateManyWithWhereWithoutGovernorateInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type GovernorateStatisticUpdateOneWithoutGovernorateNestedInput = {
    create?: XOR<GovernorateStatisticCreateWithoutGovernorateInput, GovernorateStatisticUncheckedCreateWithoutGovernorateInput>
    connectOrCreate?: GovernorateStatisticCreateOrConnectWithoutGovernorateInput
    upsert?: GovernorateStatisticUpsertWithoutGovernorateInput
    disconnect?: GovernorateStatisticWhereInput | boolean
    delete?: GovernorateStatisticWhereInput | boolean
    connect?: GovernorateStatisticWhereUniqueInput
    update?: XOR<XOR<GovernorateStatisticUpdateToOneWithWhereWithoutGovernorateInput, GovernorateStatisticUpdateWithoutGovernorateInput>, GovernorateStatisticUncheckedUpdateWithoutGovernorateInput>
  }

  export type UserUncheckedUpdateManyWithoutGovernorateNestedInput = {
    create?: XOR<UserCreateWithoutGovernorateInput, UserUncheckedCreateWithoutGovernorateInput> | UserCreateWithoutGovernorateInput[] | UserUncheckedCreateWithoutGovernorateInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGovernorateInput | UserCreateOrConnectWithoutGovernorateInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGovernorateInput | UserUpsertWithWhereUniqueWithoutGovernorateInput[]
    createMany?: UserCreateManyGovernorateInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGovernorateInput | UserUpdateWithWhereUniqueWithoutGovernorateInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGovernorateInput | UserUpdateManyWithWhereWithoutGovernorateInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutGovernorateNestedInput = {
    create?: XOR<EventCreateWithoutGovernorateInput, EventUncheckedCreateWithoutGovernorateInput> | EventCreateWithoutGovernorateInput[] | EventUncheckedCreateWithoutGovernorateInput[]
    connectOrCreate?: EventCreateOrConnectWithoutGovernorateInput | EventCreateOrConnectWithoutGovernorateInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutGovernorateInput | EventUpsertWithWhereUniqueWithoutGovernorateInput[]
    createMany?: EventCreateManyGovernorateInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutGovernorateInput | EventUpdateWithWhereUniqueWithoutGovernorateInput[]
    updateMany?: EventUpdateManyWithWhereWithoutGovernorateInput | EventUpdateManyWithWhereWithoutGovernorateInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type GovernorateStatisticUncheckedUpdateOneWithoutGovernorateNestedInput = {
    create?: XOR<GovernorateStatisticCreateWithoutGovernorateInput, GovernorateStatisticUncheckedCreateWithoutGovernorateInput>
    connectOrCreate?: GovernorateStatisticCreateOrConnectWithoutGovernorateInput
    upsert?: GovernorateStatisticUpsertWithoutGovernorateInput
    disconnect?: GovernorateStatisticWhereInput | boolean
    delete?: GovernorateStatisticWhereInput | boolean
    connect?: GovernorateStatisticWhereUniqueInput
    update?: XOR<XOR<GovernorateStatisticUpdateToOneWithWhereWithoutGovernorateInput, GovernorateStatisticUpdateWithoutGovernorateInput>, GovernorateStatisticUncheckedUpdateWithoutGovernorateInput>
  }

  export type GovernorateCreateNestedOneWithoutUsersInput = {
    create?: XOR<GovernorateCreateWithoutUsersInput, GovernorateUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GovernorateCreateOrConnectWithoutUsersInput
    connect?: GovernorateWhereUniqueInput
  }

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type DebateParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<DebateParticipantCreateWithoutUserInput, DebateParticipantUncheckedCreateWithoutUserInput> | DebateParticipantCreateWithoutUserInput[] | DebateParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DebateParticipantCreateOrConnectWithoutUserInput | DebateParticipantCreateOrConnectWithoutUserInput[]
    createMany?: DebateParticipantCreateManyUserInputEnvelope
    connect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
  }

  export type CandidateCreateNestedOneWithoutUserInput = {
    create?: XOR<CandidateCreateWithoutUserInput, CandidateUncheckedCreateWithoutUserInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutUserInput
    connect?: CandidateWhereUniqueInput
  }

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type DebateParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DebateParticipantCreateWithoutUserInput, DebateParticipantUncheckedCreateWithoutUserInput> | DebateParticipantCreateWithoutUserInput[] | DebateParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DebateParticipantCreateOrConnectWithoutUserInput | DebateParticipantCreateOrConnectWithoutUserInput[]
    createMany?: DebateParticipantCreateManyUserInputEnvelope
    connect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
  }

  export type CandidateUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CandidateCreateWithoutUserInput, CandidateUncheckedCreateWithoutUserInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutUserInput
    connect?: CandidateWhereUniqueInput
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type GovernorateUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<GovernorateCreateWithoutUsersInput, GovernorateUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GovernorateCreateOrConnectWithoutUsersInput
    upsert?: GovernorateUpsertWithoutUsersInput
    connect?: GovernorateWhereUniqueInput
    update?: XOR<XOR<GovernorateUpdateToOneWithWhereWithoutUsersInput, GovernorateUpdateWithoutUsersInput>, GovernorateUncheckedUpdateWithoutUsersInput>
  }

  export type PostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type EventUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganizerInput | EventUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganizerInput | EventUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganizerInput | EventUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type DebateParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<DebateParticipantCreateWithoutUserInput, DebateParticipantUncheckedCreateWithoutUserInput> | DebateParticipantCreateWithoutUserInput[] | DebateParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DebateParticipantCreateOrConnectWithoutUserInput | DebateParticipantCreateOrConnectWithoutUserInput[]
    upsert?: DebateParticipantUpsertWithWhereUniqueWithoutUserInput | DebateParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DebateParticipantCreateManyUserInputEnvelope
    set?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    disconnect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    delete?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    connect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    update?: DebateParticipantUpdateWithWhereUniqueWithoutUserInput | DebateParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DebateParticipantUpdateManyWithWhereWithoutUserInput | DebateParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DebateParticipantScalarWhereInput | DebateParticipantScalarWhereInput[]
  }

  export type CandidateUpdateOneWithoutUserNestedInput = {
    create?: XOR<CandidateCreateWithoutUserInput, CandidateUncheckedCreateWithoutUserInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutUserInput
    upsert?: CandidateUpsertWithoutUserInput
    disconnect?: CandidateWhereInput | boolean
    delete?: CandidateWhereInput | boolean
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutUserInput, CandidateUpdateWithoutUserInput>, CandidateUncheckedUpdateWithoutUserInput>
  }

  export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput> | PostCreateWithoutAuthorInput[] | PostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: PostCreateOrConnectWithoutAuthorInput | PostCreateOrConnectWithoutAuthorInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: PostCreateManyAuthorInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutAuthorInput | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: PostUpdateManyWithWhereWithoutAuthorInput | PostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganizerInput | EventUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganizerInput | EventUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganizerInput | EventUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type DebateParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DebateParticipantCreateWithoutUserInput, DebateParticipantUncheckedCreateWithoutUserInput> | DebateParticipantCreateWithoutUserInput[] | DebateParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DebateParticipantCreateOrConnectWithoutUserInput | DebateParticipantCreateOrConnectWithoutUserInput[]
    upsert?: DebateParticipantUpsertWithWhereUniqueWithoutUserInput | DebateParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DebateParticipantCreateManyUserInputEnvelope
    set?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    disconnect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    delete?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    connect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    update?: DebateParticipantUpdateWithWhereUniqueWithoutUserInput | DebateParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DebateParticipantUpdateManyWithWhereWithoutUserInput | DebateParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DebateParticipantScalarWhereInput | DebateParticipantScalarWhereInput[]
  }

  export type CandidateUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CandidateCreateWithoutUserInput, CandidateUncheckedCreateWithoutUserInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutUserInput
    upsert?: CandidateUpsertWithoutUserInput
    disconnect?: CandidateWhereInput | boolean
    delete?: CandidateWhereInput | boolean
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutUserInput, CandidateUpdateWithoutUserInput>, CandidateUncheckedUpdateWithoutUserInput>
  }

  export type PostCreategovernoratesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPostTypeFieldUpdateOperationsInput = {
    set?: $Enums.PostType
  }

  export type PostUpdategovernoratesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostsInput, UserUpdateWithoutPostsInput>, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserCreateNestedOneWithoutOrganizedInput = {
    create?: XOR<UserCreateWithoutOrganizedInput, UserUncheckedCreateWithoutOrganizedInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizedInput
    connect?: UserWhereUniqueInput
  }

  export type GovernorateCreateNestedOneWithoutEventsInput = {
    create?: XOR<GovernorateCreateWithoutEventsInput, GovernorateUncheckedCreateWithoutEventsInput>
    connectOrCreate?: GovernorateCreateOrConnectWithoutEventsInput
    connect?: GovernorateWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOrganizedNestedInput = {
    create?: XOR<UserCreateWithoutOrganizedInput, UserUncheckedCreateWithoutOrganizedInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizedInput
    upsert?: UserUpsertWithoutOrganizedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrganizedInput, UserUpdateWithoutOrganizedInput>, UserUncheckedUpdateWithoutOrganizedInput>
  }

  export type GovernorateUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<GovernorateCreateWithoutEventsInput, GovernorateUncheckedCreateWithoutEventsInput>
    connectOrCreate?: GovernorateCreateOrConnectWithoutEventsInput
    upsert?: GovernorateUpsertWithoutEventsInput
    connect?: GovernorateWhereUniqueInput
    update?: XOR<XOR<GovernorateUpdateToOneWithWhereWithoutEventsInput, GovernorateUpdateWithoutEventsInput>, GovernorateUncheckedUpdateWithoutEventsInput>
  }

  export type ArticleCreategovernoratesInput = {
    set: string[]
  }

  export type ArticleUpdategovernoratesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DebateParticipantCreateNestedManyWithoutDebateInput = {
    create?: XOR<DebateParticipantCreateWithoutDebateInput, DebateParticipantUncheckedCreateWithoutDebateInput> | DebateParticipantCreateWithoutDebateInput[] | DebateParticipantUncheckedCreateWithoutDebateInput[]
    connectOrCreate?: DebateParticipantCreateOrConnectWithoutDebateInput | DebateParticipantCreateOrConnectWithoutDebateInput[]
    createMany?: DebateParticipantCreateManyDebateInputEnvelope
    connect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
  }

  export type DebateParticipantUncheckedCreateNestedManyWithoutDebateInput = {
    create?: XOR<DebateParticipantCreateWithoutDebateInput, DebateParticipantUncheckedCreateWithoutDebateInput> | DebateParticipantCreateWithoutDebateInput[] | DebateParticipantUncheckedCreateWithoutDebateInput[]
    connectOrCreate?: DebateParticipantCreateOrConnectWithoutDebateInput | DebateParticipantCreateOrConnectWithoutDebateInput[]
    createMany?: DebateParticipantCreateManyDebateInputEnvelope
    connect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
  }

  export type DebateParticipantUpdateManyWithoutDebateNestedInput = {
    create?: XOR<DebateParticipantCreateWithoutDebateInput, DebateParticipantUncheckedCreateWithoutDebateInput> | DebateParticipantCreateWithoutDebateInput[] | DebateParticipantUncheckedCreateWithoutDebateInput[]
    connectOrCreate?: DebateParticipantCreateOrConnectWithoutDebateInput | DebateParticipantCreateOrConnectWithoutDebateInput[]
    upsert?: DebateParticipantUpsertWithWhereUniqueWithoutDebateInput | DebateParticipantUpsertWithWhereUniqueWithoutDebateInput[]
    createMany?: DebateParticipantCreateManyDebateInputEnvelope
    set?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    disconnect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    delete?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    connect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    update?: DebateParticipantUpdateWithWhereUniqueWithoutDebateInput | DebateParticipantUpdateWithWhereUniqueWithoutDebateInput[]
    updateMany?: DebateParticipantUpdateManyWithWhereWithoutDebateInput | DebateParticipantUpdateManyWithWhereWithoutDebateInput[]
    deleteMany?: DebateParticipantScalarWhereInput | DebateParticipantScalarWhereInput[]
  }

  export type DebateParticipantUncheckedUpdateManyWithoutDebateNestedInput = {
    create?: XOR<DebateParticipantCreateWithoutDebateInput, DebateParticipantUncheckedCreateWithoutDebateInput> | DebateParticipantCreateWithoutDebateInput[] | DebateParticipantUncheckedCreateWithoutDebateInput[]
    connectOrCreate?: DebateParticipantCreateOrConnectWithoutDebateInput | DebateParticipantCreateOrConnectWithoutDebateInput[]
    upsert?: DebateParticipantUpsertWithWhereUniqueWithoutDebateInput | DebateParticipantUpsertWithWhereUniqueWithoutDebateInput[]
    createMany?: DebateParticipantCreateManyDebateInputEnvelope
    set?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    disconnect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    delete?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    connect?: DebateParticipantWhereUniqueInput | DebateParticipantWhereUniqueInput[]
    update?: DebateParticipantUpdateWithWhereUniqueWithoutDebateInput | DebateParticipantUpdateWithWhereUniqueWithoutDebateInput[]
    updateMany?: DebateParticipantUpdateManyWithWhereWithoutDebateInput | DebateParticipantUpdateManyWithWhereWithoutDebateInput[]
    deleteMany?: DebateParticipantScalarWhereInput | DebateParticipantScalarWhereInput[]
  }

  export type DebateCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<DebateCreateWithoutParticipantsInput, DebateUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: DebateCreateOrConnectWithoutParticipantsInput
    connect?: DebateWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDebatesInput = {
    create?: XOR<UserCreateWithoutDebatesInput, UserUncheckedCreateWithoutDebatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDebatesInput
    connect?: UserWhereUniqueInput
  }

  export type DebateUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<DebateCreateWithoutParticipantsInput, DebateUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: DebateCreateOrConnectWithoutParticipantsInput
    upsert?: DebateUpsertWithoutParticipantsInput
    connect?: DebateWhereUniqueInput
    update?: XOR<XOR<DebateUpdateToOneWithWhereWithoutParticipantsInput, DebateUpdateWithoutParticipantsInput>, DebateUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutDebatesNestedInput = {
    create?: XOR<UserCreateWithoutDebatesInput, UserUncheckedCreateWithoutDebatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDebatesInput
    upsert?: UserUpsertWithoutDebatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDebatesInput, UserUpdateWithoutDebatesInput>, UserUncheckedUpdateWithoutDebatesInput>
  }

  export type CandidateCreateNestedManyWithoutPartyInput = {
    create?: XOR<CandidateCreateWithoutPartyInput, CandidateUncheckedCreateWithoutPartyInput> | CandidateCreateWithoutPartyInput[] | CandidateUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutPartyInput | CandidateCreateOrConnectWithoutPartyInput[]
    createMany?: CandidateCreateManyPartyInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type CandidateUncheckedCreateNestedManyWithoutPartyInput = {
    create?: XOR<CandidateCreateWithoutPartyInput, CandidateUncheckedCreateWithoutPartyInput> | CandidateCreateWithoutPartyInput[] | CandidateUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutPartyInput | CandidateCreateOrConnectWithoutPartyInput[]
    createMany?: CandidateCreateManyPartyInputEnvelope
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
  }

  export type CandidateUpdateManyWithoutPartyNestedInput = {
    create?: XOR<CandidateCreateWithoutPartyInput, CandidateUncheckedCreateWithoutPartyInput> | CandidateCreateWithoutPartyInput[] | CandidateUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutPartyInput | CandidateCreateOrConnectWithoutPartyInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutPartyInput | CandidateUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: CandidateCreateManyPartyInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutPartyInput | CandidateUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutPartyInput | CandidateUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type CandidateUncheckedUpdateManyWithoutPartyNestedInput = {
    create?: XOR<CandidateCreateWithoutPartyInput, CandidateUncheckedCreateWithoutPartyInput> | CandidateCreateWithoutPartyInput[] | CandidateUncheckedCreateWithoutPartyInput[]
    connectOrCreate?: CandidateCreateOrConnectWithoutPartyInput | CandidateCreateOrConnectWithoutPartyInput[]
    upsert?: CandidateUpsertWithWhereUniqueWithoutPartyInput | CandidateUpsertWithWhereUniqueWithoutPartyInput[]
    createMany?: CandidateCreateManyPartyInputEnvelope
    set?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    disconnect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    delete?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    connect?: CandidateWhereUniqueInput | CandidateWhereUniqueInput[]
    update?: CandidateUpdateWithWhereUniqueWithoutPartyInput | CandidateUpdateWithWhereUniqueWithoutPartyInput[]
    updateMany?: CandidateUpdateManyWithWhereWithoutPartyInput | CandidateUpdateManyWithWhereWithoutPartyInput[]
    deleteMany?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCandidateInput = {
    create?: XOR<UserCreateWithoutCandidateInput, UserUncheckedCreateWithoutCandidateInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidateInput
    connect?: UserWhereUniqueInput
  }

  export type PartyCreateNestedOneWithoutCandidatesInput = {
    create?: XOR<PartyCreateWithoutCandidatesInput, PartyUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: PartyCreateOrConnectWithoutCandidatesInput
    connect?: PartyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCandidateNestedInput = {
    create?: XOR<UserCreateWithoutCandidateInput, UserUncheckedCreateWithoutCandidateInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidateInput
    upsert?: UserUpsertWithoutCandidateInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCandidateInput, UserUpdateWithoutCandidateInput>, UserUncheckedUpdateWithoutCandidateInput>
  }

  export type PartyUpdateOneRequiredWithoutCandidatesNestedInput = {
    create?: XOR<PartyCreateWithoutCandidatesInput, PartyUncheckedCreateWithoutCandidatesInput>
    connectOrCreate?: PartyCreateOrConnectWithoutCandidatesInput
    upsert?: PartyUpsertWithoutCandidatesInput
    connect?: PartyWhereUniqueInput
    update?: XOR<XOR<PartyUpdateToOneWithWhereWithoutCandidatesInput, PartyUpdateWithoutCandidatesInput>, PartyUncheckedUpdateWithoutCandidatesInput>
  }

  export type GovernorateCreateNestedOneWithoutStatsInput = {
    create?: XOR<GovernorateCreateWithoutStatsInput, GovernorateUncheckedCreateWithoutStatsInput>
    connectOrCreate?: GovernorateCreateOrConnectWithoutStatsInput
    connect?: GovernorateWhereUniqueInput
  }

  export type GovernorateUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<GovernorateCreateWithoutStatsInput, GovernorateUncheckedCreateWithoutStatsInput>
    connectOrCreate?: GovernorateCreateOrConnectWithoutStatsInput
    upsert?: GovernorateUpsertWithoutStatsInput
    connect?: GovernorateWhereUniqueInput
    update?: XOR<XOR<GovernorateUpdateToOneWithWhereWithoutStatsInput, GovernorateUpdateWithoutStatsInput>, GovernorateUncheckedUpdateWithoutStatsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumPostTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PostType | EnumPostTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPostTypeFilter<$PrismaModel> | $Enums.PostType
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPostTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostType | EnumPostTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostType[] | ListEnumPostTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPostTypeWithAggregatesFilter<$PrismaModel> | $Enums.PostType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostTypeFilter<$PrismaModel>
    _max?: NestedEnumPostTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutGovernorateInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutAuthorInput
    organized?: EventCreateNestedManyWithoutOrganizerInput
    debates?: DebateParticipantCreateNestedManyWithoutUserInput
    candidate?: CandidateCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGovernorateInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    organized?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    debates?: DebateParticipantUncheckedCreateNestedManyWithoutUserInput
    candidate?: CandidateUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGovernorateInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGovernorateInput, UserUncheckedCreateWithoutGovernorateInput>
  }

  export type UserCreateManyGovernorateInputEnvelope = {
    data: UserCreateManyGovernorateInput | UserCreateManyGovernorateInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutGovernorateInput = {
    id: string
    title: string
    date: Date | string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organizer: UserCreateNestedOneWithoutOrganizedInput
  }

  export type EventUncheckedCreateWithoutGovernorateInput = {
    id: string
    title: string
    date: Date | string
    location: string
    organizerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateOrConnectWithoutGovernorateInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutGovernorateInput, EventUncheckedCreateWithoutGovernorateInput>
  }

  export type EventCreateManyGovernorateInputEnvelope = {
    data: EventCreateManyGovernorateInput | EventCreateManyGovernorateInput[]
    skipDuplicates?: boolean
  }

  export type GovernorateStatisticCreateWithoutGovernorateInput = {
    registeredVoters: number
    pollingStations: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GovernorateStatisticUncheckedCreateWithoutGovernorateInput = {
    registeredVoters: number
    pollingStations: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GovernorateStatisticCreateOrConnectWithoutGovernorateInput = {
    where: GovernorateStatisticWhereUniqueInput
    create: XOR<GovernorateStatisticCreateWithoutGovernorateInput, GovernorateStatisticUncheckedCreateWithoutGovernorateInput>
  }

  export type UserUpsertWithWhereUniqueWithoutGovernorateInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutGovernorateInput, UserUncheckedUpdateWithoutGovernorateInput>
    create: XOR<UserCreateWithoutGovernorateInput, UserUncheckedCreateWithoutGovernorateInput>
  }

  export type UserUpdateWithWhereUniqueWithoutGovernorateInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutGovernorateInput, UserUncheckedUpdateWithoutGovernorateInput>
  }

  export type UserUpdateManyWithWhereWithoutGovernorateInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutGovernorateInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    avatarUrl?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    verified?: BoolFilter<"User"> | boolean
    party?: StringFilter<"User"> | string
    governorateId?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutGovernorateInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutGovernorateInput, EventUncheckedUpdateWithoutGovernorateInput>
    create: XOR<EventCreateWithoutGovernorateInput, EventUncheckedCreateWithoutGovernorateInput>
  }

  export type EventUpdateWithWhereUniqueWithoutGovernorateInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutGovernorateInput, EventUncheckedUpdateWithoutGovernorateInput>
  }

  export type EventUpdateManyWithWhereWithoutGovernorateInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutGovernorateInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    location?: StringFilter<"Event"> | string
    organizerId?: StringFilter<"Event"> | string
    governorateId?: StringFilter<"Event"> | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
  }

  export type GovernorateStatisticUpsertWithoutGovernorateInput = {
    update: XOR<GovernorateStatisticUpdateWithoutGovernorateInput, GovernorateStatisticUncheckedUpdateWithoutGovernorateInput>
    create: XOR<GovernorateStatisticCreateWithoutGovernorateInput, GovernorateStatisticUncheckedCreateWithoutGovernorateInput>
    where?: GovernorateStatisticWhereInput
  }

  export type GovernorateStatisticUpdateToOneWithWhereWithoutGovernorateInput = {
    where?: GovernorateStatisticWhereInput
    data: XOR<GovernorateStatisticUpdateWithoutGovernorateInput, GovernorateStatisticUncheckedUpdateWithoutGovernorateInput>
  }

  export type GovernorateStatisticUpdateWithoutGovernorateInput = {
    registeredVoters?: IntFieldUpdateOperationsInput | number
    pollingStations?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GovernorateStatisticUncheckedUpdateWithoutGovernorateInput = {
    registeredVoters?: IntFieldUpdateOperationsInput | number
    pollingStations?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GovernorateCreateWithoutUsersInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutGovernorateInput
    stats?: GovernorateStatisticCreateNestedOneWithoutGovernorateInput
  }

  export type GovernorateUncheckedCreateWithoutUsersInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutGovernorateInput
    stats?: GovernorateStatisticUncheckedCreateNestedOneWithoutGovernorateInput
  }

  export type GovernorateCreateOrConnectWithoutUsersInput = {
    where: GovernorateWhereUniqueInput
    create: XOR<GovernorateCreateWithoutUsersInput, GovernorateUncheckedCreateWithoutUsersInput>
  }

  export type PostCreateWithoutAuthorInput = {
    id: string
    timestamp?: Date | string
    content: string
    mediaUrl?: string | null
    likes?: number
    comments?: number
    shares?: number
    isSponsored?: boolean
    type: $Enums.PostType
    governorates?: PostCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id: string
    timestamp?: Date | string
    content: string
    mediaUrl?: string | null
    likes?: number
    comments?: number
    shares?: number
    isSponsored?: boolean
    type: $Enums.PostType
    governorates?: PostCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostCreateManyAuthorInputEnvelope = {
    data: PostCreateManyAuthorInput | PostCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutOrganizerInput = {
    id: string
    title: string
    date: Date | string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    governorate: GovernorateCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateWithoutOrganizerInput = {
    id: string
    title: string
    date: Date | string
    location: string
    governorateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateOrConnectWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput>
  }

  export type EventCreateManyOrganizerInputEnvelope = {
    data: EventCreateManyOrganizerInput | EventCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type DebateParticipantCreateWithoutUserInput = {
    debate: DebateCreateNestedOneWithoutParticipantsInput
  }

  export type DebateParticipantUncheckedCreateWithoutUserInput = {
    debateId: string
  }

  export type DebateParticipantCreateOrConnectWithoutUserInput = {
    where: DebateParticipantWhereUniqueInput
    create: XOR<DebateParticipantCreateWithoutUserInput, DebateParticipantUncheckedCreateWithoutUserInput>
  }

  export type DebateParticipantCreateManyUserInputEnvelope = {
    data: DebateParticipantCreateManyUserInput | DebateParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CandidateCreateWithoutUserInput = {
    id: string
    platformSummary?: string | null
    votes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    party: PartyCreateNestedOneWithoutCandidatesInput
  }

  export type CandidateUncheckedCreateWithoutUserInput = {
    id: string
    partyId: string
    platformSummary?: string | null
    votes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidateCreateOrConnectWithoutUserInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutUserInput, CandidateUncheckedCreateWithoutUserInput>
  }

  export type GovernorateUpsertWithoutUsersInput = {
    update: XOR<GovernorateUpdateWithoutUsersInput, GovernorateUncheckedUpdateWithoutUsersInput>
    create: XOR<GovernorateCreateWithoutUsersInput, GovernorateUncheckedCreateWithoutUsersInput>
    where?: GovernorateWhereInput
  }

  export type GovernorateUpdateToOneWithWhereWithoutUsersInput = {
    where?: GovernorateWhereInput
    data: XOR<GovernorateUpdateWithoutUsersInput, GovernorateUncheckedUpdateWithoutUsersInput>
  }

  export type GovernorateUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutGovernorateNestedInput
    stats?: GovernorateStatisticUpdateOneWithoutGovernorateNestedInput
  }

  export type GovernorateUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutGovernorateNestedInput
    stats?: GovernorateStatisticUncheckedUpdateOneWithoutGovernorateNestedInput
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    authorId?: StringFilter<"Post"> | string
    timestamp?: DateTimeFilter<"Post"> | Date | string
    content?: StringFilter<"Post"> | string
    mediaUrl?: StringNullableFilter<"Post"> | string | null
    likes?: IntFilter<"Post"> | number
    comments?: IntFilter<"Post"> | number
    shares?: IntFilter<"Post"> | number
    isSponsored?: BoolFilter<"Post"> | boolean
    type?: EnumPostTypeFilter<"Post"> | $Enums.PostType
    governorates?: StringNullableListFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutOrganizerInput, EventUncheckedUpdateWithoutOrganizerInput>
    create: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput>
  }

  export type EventUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutOrganizerInput, EventUncheckedUpdateWithoutOrganizerInput>
  }

  export type EventUpdateManyWithWhereWithoutOrganizerInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type DebateParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: DebateParticipantWhereUniqueInput
    update: XOR<DebateParticipantUpdateWithoutUserInput, DebateParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<DebateParticipantCreateWithoutUserInput, DebateParticipantUncheckedCreateWithoutUserInput>
  }

  export type DebateParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: DebateParticipantWhereUniqueInput
    data: XOR<DebateParticipantUpdateWithoutUserInput, DebateParticipantUncheckedUpdateWithoutUserInput>
  }

  export type DebateParticipantUpdateManyWithWhereWithoutUserInput = {
    where: DebateParticipantScalarWhereInput
    data: XOR<DebateParticipantUpdateManyMutationInput, DebateParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type DebateParticipantScalarWhereInput = {
    AND?: DebateParticipantScalarWhereInput | DebateParticipantScalarWhereInput[]
    OR?: DebateParticipantScalarWhereInput[]
    NOT?: DebateParticipantScalarWhereInput | DebateParticipantScalarWhereInput[]
    debateId?: StringFilter<"DebateParticipant"> | string
    userId?: StringFilter<"DebateParticipant"> | string
  }

  export type CandidateUpsertWithoutUserInput = {
    update: XOR<CandidateUpdateWithoutUserInput, CandidateUncheckedUpdateWithoutUserInput>
    create: XOR<CandidateCreateWithoutUserInput, CandidateUncheckedCreateWithoutUserInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutUserInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutUserInput, CandidateUncheckedUpdateWithoutUserInput>
  }

  export type CandidateUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    party?: PartyUpdateOneRequiredWithoutCandidatesNestedInput
  }

  export type CandidateUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyId?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPostsInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    governorate: GovernorateCreateNestedOneWithoutUsersInput
    organized?: EventCreateNestedManyWithoutOrganizerInput
    debates?: DebateParticipantCreateNestedManyWithoutUserInput
    candidate?: CandidateCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    governorateId: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organized?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    debates?: DebateParticipantUncheckedCreateNestedManyWithoutUserInput
    candidate?: CandidateUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    governorate?: GovernorateUpdateOneRequiredWithoutUsersNestedInput
    organized?: EventUpdateManyWithoutOrganizerNestedInput
    debates?: DebateParticipantUpdateManyWithoutUserNestedInput
    candidate?: CandidateUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organized?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    debates?: DebateParticipantUncheckedUpdateManyWithoutUserNestedInput
    candidate?: CandidateUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutOrganizedInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    governorate: GovernorateCreateNestedOneWithoutUsersInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    debates?: DebateParticipantCreateNestedManyWithoutUserInput
    candidate?: CandidateCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizedInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    governorateId: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    debates?: DebateParticipantUncheckedCreateNestedManyWithoutUserInput
    candidate?: CandidateUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizedInput, UserUncheckedCreateWithoutOrganizedInput>
  }

  export type GovernorateCreateWithoutEventsInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutGovernorateInput
    stats?: GovernorateStatisticCreateNestedOneWithoutGovernorateInput
  }

  export type GovernorateUncheckedCreateWithoutEventsInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutGovernorateInput
    stats?: GovernorateStatisticUncheckedCreateNestedOneWithoutGovernorateInput
  }

  export type GovernorateCreateOrConnectWithoutEventsInput = {
    where: GovernorateWhereUniqueInput
    create: XOR<GovernorateCreateWithoutEventsInput, GovernorateUncheckedCreateWithoutEventsInput>
  }

  export type UserUpsertWithoutOrganizedInput = {
    update: XOR<UserUpdateWithoutOrganizedInput, UserUncheckedUpdateWithoutOrganizedInput>
    create: XOR<UserCreateWithoutOrganizedInput, UserUncheckedCreateWithoutOrganizedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrganizedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrganizedInput, UserUncheckedUpdateWithoutOrganizedInput>
  }

  export type UserUpdateWithoutOrganizedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    governorate?: GovernorateUpdateOneRequiredWithoutUsersNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    debates?: DebateParticipantUpdateManyWithoutUserNestedInput
    candidate?: CandidateUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    debates?: DebateParticipantUncheckedUpdateManyWithoutUserNestedInput
    candidate?: CandidateUncheckedUpdateOneWithoutUserNestedInput
  }

  export type GovernorateUpsertWithoutEventsInput = {
    update: XOR<GovernorateUpdateWithoutEventsInput, GovernorateUncheckedUpdateWithoutEventsInput>
    create: XOR<GovernorateCreateWithoutEventsInput, GovernorateUncheckedCreateWithoutEventsInput>
    where?: GovernorateWhereInput
  }

  export type GovernorateUpdateToOneWithWhereWithoutEventsInput = {
    where?: GovernorateWhereInput
    data: XOR<GovernorateUpdateWithoutEventsInput, GovernorateUncheckedUpdateWithoutEventsInput>
  }

  export type GovernorateUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutGovernorateNestedInput
    stats?: GovernorateStatisticUpdateOneWithoutGovernorateNestedInput
  }

  export type GovernorateUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutGovernorateNestedInput
    stats?: GovernorateStatisticUncheckedUpdateOneWithoutGovernorateNestedInput
  }

  export type DebateParticipantCreateWithoutDebateInput = {
    user: UserCreateNestedOneWithoutDebatesInput
  }

  export type DebateParticipantUncheckedCreateWithoutDebateInput = {
    userId: string
  }

  export type DebateParticipantCreateOrConnectWithoutDebateInput = {
    where: DebateParticipantWhereUniqueInput
    create: XOR<DebateParticipantCreateWithoutDebateInput, DebateParticipantUncheckedCreateWithoutDebateInput>
  }

  export type DebateParticipantCreateManyDebateInputEnvelope = {
    data: DebateParticipantCreateManyDebateInput | DebateParticipantCreateManyDebateInput[]
    skipDuplicates?: boolean
  }

  export type DebateParticipantUpsertWithWhereUniqueWithoutDebateInput = {
    where: DebateParticipantWhereUniqueInput
    update: XOR<DebateParticipantUpdateWithoutDebateInput, DebateParticipantUncheckedUpdateWithoutDebateInput>
    create: XOR<DebateParticipantCreateWithoutDebateInput, DebateParticipantUncheckedCreateWithoutDebateInput>
  }

  export type DebateParticipantUpdateWithWhereUniqueWithoutDebateInput = {
    where: DebateParticipantWhereUniqueInput
    data: XOR<DebateParticipantUpdateWithoutDebateInput, DebateParticipantUncheckedUpdateWithoutDebateInput>
  }

  export type DebateParticipantUpdateManyWithWhereWithoutDebateInput = {
    where: DebateParticipantScalarWhereInput
    data: XOR<DebateParticipantUpdateManyMutationInput, DebateParticipantUncheckedUpdateManyWithoutDebateInput>
  }

  export type DebateCreateWithoutParticipantsInput = {
    id: string
    title: string
    topic: string
    scheduledTime: Date | string
    isLive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DebateUncheckedCreateWithoutParticipantsInput = {
    id: string
    title: string
    topic: string
    scheduledTime: Date | string
    isLive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DebateCreateOrConnectWithoutParticipantsInput = {
    where: DebateWhereUniqueInput
    create: XOR<DebateCreateWithoutParticipantsInput, DebateUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutDebatesInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    governorate: GovernorateCreateNestedOneWithoutUsersInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    organized?: EventCreateNestedManyWithoutOrganizerInput
    candidate?: CandidateCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDebatesInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    governorateId: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    organized?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    candidate?: CandidateUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDebatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDebatesInput, UserUncheckedCreateWithoutDebatesInput>
  }

  export type DebateUpsertWithoutParticipantsInput = {
    update: XOR<DebateUpdateWithoutParticipantsInput, DebateUncheckedUpdateWithoutParticipantsInput>
    create: XOR<DebateCreateWithoutParticipantsInput, DebateUncheckedCreateWithoutParticipantsInput>
    where?: DebateWhereInput
  }

  export type DebateUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: DebateWhereInput
    data: XOR<DebateUpdateWithoutParticipantsInput, DebateUncheckedUpdateWithoutParticipantsInput>
  }

  export type DebateUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    scheduledTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isLive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DebateUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    scheduledTime?: DateTimeFieldUpdateOperationsInput | Date | string
    isLive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutDebatesInput = {
    update: XOR<UserUpdateWithoutDebatesInput, UserUncheckedUpdateWithoutDebatesInput>
    create: XOR<UserCreateWithoutDebatesInput, UserUncheckedCreateWithoutDebatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDebatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDebatesInput, UserUncheckedUpdateWithoutDebatesInput>
  }

  export type UserUpdateWithoutDebatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    governorate?: GovernorateUpdateOneRequiredWithoutUsersNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    organized?: EventUpdateManyWithoutOrganizerNestedInput
    candidate?: CandidateUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDebatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    organized?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    candidate?: CandidateUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CandidateCreateWithoutPartyInput = {
    id: string
    platformSummary?: string | null
    votes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutPartyInput = {
    id: string
    userId: string
    platformSummary?: string | null
    votes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidateCreateOrConnectWithoutPartyInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutPartyInput, CandidateUncheckedCreateWithoutPartyInput>
  }

  export type CandidateCreateManyPartyInputEnvelope = {
    data: CandidateCreateManyPartyInput | CandidateCreateManyPartyInput[]
    skipDuplicates?: boolean
  }

  export type CandidateUpsertWithWhereUniqueWithoutPartyInput = {
    where: CandidateWhereUniqueInput
    update: XOR<CandidateUpdateWithoutPartyInput, CandidateUncheckedUpdateWithoutPartyInput>
    create: XOR<CandidateCreateWithoutPartyInput, CandidateUncheckedCreateWithoutPartyInput>
  }

  export type CandidateUpdateWithWhereUniqueWithoutPartyInput = {
    where: CandidateWhereUniqueInput
    data: XOR<CandidateUpdateWithoutPartyInput, CandidateUncheckedUpdateWithoutPartyInput>
  }

  export type CandidateUpdateManyWithWhereWithoutPartyInput = {
    where: CandidateScalarWhereInput
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyWithoutPartyInput>
  }

  export type CandidateScalarWhereInput = {
    AND?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
    OR?: CandidateScalarWhereInput[]
    NOT?: CandidateScalarWhereInput | CandidateScalarWhereInput[]
    id?: StringFilter<"Candidate"> | string
    userId?: StringFilter<"Candidate"> | string
    partyId?: StringFilter<"Candidate"> | string
    platformSummary?: StringNullableFilter<"Candidate"> | string | null
    votes?: IntFilter<"Candidate"> | number
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
  }

  export type UserCreateWithoutCandidateInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    governorate: GovernorateCreateNestedOneWithoutUsersInput
    posts?: PostCreateNestedManyWithoutAuthorInput
    organized?: EventCreateNestedManyWithoutOrganizerInput
    debates?: DebateParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCandidateInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    governorateId: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput
    organized?: EventUncheckedCreateNestedManyWithoutOrganizerInput
    debates?: DebateParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCandidateInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCandidateInput, UserUncheckedCreateWithoutCandidateInput>
  }

  export type PartyCreateWithoutCandidatesInput = {
    id: string
    name: string
    logoUrl: string
    leader: string
    founded: number
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartyUncheckedCreateWithoutCandidatesInput = {
    id: string
    name: string
    logoUrl: string
    leader: string
    founded: number
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PartyCreateOrConnectWithoutCandidatesInput = {
    where: PartyWhereUniqueInput
    create: XOR<PartyCreateWithoutCandidatesInput, PartyUncheckedCreateWithoutCandidatesInput>
  }

  export type UserUpsertWithoutCandidateInput = {
    update: XOR<UserUpdateWithoutCandidateInput, UserUncheckedUpdateWithoutCandidateInput>
    create: XOR<UserCreateWithoutCandidateInput, UserUncheckedCreateWithoutCandidateInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCandidateInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCandidateInput, UserUncheckedUpdateWithoutCandidateInput>
  }

  export type UserUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    governorate?: GovernorateUpdateOneRequiredWithoutUsersNestedInput
    posts?: PostUpdateManyWithoutAuthorNestedInput
    organized?: EventUpdateManyWithoutOrganizerNestedInput
    debates?: DebateParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    organized?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    debates?: DebateParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PartyUpsertWithoutCandidatesInput = {
    update: XOR<PartyUpdateWithoutCandidatesInput, PartyUncheckedUpdateWithoutCandidatesInput>
    create: XOR<PartyCreateWithoutCandidatesInput, PartyUncheckedCreateWithoutCandidatesInput>
    where?: PartyWhereInput
  }

  export type PartyUpdateToOneWithWhereWithoutCandidatesInput = {
    where?: PartyWhereInput
    data: XOR<PartyUpdateWithoutCandidatesInput, PartyUncheckedUpdateWithoutCandidatesInput>
  }

  export type PartyUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    leader?: StringFieldUpdateOperationsInput | string
    founded?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartyUncheckedUpdateWithoutCandidatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    leader?: StringFieldUpdateOperationsInput | string
    founded?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GovernorateCreateWithoutStatsInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutGovernorateInput
    events?: EventCreateNestedManyWithoutGovernorateInput
  }

  export type GovernorateUncheckedCreateWithoutStatsInput = {
    id: string
    name: string
    enName: string
    slug: string
    path?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutGovernorateInput
    events?: EventUncheckedCreateNestedManyWithoutGovernorateInput
  }

  export type GovernorateCreateOrConnectWithoutStatsInput = {
    where: GovernorateWhereUniqueInput
    create: XOR<GovernorateCreateWithoutStatsInput, GovernorateUncheckedCreateWithoutStatsInput>
  }

  export type GovernorateUpsertWithoutStatsInput = {
    update: XOR<GovernorateUpdateWithoutStatsInput, GovernorateUncheckedUpdateWithoutStatsInput>
    create: XOR<GovernorateCreateWithoutStatsInput, GovernorateUncheckedCreateWithoutStatsInput>
    where?: GovernorateWhereInput
  }

  export type GovernorateUpdateToOneWithWhereWithoutStatsInput = {
    where?: GovernorateWhereInput
    data: XOR<GovernorateUpdateWithoutStatsInput, GovernorateUncheckedUpdateWithoutStatsInput>
  }

  export type GovernorateUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutGovernorateNestedInput
    events?: EventUpdateManyWithoutGovernorateNestedInput
  }

  export type GovernorateUncheckedUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    enName?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    path?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutGovernorateNestedInput
    events?: EventUncheckedUpdateManyWithoutGovernorateNestedInput
  }

  export type UserCreateManyGovernorateInput = {
    id: string
    name: string
    avatarUrl: string
    role: $Enums.UserRole
    verified?: boolean
    party: string
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateManyGovernorateInput = {
    id: string
    title: string
    date: Date | string
    location: string
    organizerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutGovernorateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutAuthorNestedInput
    organized?: EventUpdateManyWithoutOrganizerNestedInput
    debates?: DebateParticipantUpdateManyWithoutUserNestedInput
    candidate?: CandidateUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGovernorateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput
    organized?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
    debates?: DebateParticipantUncheckedUpdateManyWithoutUserNestedInput
    candidate?: CandidateUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutGovernorateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    party?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutGovernorateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserUpdateOneRequiredWithoutOrganizedNestedInput
  }

  export type EventUncheckedUpdateWithoutGovernorateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyWithoutGovernorateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateManyAuthorInput = {
    id: string
    timestamp?: Date | string
    content: string
    mediaUrl?: string | null
    likes?: number
    comments?: number
    shares?: number
    isSponsored?: boolean
    type: $Enums.PostType
    governorates?: PostCreategovernoratesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateManyOrganizerInput = {
    id: string
    title: string
    date: Date | string
    location: string
    governorateId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DebateParticipantCreateManyUserInput = {
    debateId: string
  }

  export type PostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    isSponsored?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    governorates?: PostUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    isSponsored?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    governorates?: PostUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    isSponsored?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumPostTypeFieldUpdateOperationsInput | $Enums.PostType
    governorates?: PostUpdategovernoratesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    governorate?: GovernorateUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    governorateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DebateParticipantUpdateWithoutUserInput = {
    debate?: DebateUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type DebateParticipantUncheckedUpdateWithoutUserInput = {
    debateId?: StringFieldUpdateOperationsInput | string
  }

  export type DebateParticipantUncheckedUpdateManyWithoutUserInput = {
    debateId?: StringFieldUpdateOperationsInput | string
  }

  export type DebateParticipantCreateManyDebateInput = {
    userId: string
  }

  export type DebateParticipantUpdateWithoutDebateInput = {
    user?: UserUpdateOneRequiredWithoutDebatesNestedInput
  }

  export type DebateParticipantUncheckedUpdateWithoutDebateInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DebateParticipantUncheckedUpdateManyWithoutDebateInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateCreateManyPartyInput = {
    id: string
    userId: string
    platformSummary?: string | null
    votes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidateUpdateWithoutPartyInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutPartyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateUncheckedUpdateManyWithoutPartyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    platformSummary?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GovernorateCountOutputTypeDefaultArgs instead
     */
    export type GovernorateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GovernorateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DebateCountOutputTypeDefaultArgs instead
     */
    export type DebateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DebateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartyCountOutputTypeDefaultArgs instead
     */
    export type PartyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GovernorateDefaultArgs instead
     */
    export type GovernorateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GovernorateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostDefaultArgs instead
     */
    export type PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArticleDefaultArgs instead
     */
    export type ArticleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArticleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DebateDefaultArgs instead
     */
    export type DebateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DebateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DebateParticipantDefaultArgs instead
     */
    export type DebateParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DebateParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartyDefaultArgs instead
     */
    export type PartyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidateDefaultArgs instead
     */
    export type CandidateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GovernorateStatisticDefaultArgs instead
     */
    export type GovernorateStatisticArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GovernorateStatisticDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GovernorateParticipationDefaultArgs instead
     */
    export type GovernorateParticipationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GovernorateParticipationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DashboardSnapshotDefaultArgs instead
     */
    export type DashboardSnapshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DashboardSnapshotDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}