
Document application structure and categories
Oct 21
·
missinggold
·
main

Archive

Share

So I want you to act as a. Structure and a lot of development. And I would like you to scrutinize this repo and this local. Folder. And all I want you to do, we have agents who's looking for data collection. So we want to have the full structure of the application side, what's necessary. So I'd like you to study this application starting with priority. We have nine categories, sub 9 main categories or 9 grids. And each grid has each category has subcategories, so I'd like you to list the mall of it and so that we can give it to the agent to collect in all those areas. And. Anything you think that should be considered for? Marketing and stuff."E:\missinggold-fresh"
Copy

Version 1

Version 2

Version 3

Version 4
Application structure overview
The platform is a Next.js 15 + React 19 application with Prisma, Tailwind CSS, and full multi-language support (English, Arabic, Kurdish), designed to cover events, venues, and hospitality across Iraq & Kurdistan.

Key directories for data collection agents are:

src/app/ for routed pages (events, venues, hospitality verticals, localization-aware routes).

src/components/ for reusable UI such as navigation, grids, and modals.

src/lib/ for configuration helpers (including per-country category presets).

public/ for static assets and mockups.

messages/ and public/locales/ for translation catalogs.

scripts/ for ingestion utilities.
These folders are explicitly documented in the project structure guide.

Top-level content verticals (grids) to prioritize
The homepage-driven multi-venue experience exposes five primary grids/tabs: All, Events, Hotels, Restaurants, and Activities; each tab filters the multi-venue grid and has its own marketing copy and CTA surface.

Dedicated landing pages exist for each hospitality vertical (/events, /hotels, /restaurants, /cafes, /tourism), providing deeper subcategory groupings and marketing copy that agents can mirror when sourcing content.

Event category grid (high-priority dataset)
The platform defines a 16-tile event category grid (translated into three languages) covering the full discovery taxonomy:

Technology & Innovation

Business & Networking

Music & Concerts

Arts & Culture

Sports & Fitness

Food & Drink

Learning & Development

Health & Wellness

Community & Social

Gaming & Esports

Spiritual & Religious

Family & Kids

Outdoor & Adventure

Virtual Events

Academic and Conferences

All Events (global roll-up)
Each tile links to /events?category=... and is described in detail for copywriting and SEO purposes.

Translation keys are consistent across English, Arabic, and Kurdish, so agents should capture localized labels alongside imagery and descriptions when collecting assets.

Venue subcategory breakouts per vertical
Restaurants: Six cuisine clusters (Iraqi Traditional, Kurdish Specialties, Middle Eastern, Seafood, International, Desserts & Sweets) are showcased with counts, icons, and copy; these can guide culinary data-gathering and photo sourcing.

Cafes: Six experiential subtypes (Traditional Coffee Houses, Tea Gardens, Modern Cafes, Shisha Lounges, Bakery Cafes, Rooftop Cafes) highlight ambiance and offerings; collect representative menus, ambiance shots, and specialties for each.

Tourism & Activities: Six travel segments (Historical Sites, Natural Wonders, Cultural Experiences, Adventure Tours, Religious Sites, City Tours) set expectations for attractions, itineraries, and supporting media.

Country-specific category presets (for regional expansion)
COUNTRY_CONFIGS defines per-market category presets and city lists. For Iraq the focus is Tech, Music, Business, Arts & Culture, Sports, Food & Dining, Health & Wellness, and Community; UAE adds Luxury Events, Desert Adventures, and Wellness, while Saudi Arabia introduces Cultural Events and Entertainment. Agents expanding coverage should align new datasets with these keys to keep the UX coherent.

The practical multi-country guide reiterates that only cities, currencies, and localized categories change per market, so agents can reuse the same ingestion workflow with country-specific inputs.

Marketing & monetization considerations for data collection
The marketing strategy prioritizes geo-targeted localization (language mixes per city) and culturally tuned content (e.g., Kurdish festivals, Islamic holidays, luxury UAE events). Agents should capture localized holiday calendars, venue imagery, and cultural notes to feed these personalization engines.

Revenue streams are diversified (ticketing commissions, hotel bookings, travel packages, premium listings, corporate services, advertising). Capturing pricing tiers, commission-friendly partners, and advertiser-ready assets in each category will directly support these monetization pillars.

Recommended data-collection checklist for agents
For each main vertical (Events, Hotels, Restaurants, Cafes, Tourism/Activities):

Gather high-resolution imagery, venue metadata, pricing, and localized descriptions matching the subcategory breakdowns.

For every event category tile:

Compile representative events, organizer contact data, and translation-ready copy in EN/AR/KU.

Per-country presets:

Capture city-level inventories, localized category nuances, currency information, and payment preferences aligned with COUNTRY_CONFIGS.

Marketing enablement:

Document cultural moments, sponsorship opportunities, and partner prospects that map to the revenue streams (e.g., hotels near major events, advertisers for each category).

Following this structure will give your data-collection agents a comprehensive blueprint aligned with the product’s UI, localization, and go-to-market strategy.




Logs
Configuring language runtimes...
Running auto setup...
Scanning repository (up to depth 3) for dependency configurations...

--- Checking . ---

==> Processing Node.js project in .
Found package-lock.json. Installing Node.js dependencies with npm ci...

Running: npm ci
npm warn Unknown env config "http-proxy". This will stop working in the next major version of npm.
⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸npm warn deprecated workbox-google-analytics@6.6.0: It is not compatible with newer versions of GA starting with v4, as long as you are using GAv3 it should be ok, but the package is not longer being maintained
⠸⠼⠴⠦npm warn deprecated workbox-cacheable-response@6.6.0: workbox-background-sync@6.6.0
⠦⠧⠇npm warn deprecated sourcemap-codec@1.4.8: Please use @jridgewell/sourcemap-codec instead
⠇⠏⠋⠙npm warn deprecated rollup-plugin-terser@7.0.2: This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser
⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
⠋⠙⠹⠸npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
⠸npm warn deprecated rimraf@2.7.1: Rimraf versions prior to v4 are no longer supported
⠸⠼⠴npm warn deprecated source-map@0.8.0-beta.0: The work that was done in this beta branch won't be included in future versions
⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏
> eventra-venues@2.0.0 postinstall
> prisma generate

⠏warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Prisma schema loaded from prisma/schema.prisma

✔ Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 180ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Need your database queries to be 1000x faster? Accelerate offers you that and more: https://pris.ly/tip-2-accelerate

⠙
added 856 packages, and audited 858 packages in 39s
⠙
⠙211 packages are looking for funding
⠙  run `npm fund` for details
⠙
found 0 vulnerabilities
⠙npm notice
npm notice New minor version of npm available! 11.4.2 -> 11.6.2
npm notice Changelog: https://github.com/npm/cli/releases/tag/v11.6.2
npm notice To update run: npm install -g npm@11.6.2
npm notice
⠙No installations were performed.
So I want you to act as a. Structure and a lot of development. And I would like you to scrutinize this repo and this local. Folder. And all I want you to do, we have agents who's looking for data collection. So we want to have the full structure of the application side, what's necessary. So I'd like you to study this application starting with priority. We have nine categories, sub 9 main categories or 9 grids. And each grid has each category has subcategories, so I'd like you to list the mall of it and so that we can give it to the agent to collect in all those areas. And. Anything you think that should be considered for? Marketing and stuff."E:\missinggold-fresh"
The instructions seem to conflict. I'll check AGENTS.md to confirm which path to follow.

ls
root@66535ad8d509:/workspace# ls
missinggold
I’ll find the AGENTS.md to check any relevant instructions.

root@66535ad8d509:/workspace# cd missinggold
root@66535ad8d509:/workspace/missinggold# ls
-                                    LICENSE                             STEP_2_COMPLETION_REPORT.md       middleware.ts
COMPETITIVE_ANALYSIS_MIDDLE_EAST.md  MARKETING_REVENUE_STRATEGY.md       STEP_3_COMPLETION_REPORT.md       next.config.ts
DEPLOYMENT.md                        MULTI_COUNTRY_SCALING_STRATEGY.md   STEP_4_COMPLETION_REPORT.md       node_modules
DEPLOYMENT_GUIDE.md                  NAVIGATION_LOCALE_FIX_MEMORY.md     STRATEGIC_PLATFORM_ANALYSIS.md    package-lock.json
DEPLOYMENT_READY.md                  OPTIMIZATION_REPORT.md              TECHNICAL_ARCHITECTURE.md         package.json
DEPLOYMENT_VERIFICATION.md           OPTIMIZATION_SUMMARY.md             TRANSLATION_ENFORCEMENT_GUIDE.md  postcss.config.mjs
FILE_BY_FILE_OPTIMIZATION.md         PERFORMANCE_OPTIMIZATION_REPORT.md  UI_IMPROVEMENTS.md                prisma
FINAL_OPTIMIZATION_SUMMARY.md        PRACTICAL_MULTI_COUNTRY_GUIDE.md    WARP.md                           public
FIXES_APPLIED.md                     PRODUCTION_DEPLOYMENT.md            _backup                           safe-config.js
I18N_AUDIT_REPORT.json               QUICK_REFERENCE.md                  ai-fix-about.diff                 scripts
I18N_IMPLEMENTATION_SUMMARY.md       README.md                           eslint.config.mjs                 src
IMPLEMENTATION_GUIDE.md              RTL_LOCALIZATION_FIXES.md           i18n.ts                           tailwind.config.js
LAUNCH_CERTIFICATION.md              SECURITY_FIXES_SUMMARY.md           messages                          tsconfig.json
Let me search for the AGENTS.md file. Time to dig around!

root@66535ad8d509:/workspace/missinggold# find .. -name AGENTS.md -print
No AGENTS file, so I'll follow the user's request by analyzing the repo structure.

root@66535ad8d509:/workspace/missinggold# rg "category" -n
COMPETITIVE_ANALYSIS_MIDDLE_EAST.md
480:**Market reality**: You're not competing in a crowded space - you're creating a new category!

OPTIMIZATION_REPORT.md
89:  @@index([category])
164:CREATE INDEX idx_events_category ON "Event"(category);

I18N_AUDIT_REPORT.json
42:      "category": "user_feedback"
51:      "category": "error_message"
60:      "category": "error_message"
69:      "category": "error_message"
78:      "category": "error_message"
87:      "category": "error_message"
96:      "category": "error_message"
105:      "category": "error_message"
114:      "category": "ui_text"
123:      "category": "ui_text"
132:      "category": "demo_content"
141:      "category": "demo_content"
150:      "category": "demo_content"
159:      "category": "demo_content"
168:      "category": "demo_content"
177:      "category": "demo_content"
186:      "category": "demo_content"
195:      "category": "demo_content"
204:      "category": "demo_content"
213:      "category": "demo_content"
222:      "category": "demo_content"
231:      "category": "demo_content"
240:      "category": "demo_content"
249:      "category": "demo_content"
258:      "category": "demo_content"
264:      "suggested_translation_key": "demo.events.aiSummit.category",
265:      "context": "Demo event category (should use translation key)",
267:      "category": "demo_content"
276:      "category": "metadata"
285:      "category": "metadata"
294:      "category": "metadata"

_backup/eventmaster-multilingual-clean.html
567:                    <label for="event-category">Category</label>
568:                    <select id="event-category">
569:                        <option value="">Select category</option>

_backup/iraq-events-multilingual.html.backup
884:            <div class="event-card slide-in" data-category="music" data-city="baghdad">
901:                        <span class="category-tag music">Music</span>
907:            <div class="event-card slide-in" data-category="sports" data-city="erbil">
924:                        <span class="category-tag sports">Sports</span>
930:            <div class="event-card slide-in" data-category="culture" data-city="basra">
947:                        <span class="category-tag culture">Culture</span>
953:            <div class="event-card slide-in" data-category="tech" data-city="sulaymaniyah">
970:                        <span class="category-tag tech">Technology</span>
976:            <div class="event-card slide-in" data-category="food" data-city="mosul">
993:                        <span class="category-tag food">Food</span>
999:            <div class="event-card slide-in" data-category="art" data-city="duhok">
1016:                        <span class="category-tag art">Art</span>
1124:                    <label for="event-category">
1127:                    <select id="event-category">
1128:                        <option value="">Select category</option>
1389:                        if (filterValue === 'all' || card.getAttribute('data-category') === filterValue) {
1488:            // Add category tag styling
1489:            const categoryTags = document.querySelectorAll('.category-tag');
1490:            categoryTags.forEach(tag => {
1491:                const category = tag.className.split(' ')[1];
1499:                switch(category) {

MULTI_COUNTRY_SCALING_STRATEGY.md
289:- [ ] Local city/category data import

messages/en.json
2:  "categories.${event.category}": ""
57:    "category": "Category",
84:    "category": "Category",
85:    "selectCategory": "Select category",
308:  "categoryDescriptions": {

messages/ar.json
2:  "categories.${event.category}": ""
59:    "category": "الفئة",
86:    "category": "الفئة",
322:  "categoryDescriptions": {

messages/ku.json
2:  "categories.${event.category}": ""
144:    "category": "پۆل",
171:    "category": "پۆل",
351:  "categoryDescriptions": {

scripts/add-missing-translations.js
18:  "categoryDescriptions": {
235:      if (!translations.categoryDescriptions) {
236:        translations.categoryDescriptions = {};
239:      // Add category descriptions
240:      Object.keys(missingTranslations.categoryDescriptions).forEach(key => {
241:        translations.categoryDescriptions[key] = missingTranslations.categoryDescriptions[key][lang];

scripts/import-events-from-csv.ts
9:  - Attempts best-effort mapping of common headers: title, description, date, time, location, city, category,
11:  - If imageUrl is missing, assigns a relevant Unsplash image based on category.
163:      const categoryRaw = pick(row, ["category","type","الفئة","التصنيف"]);
176:      const cat = classifyCategory(title, categoryRaw);
192:          category: cat.display,

scripts/csv-to-events-json.ts
22:    id, publicId, date, category, imageUrl, whatsappGroup, whatsappPhone, contactMethod, city, user, title, description, loca
tion
134:    const categoryIn = pick(row, ['Category','category']);
148:    const cat = classifyCategory(title, categoryIn);
155:      category: cat.display,

public/data/events.json
9:    "category": "Technology & Innovation",
22:    "category": "Music & Concerts",
35:    "category": "Business",
48:    "category": "Arts & Culture",
61:    "category": "Food & Drink",
74:    "category": "Sports & Fitness",
87:    "category": "Health & Wellness",
100:    "category": "Community & Social",
113:    "category": "Business",
126:    "category": "Arts & Culture",
...
.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
21:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWel
lness'), color: 'from-emerald-500 to-teal-500' },
22:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communi
tySocial'), color: 'from-orange-500 to-red-500' },
23:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },
24:    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.s
piritualReligious'), color: 'from-amber-500 to-yellow-500' },
25:    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'
), color: 'from-sky-500 to-blue-500' },
26:    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoo
rAdventure'), color: 'from-lime-500 to-green-500' },
27:    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEven
ts'), color: 'from-slate-500 to-gray-500' },
28:    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions
.academicConferences'), color: 'from-rose-500 to-red-500' }
46:          {categories.map((category, index) => (
48:              key={category.name}
51:              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-
6 group-hover:scale-110 transition-transform duration-300`}>
52:                <span className="text-3xl">{category.icon}</span>
56:                {category.name}
60:                {category.description}
64:                href={`/events?category=${encodeURIComponent(category.key)}`}
65:                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-fu
ll font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}

src/app/page-original.tsx
88:      category: "tech"
100:      category: "music"
112:      category: "business"
124:      category: "art"
191:  const getCategoryIcon = (category: string) => {
221:    return icons[category?.toLowerCase().replace(/[^a-z]/g, '')] || '🎦';
224:  const getCategoryTranslation = (category: string) => {
225:    const categoryMap: { [key: string]: string } = {
253:    const key = categoryMap[category?.toLowerCase().replace(/[^a-z]/g, '')];
254:    return key ? t(key) : category;
257:  const getEventImageCategory = (category: string) => {
258:    const categoryMap: { [key: string]: string } = {
271:    return categoryMap[category?.toLowerCase()] || 'other';
298:          category: "technology",
311:          category: "music",
324:          category: "business",
337:          category: "art",
414:                  category={slide.category}
415:                  fallbackType={slide.category as any}
597:              {[...categories, ...categories, ...categories].map((category, index) => (
599:                  key={`category-${index}`}
601:                  onClick={() => setSelectedCategory(category.name)}
604:                    {category.icon}
607:                    {category.name}
721:                        category={getEventImageCategory(event.category || "")}
725:                          {getCategoryIcon(event.category || "")} {getCategoryTranslation(event.category || "")}

src/app/api/events/create/route.ts
58:      category: data.category ?? "",

src/app/api/events/import/route.ts
16:  category?: string;
58:          category: ev.category || "",

src/app/api/events/public/[publicId]/route.ts
24:    category: event.category,

src/app/restaurants/page.tsx
229:              className="category-icon restaurants restaurants-glow"

src/app/api/events/route.ts
54:          category: e.category,

src/app/components/EventDetailsModal.tsx
14:  category?: string;
33:function translateCategoryLabel(categoryName?: string): string {
34:  if (!categoryName) return '';
53:  const key = map[categoryName];
57:    return key ? (require('../hooks/useTranslations').useTranslations().t(key)) : categoryName;
59:    return categoryName;
144:            {event.category && (
148:                  <h3 className="font-semibold text-gray-900">{t('eventForm.category')}</h3>
151:                  {translateCategoryLabel(event.category)}

src/app/components/EventImage.tsx
13:  category?: string;
41:  category = 'general',
48:  // Use provided src or generate placeholder based on category/fallbackType
49:  const baseSrc = src || getPlaceholderImage(category || fallbackType, width, height);
50:  const imageSrc = imageError ? getPlaceholderImage(fallbackType || category, width, height) : baseSrc;

src/app/components/MultiVenueHomepage.tsx
15:  category?: string;

src/app/components/OptimizedNeonHomepage.tsx
46:  category: string;
87:      category: 'events'
95:      category: 'events'
134:const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
137:      href={category.href}
138:      className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
148:          filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
151:        {category.icon}
158:          color: `var(--${category.color}-color)`,
159:          textShadow: `0 0 5px var(--${category.color}-color)`
162:        {category.name}
169:        {category.count}+ places
334:          {categories.map((category, index) => (
335:            <CategoryCard key={category.id} category={category} index={index} />

src/app/components/SkeletonLoader.tsx
164: * Category Grid Skeleton - For category cards

src/app/components/NeonHomepage.tsx
125:          {categories.map((category) => (
127:              key={category.id}
128:              href={`/${category.id}`}
129:              className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
132:                animationDelay: `${categories.indexOf(category) * 0.2}s`
137:                filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
139:                {category.icon}
144:                color: `var(--${category.color}-color)`,
145:                textShadow: `0 0 5px var(--${category.color}-color)`
147:                {category.name}
154:                {category.count}+ places
I'll check src/app/page.tsx for the categories, starting with repo instructions and README.

root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' src/app/page.tsx                                                      ﻿
"use client";

import MultiVenueHomepage from "./components/MultiVenueHomepage";
import Navigation from "./components/Navigation";

/**
 * Home Page - Multi-Venue Platform
 *
 * Features:
 * - Events, Hotels, Restaurants, Activities, Services
 * - Tabbed navigation
 * - Venue listings
 */

export default function Home() {
  return (
    <>
      <Navigation />
      <MultiVenueHomepage />
    </>
  );
}
I'll check out the MultiVenueHomepage component to understand its structure and functionality.

root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' src/app/components/MultiVenueHomepage.tsx
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';

interface Venue {
  id: string;
  publicId: string;
  type: 'EVENT' | 'HOTEL' | 'RESTAURANT' | 'ACTIVITY' | 'SERVICE';
  title: string;
  description: string;
  location: string;
  city: string;
  category?: string;
  priceRange?: string;
  imageUrl?: string;
  featured: boolean;
  verified: boolean;
  cuisineType?: string;
  eventDate?: string;
  amenities?: string[];
}

export default function MultiVenueHomepage() {
  const [activeTab, setActiveTab] = useState<string>('all');
  const [venues, setVenues] = useState<Venue[]>([]);
  const [loading, setLoading] = useState(true);

  const tabs = [
    { id: 'all', label: 'All', icon: '🌟' },
    { id: 'EVENT', label: 'Events', icon: '🎉' },
    { id: 'HOTEL', label: 'Hotels', icon: '🏨' },
    { id: 'RESTAURANT', label: 'Restaurants', icon: '🍽️' },
    { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
  ];

  useEffect(() => {
    fetchVenues();
  }, [activeTab]);

  const fetchVenues = async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams();
      if (activeTab !== 'all') {
        params.set('type', activeTab);
      }
      params.set('locale', 'en'); // TODO: Get from context

      const response = await fetch(`/api/venues?${params}`);
      const data = await response.json();

      if (data.success) {
        setVenues(data.venues || []);
      }
    } catch (error) {
      console.error('Error fetching venues:', error);
    } finally {
      setLoading(false);
    }
  };

  const getVenueTypeIcon = (type: string) => {
    switch (type) {
      case 'EVENT': return '🎉';
      case 'HOTEL': return '🏨';
      case 'RESTAURANT': return '🍽️';
      case 'ACTIVITY': return '🎯';
      case 'SERVICE': return '🛎️';
      default: return '📍';
    }
  };

  const formatPrice = (priceRange?: string) => {
    if (!priceRange) return null;
    return priceRange;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Hero Section */}
      <section className="relative py-20 px-4 text-center">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            🏰 Discover Iraq & Kurdistan
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Events • Hotels • Restaurants • Activities - All in One Platform
          </p>

          {/* Tab Navigation */}
          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-6 py-3 rounded-full font-semibold transition-all duration-300 ${
                  activeTab === tab.id
                    ? 'bg-blue-600 text-white shadow-lg transform scale-105'
                    : 'bg-white text-gray-700 hover:bg-blue-50 shadow-md'
                }`}
              >
                {tab.icon} {tab.label}
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Venues Grid */}
      <section className="px-4 pb-20">
        <div className="max-w-7xl mx-auto">
          {loading ? (
            <div className="flex justify-center items-center py-20">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
          ) : (
            <>
              {venues.length === 0 ? (
                <div className="text-center py-20">
                  <div className="text-6xl mb-4">🏗️</div>
                  <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    Coming Soon!
                  </h3>
                  <p className="text-gray-600">
                    {activeTab === 'all'
                      ? 'Venues are being added to our platform'
                      : `${tabs.find(t => t.id === activeTab)?.label} will be available soon`
                    }
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                  {venues.map((venue) => (
                    <VenueCard key={venue.id} venue={venue} />
                  ))}
                </div>
              )}
            </>
          )}
        </div>
      </section>

      {/* CTA Section */}
      <section className="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16 px-4">
        <div className="max-w-4xl mx-auto text-center">
          <h2 className="text-3xl font-bold mb-4">
            Join the Platform
          </h2>
          <p className="text-xl mb-8 opacity-90">
            List your business and reach thousands of customers
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Link
              href="/register"
              className="bg-white text-blue-600 px-8 py-3 rounded-full font-semibold hover:bg-blue-50 transition-colors"
            >
              Sign Up Free
            </Link>
            <Link
              href="/venues/create"
              className="border-2 border-white text-white px-8 py-3 rounded-full font-semibold hover:bg-white hover:text-blue-60
0 transition-colors"
            >
              List Your Venue
            </Link>
          </div>
        </div>
      </section>
    </div>
  );
}

function VenueCard({ venue }: { venue: Venue }) {
  const getVenueTypeIcon = (type: string) => {
    switch (type) {
      case 'EVENT': return '🎉';
      case 'HOTEL': return '🏨';
      case 'RESTAURANT': return '🍽️';
      case 'ACTIVITY': return '🎯';
      case 'SERVICE': return '🛎️';
      default: return '📍';
    }
  };

  const getEventDate = (eventDate?: string) => {
    if (!eventDate) return null;
    return new Date(eventDate).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const formatPrice = (priceRange?: string) => {
    if (!priceRange) return null;
    return priceRange;
  };

  return (
I should keep going toward the bottom to find the categories I'm looking for.

root@66535ad8d509:/workspace/missinggold# sed -n '200,400p' src/app/components/MultiVenueHomepage.tsx
  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
      {/* Image */}
      <div className="relative h-48 bg-gray-200">
        {venue.imageUrl ? (
          <Image
            src={venue.imageUrl}
            alt={venue.title}
            fill
            className="object-cover"
          />
        ) : (
          <div className="flex items-center justify-center h-full text-4xl">
            {getVenueTypeIcon(venue.type)}
          </div>
        )}

        {/* Badges */}
        <div className="absolute top-3 left-3 flex gap-2">
          {venue.featured && (
            <span className="bg-yellow-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
              ⭐ Featured
            </span>
          )}
          {venue.verified && (
            <span className="bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
              ✓ Verified
            </span>
          )}
        </div>

        {/* Type Badge */}
        <div className="absolute top-3 right-3">
          <span className="bg-blue-600 text-white px-3 py-1 rounded-full text-xs font-semibold">
            {getVenueTypeIcon(venue.type)} {venue.type}
          </span>
        </div>
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-bold text-lg text-gray-900 mb-2 line-clamp-1">
          {venue.title}
        </h3>

        <p className="text-gray-600 text-sm mb-3 line-clamp-2">
          {venue.description}
        </p>

        {/* Location */}
        <div className="flex items-center text-gray-500 text-sm mb-2">
          <span className="mr-1">📍</span>
          <span className="line-clamp-1">{venue.location}</span>
        </div>

        {/* Event Date */}
        {venue.type === 'EVENT' && venue.eventDate && (
          <div className="flex items-center text-blue-600 text-sm mb-2">
            <span className="mr-1">📅</span>
            <span>{getEventDate(venue.eventDate)}</span>
          </div>
        )}

        {/* Cuisine Type */}
        {venue.type === 'RESTAURANT' && venue.cuisineType && (
          <div className="flex items-center text-orange-600 text-sm mb-2">
            <span className="mr-1">🍴</span>
            <span>{venue.cuisineType}</span>
          </div>
        )}

        {/* Price Range */}
        {venue.priceRange && (
          <div className="flex items-center text-green-600 text-sm mb-3">
            <span className="mr-1">💰</span>
            <span>{formatPrice(venue.priceRange)}</span>
          </div>
        )}

        {/* Action Button */}
        <Link
          href={`/venue/${venue.publicId}`}
          className="block w-full bg-blue-600 text-white text-center py-2 rounded-lg font-semibold hover:bg-blue-700 transition-
colors"
        >
          View Details
        </Link>
      </div>
    </div>
  );
}root@66535ad8d509:/workspace/missinggold#
Looks like the categories might be defined elsewhere. I'll start by checking categoryDescriptions.

}root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' src/app/components/OptimizedNeonHomepage.tsx
"use client";

/**
 * Optimized Neon Homepage Component
 *
 * Performance Optimizations:
 * - Separated business logic from UI (Functional Core, Imperative Shell)
 * - Debounced window resize handlers
 * - Memoized components with React.memo
 * - useMemo for expensive computations
 * - useCallback for stable function references
 * - Lazy loading for images
 * - Intersection Observer for visibility-based rendering
 */

import { useState, useMemo, useCallback, memo } from 'react';
import Link from 'next/link';
import { useLanguage } from './LanguageProvider';
import { useTranslations } from '../hooks/useTranslations';
import { usePersistedState } from '../hooks/useOptimizedState';

// ==================== TYPES ====================

interface StoryUser {
  id: string;
  name: string;
  avatar: string;
  count: number;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: 'events' | 'hotels' | 'restaurants' | 'cafes' | 'tourism';
  count: number;
  href: string;
}

interface FeaturedEvent {
  id: string;
  title: string;
  description: string;
  icon: string;
  date: string;
  category: string;
}

// ==================== BUSINESS LOGIC ====================

/**
 * Hook for story users data
 * Memoized to prevent unnecessary re-computations
 */
function useStoryUsers(): StoryUser[] {
  return useMemo(() => [
    { id: '1', name: 'Ahmed M.', avatar: '/api/placeholder/64/64', count: 245 },
    { id: '2', name: 'Sara K.', avatar: '/api/placeholder/64/64', count: 89 },
    { id: '3', name: 'Omar H.', avatar: '/api/placeholder/64/64', count: 156 }
  ], []);
}

/**
 * Hook for categories data with proper typing and memoization
 */
function useCategories(): Category[] {
  return useMemo(() => [
    { id: 'events', name: 'Events', icon: '📅', color: 'events', count: 124, href: '/events' },
    { id: 'hotels', name: 'Hotels', icon: '🏨', color: 'hotels', count: 87, href: '/hotels' },
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156, href: '/restaurants' },
    { id: 'cafes', name: 'Cafes', icon: '☕', color: 'cafes', count: 92, href: '/cafes' },
    { id: 'tourism', name: 'Tourism', icon: '📸', color: 'tourism', count: 73, href: '/tourism' }
  ], []);
}

/**
 * Hook for featured events data
 */
function useFeaturedEvents(): FeaturedEvent[] {
  return useMemo(() => [
    {
      id: '1',
      title: 'Baghdad Cultural Night',
      description: 'Experience traditional Iraqi culture with music, dance, and art',
      icon: '🎭',
      date: 'Oct 15, 2024',
      category: 'events'
    },
    {
      id: '2',
      title: 'Tech Innovation Summit',
      description: 'Join leading tech experts for the future of technology in Iraq',
      icon: '🎪',
      date: 'Oct 28, 2024',
      category: 'events'
    }
  ], []);
}

// ==================== UI COMPONENTS ====================

/**
 * Story Avatar Component - Memoized for performance
 */
const StoryAvatar = memo(({ user }: { user: StoryUser }) => {
  const handleImageError = useCallback((e: React.SyntheticEvent<HTMLImageElement>) => {
    const target = e.currentTarget;
    target.src = `data:image/svg+xml;base64,${btoa(`
      <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="64" height="64" fill="#2D1B4E"/>
        <circle cx="32" cy="24" r="8" fill="#B24BF3"/>
        <path d="M16 48c0-8 7-16 16-16s16 8 16 16" fill="#B24BF3"/>
      </svg>
    `)}`;
  }, []);

  return (
    <div className="story-avatar events-glow">
      <img
        src={user.avatar}
        alt={user.name}
        loading="lazy"
        onError={handleImageError}
      />
      <div className="name">{user.name}</div>
    </div>
  );
});
StoryAvatar.displayName = 'StoryAvatar';

/**
 * Category Card Component - Memoized for performance
 */
const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
  return (
    <Link
      href={category.href}
      className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
      style={{
        textDecoration: 'none',
        animationDelay: `${index * 0.2}s`
      }}
    >
      <div
        className="icon"
        style={{
          fontSize: '3rem',
          filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
        }}
      >
        {category.icon}
      </div>
      <div
        className="label"
        style={{
          fontSize: '1.1rem',
          fontWeight: 'bold',
          color: `var(--${category.color}-color)`,
          textShadow: `0 0 5px var(--${category.color}-color)`
        }}
      >
        {category.name}
      </div>
      <div style={{
        fontSize: '0.9rem',
        color: 'var(--text-secondary)',
        marginTop: '4px'
      }}>
        {category.count}+ places
      </div>
    </Link>
  );
});
CategoryCard.displayName = 'CategoryCard';

/**
 * Event Card Component - Memoized for performance
 */
const EventCard = memo(({ event, featured = false }: { event: FeaturedEvent; featured?: boolean }) => {
  return (
    <div className={`neon-card events events-glow ${featured ? 'featured' : ''}`}>
      <div style={{ padding: '20px' }}>
        <div style={{
          width: '100%',
          height: '150px',
          background: 'linear-gradient(135deg, var(--events-color), var(--bg-secondary))',
          borderRadius: '8px',
          marginBottom: '16px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '3rem'
        }}>
          {event.icon}
        </div>
        <h4 style={{ color: 'var(--text-primary)', marginBottom: '8px', fontSize: '1.2rem' }}>
          {event.title}
        </h4>
        <p style={{ color: 'var(--text-secondary)', fontSize: '0.9rem', marginBottom: '12px' }}>
          {event.description}
This component has 5 categories, not 9. I'll look for CategoryGrid.tsx.

root@66535ad8d509:/workspace/missinggold# ls src/app/components
CityScroller.tsx       EventImage.tsx        MultiVenueHomepage.tsx     PWAInstallPrompt.tsx        SkeletonLoader.tsx
ClientLayout.tsx       ImagePlaceholder.tsx  Navigation.tsx             ResponsiveButton.tsx
DynamicHTML.tsx        LanguageProvider.tsx  NeonHomepage.tsx           SearchSuggest.tsx
ErrorBoundary.tsx      LazyImage.tsx         OptimizedNavigation.tsx    SessionProviderWrapper.tsx
EventDetailsModal.tsx  LoadingScreen.tsx     OptimizedNeonHomepage.tsx  SimpleLanguageProvider.tsx
I’ll open Navigation.tsx to check if there are any categories in that file.

root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' src/app/components/Navigation.tsx
"use client";

import { useSession, signOut } from "next-auth/react";
import Link from "next/link";
import { useState, useEffect } from "react";
import { useLanguage } from "./LanguageProvider";
import { useTranslations } from "../hooks/useTranslations";
import ResponsiveButton from "./ResponsiveButton";

export default function Navigation() {
  const { data: session } = useSession();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { language, setLanguage, isRTL } = useLanguage();
  const { t } = useTranslations();

  const showTopBanner = (process.env.NEXT_PUBLIC_SHOW_TOP_BANNER === 'true');

  // Auto-open mobile menu on initial load for mobile screens to avoid CSS conflicts
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const isMobile = window.innerWidth < 768; // md breakpoint
      if (isMobile) {
        setIsMenuOpen(true);
      }
    }
  }, []);

  return (
    <>
      {/* Top Notification Bar (hidden in production by default) */}
      {showTopBanner && (
        <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white py-2 text-center text-sm font-medium">
          🎉 {t('navigation.aiRecommendations')}
          <Link href="/register" className="underline ml-2 font-semibold hover:text-yellow-300">
            {t('navigation.tryItFree')} {isRTL ? '←' : '→'}
          </Link>
        </div>
      )}

      {/* Main Navigation */}
      <nav className="neon-nav events-glow sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <Link href={language === 'en' ? '/' : `/${language}`} className="group flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-var(--events-color) via-var(--tourism-color) to-var(--hotels-colo
r) rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300 events-glow">
                <span className="text-white font-bold text-lg">🇮🇶</span>
              </div>
              <div>
                <span className="text-2xl font-bold text-white neon-glow" style={{ color: 'var(--text-primary)', textShadow: '0
0 10px var(--events-color)' }}>
                  IraqGuide
                </span>
                <div className="text-xs font-medium -mt-1" style={{ color: 'var(--text-secondary)' }}>{t('navigation.eventPlatfo
rm')}</div>
              </div>
            </Link>

            {/* Desktop Menu */}
            <div className="hidden md:flex items-center gap-8">
              <Link href={language === 'en' ? '/' : `/${language}`} className="font-medium transition-colors relative group" sty
le={{ color: 'var(--text-primary)' }}>
                {t('navigation.home')}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/events' : `/${language}/events`} className="font-medium transition-colors relati
ve group" style={{ color: 'var(--text-primary)' }}>
                {t('navigation.events')}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/hotels' : `/${language}/hotels`} className="font-medium transition-colors relati
ve group" style={{ color: 'var(--text-primary)' }}>
                Hotels
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--hotels-color)', boxShadow: '0 0 5px var(--hotels-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/restaurants' : `/${language}/restaurants`} className="font-medium transition-col
ors relative group" style={{ color: 'var(--text-primary)' }}>
                Restaurants
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--restaurants-color)', boxShadow: '0 0 5px var(--restaurants-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/tourism' : `/${language}/tourism`} className="font-medium transition-colors rela
tive group" style={{ color: 'var(--text-primary)' }}>
                Tourism
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--tourism-color)', boxShadow: '0 0 5px var(--tourism-color)' }}></span>
              </Link>
            </div>

            {/* User Menu */}
            <div className={`flex items-center gap-3 ${isRTL ? 'flex-row-reverse' : ''}`}>
              {/* Language Switcher */}
              <div className="relative group hidden sm:block" data-testid="language-switcher">
                <button className="flex items-center gap-2 px-3 py-2 font-medium transition-colors rounded-full" style={{ color:
 'var(--text-primary)' }}>
                  <span className="text-lg">🌐</span>
                  <span className="text-sm" suppressHydrationWarning>
                    {language === 'en' ? 'English' : language === 'ar' ? 'العربية' : 'کوردی'}
                  </span>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7-7 7-7" />
                  </svg>
                </button>
                <div className={`absolute ${isRTL ? 'left-0' : 'right-0'} top-full mt-1 rounded-lg min-w-[160px] opacity-0 invis
ible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50`} style={{ background: 'var(--bg-secondary)',
border: '1px solid var(--events-color)' }}>
                  <button
                    onClick={() => setLanguage('en' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'en' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇺🇸 English
                  </button>
                  <button
                    onClick={() => setLanguage('ar' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'ar' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇮🇶 العربية
                  </button>
                  <button
                    onClick={() => setLanguage('ku' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'ku' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇮🇶 کوردی
                  </button>
                </div>
              </div>

{/* Create Event Link styled as text pill (not a button) */}
              <Link
                href={session ? (language === 'en' ? '/dashboard' : `/${language}/dashboard`) : (language === 'en' ? '/register'
 : `/${language}/register`)}
                className="neon-button tourism tourism-glow"
                style={{ fontSize: '0.9rem', padding: '8px 16px' }}
              >
                <span>+</span>
                {t('navigation.createEvent')}
              </Link>

              {session ? (
                <div className="flex items-center gap-4">
                  <div className="hidden lg:flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify
-center">
                      <span className="text-white text-sm font-semibold">
                        {session.user?.name?.charAt(0) || session.user?.email?.charAt(0) || 'U'}
                      </span>
                    </div>
                    <div className="flex flex-col">
                      <span className="text-sm font-medium text-gray-800">
                        {session.user?.name || 'User'}
                      </span>
                      <span className="text-xs text-gray-500">
                        {session.user?.email}
                      </span>
                    </div>
                  </div>
<Link
                    href={language === 'en' ? '/dashboard' : `/${language}/dashboard`}
                    className="inline-block px-3 py-1.5 rounded-full bg-gray-900 text-white text-sm font-semibold hover:bg-gray-
800 transition-colors"
                  >
                    {t('navigation.dashboard')}
                  </Link>
                  <button
                    onClick={() => signOut()}
                    className="text-gray-600 hover:text-red-600 font-medium transition-colors hidden md:block"
                  >
                    {t('navigation.logout')}
                  </button>
                </div>
              ) : (
                <div className="flex items-center gap-3">
<Link
                    href={language === 'en' ? '/login' : `/${language}/login`}
                    className="inline-block px-4 py-1.5 rounded-full bg-gray-900 text-white text-sm font-semibold hover:bg-gray-
800 transition-colors"
                  >
                    {t('navigation.login')}
                  </Link>
                </div>
              )}

              {/* Mobile Menu Button */}
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="md:hidden text-gray-700 hover:text-purple-600 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              </button>
            </div>
          </div>

          {/* Mobile Menu */}
          <div className={`md:hidden py-4 border-t border-gray-100 bg-white/95 backdrop-blur-md ${isMenuOpen ? 'block' : 'hidden
'}`}>
            <div className="flex flex-col gap-4">
              <Link href={language === 'en' ? '/' : `/${language}`} className="text-gray-700 hover:text-purple-600 font-medium t
ransition-colors">
                  {t('navigation.home')}
                </Link>
                <Link href={language === 'en' ? '/events' : `/${language}/events`} className="text-gray-700 hover:text-purple-60
0 font-medium transition-colors">
                  {t('navigation.events')}
                </Link>
                <Link href={language === 'en' ? '/categories' : `/${language}/categories`} className="text-gray-700 hover:text-p
urple-600 font-medium transition-colors">
                  {t('navigation.categories')}
                </Link>
                <Link href={language === 'en' ? '/about' : `/${language}/about`} className="text-gray-700 hover:text-purple-600
font-medium transition-colors">
                  {t('navigation.about')}
                </Link>
                {!session && (
                  <div className="flex gap-3 pt-2">
                    <Link href={language === 'en' ? '/login' : `/${language}/login`} className="bg-gradient-to-r from-purple-600
 to-blue-600 text-white px-4 py-2 rounded-full font-semibold flex items-center gap-2">
                      <span>🔑</span>
I'm checking public/data/events.json for categories—maybe the categories are in messages/en.json.

root@66535ad8d509:/workspace/missinggold# sed -n '250,360p' messages/en.json
    "edit": "Edit",
    "view": "View",
    "close": "Close",
    "next": "Next",
    "previous": "Previous",
    "search": "Search",
    "filter": "Filter",
    "allCategories": "All Categories",
    "allCities": "All Cities",
    "allMonths": "All Months",
    "allPrices": "All Prices",
    "free": "Free",
    "paid": "Paid",
    "under25": "Under $25",
    "price25to50": "$25 - $50",
    "price50to100": "$50 - $100",
    "over100": "Over $100",
    "notSpecified": "Not specified",
    "contactInformation": "Contact Information",
    "joinWhatsAppGroup": "Join WhatsApp Group",
    "price": "Price",
    "imageUnavailable": "Image not available",
    "backToEvents": "Back to Events",
    "anonymous": "Anonymous",
    "general": "General"
  },
  "cities": {
    "baghdad": "Baghdad",
    "basra": "Basra",
    "mosul": "Mosul",
    "erbil": "Erbil",
    "sulaymaniyah": "Sulaymaniyah",
    "duhok": "Duhok",
    "kirkuk": "Kirkuk",
    "anbar": "Anbar",
    "najaf": "Najaf",
    "karbala": "Karbala"
  },
  "months": {
    "january": "January",
    "february": "February",
    "march": "March",
    "april": "April",
    "may": "May",
    "june": "June",
    "july": "July",
    "august": "August",
    "september": "September",
    "october": "October",
    "november": "November",
    "december": "December"
  },
  "categoriesPage": {
    "title": "Event Categories",
    "subtitle": "Discover amazing events across all categories. From music and technology to food and culture, find exactly what
 interests you.",
    "ctaTitle": "Cannot Find Your Category?",
    "ctaSubtitle": "Create your own event and start building your community today!"
  },
  "categoryDescriptions": {
    "all": "Discover all types of events happening around you",
    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
    "businessNetworking": "Networking events, professional meetups, and business conferences",
    "musicConcerts": "Live music, concerts, and musical performances",
    "artsCulture": "Art exhibitions, cultural events, and creative workshops",
    "sportsFitness": "Sports events, fitness classes, and athletic competitions",
    "foodDrink": "Culinary events, food festivals, and dining experiences",
    "learningDevelopment": "Educational workshops, skill development, and training sessions",
    "healthWellness": "Health seminars, wellness workshops, and medical events",
    "communitySocial": "Social gatherings, community events, and meetups",
    "gamingEsports": "Gaming tournaments, esports competitions, and gaming meetups",
    "spiritualReligious": "Spiritual gatherings, religious events, and faith-based meetings",
    "familyKids": "Family-friendly events, children's activities, and parenting workshops",
    "outdoorAdventure": "Outdoor activities, adventure sports, and nature experiences",
    "virtualEvents": "Online events, webinars, and virtual conferences",
    "academicConferences": "Academic conferences, research presentations, and scholarly meetings"
  },
  "hero": {
    "liveEventPlatform": "Live Event Platform",
    "registerNow": "Register Now",
    "getTickets": "Get Tickets",
    "joinSummit": "Join Summit",
    "exploreArt": "Explore Art",
    "eventStartsIn": "Event Starts In",
    "days": "DAYS",
    "hours": "HRS",
    "minutes": "MIN",
    "seconds": "SEC"
  },
  "register": {
    "joinIraqEvents": "Join IraqEvents",
    "createAccountSubtitle": "Create your account to start organizing amazing events",
    "continueWithGoogle": "Continue with Google",
    "orCreateAccount": "Or create account with email",
    "fullNameOptional": "Full Name (Optional)",
    "enterFullName": "Enter your full name",
    "enterEmail": "Enter your email",
    "createPassword": "Create a password (min. 6 characters)",
    "creatingAccount": "Creating account...",
    "createAccount": "Create Account",
    "alreadyHaveAccount": "Already have an account?",
    "signInHere": "Sign in here"
  },
  "navigation": {
    "home": "Home",
    "events": "Events",
    "categories": "Categories",
    "about": "About",
    "login": "Login",
    "logout": "Logout",
    "dashboard": "Dashboard",
    "createEvent": "Create Event",
I should find the categories list with translation keys earlier in the file.

root@66535ad8d509:/workspace/missinggold# rg '"categories": {' -n messages/en.json
rg: regex parse error:
    (?:"categories": {)
                      ^
error: repetition quantifier expects a valid decimal
root@66535ad8d509:/workspace/missinggold# rg '"categories"' -n messages/en.json
7:    "categories": "Categories",
101:  "categories": {
355:    "categories": "Categories",
I need to check around line 101 to understand the relevant categories.

root@66535ad8d509:/workspace/missinggold# sed -n '100,180p' messages/en.json
  },
  "categories": {
    "technologyInnovation": "Technology & Innovation",
    "businessNetworking": "Business & Networking",
    "musicConcerts": "Music & Concerts",
    "artsCulture": "Arts & Culture",
    "sportsFitness": "Sports & Fitness",
    "foodDrink": "Food & Drink",
    "learningDevelopment": "Learning & Development",
    "healthWellness": "Health & Wellness",
    "communitySocial": "Community & Social",
    "gamingEsports": "Gaming & Esports",
    "spiritualReligious": "Spiritual & Religious",
    "familyKids": "Family & Kids",
    "outdoorAdventure": "Outdoor & Adventure",
    "virtualEvents": "Virtual Events",
    "academicConferences": "Academic and Conferences"
  },
  "login": {
    "welcomeBack": "Welcome Back",
    "subtitle": "Sign in to your IraqEvents account",
    "continueWithGoogle": "Continue with Google",
    "orContinueWith": "Or continue with email",
    "emailAddress": "Email Address",
    "emailPlaceholder": "Enter your email",
    "password": "Password",
    "passwordPlaceholder": "Enter your password",
    "signingIn": "Signing in...",
    "signIn": "Sign In",
    "noAccount": "Don't have an account?",
    "createAccount": "Create one here",
    "invalidCredentials": "Invalid email or password",
    "googleSignInError": "Failed to sign in with Google"
  },
  "about": {
    "title": "About IraqEvents",
    "subtitle": "Connecting communities through amazing events",
    "stats": {
      "eventsCreated": "Events Created",
      "happyUsers": "Happy Users",
      "citiesCovered": "Cities Covered",
      "languagesSupported": "Languages Supported"
    },
    "features": {
      "eventDiscovery": {
        "title": "Event Discovery",
        "description": "Find amazing events across Iraq and Kurdistan with our advanced search and filtering system."
      },
      "easyEventCreation": {
        "title": "Easy Event Creation",
        "description": "Create and manage your events with our intuitive event management platform."
      },
      "multiLanguageSupport": {
        "title": "Multi-Language Support",
        "description": "Navigate in Arabic, English, or Sorani Kurdish to make the platform accessible to everyone."
      },
      "mobileFriendly": {
        "title": "Mobile Friendly",
        "description": "Access events and create your own from anywhere with our fully responsive design."
      },
      "flexibleTicketing": {
        "title": "Flexible Ticketing",
        "description": "Support for both free and paid events with secure payment processing."
      },
      "communityFocused": {
        "title": "Community Focused",
        "description": "Connect with event organizers and attendees to build stronger communities."
      }
    },
    "mission": {
      "title": "Our Mission",
      "p1": "We believe that events have the power to bring people together, create lasting memories, and strengthen communities
. Our mission is to make event discovery and creation accessible to everyone across Iraq and Kurdistan.",
      "p2": "Whether you're looking for cultural festivals, business conferences, music concerts, or community gatherings, IraqE
vents is your gateway to discovering what's happening in your city.",
      "p3": "For event organizers, we provide powerful tools to create, promote, and manage events with ease, helping you reach
the right audience and create successful experiences."
    },
    "whyChoose": {
      "title": "Why Choose IraqEvents?",
      "subtitle": "We've built the most comprehensive event platform for Iraq and Kurdistan, designed with our local communities
 in mind."
    },
    "team": {
      "title": "Meet Our Team",
Looks like the translation file lists way more categories than expected—16 instead of 9!

root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' src/app/components/NeonHomepage.tsx
"use client";

import { useState } from 'react';
import Link from 'next/link';
import { useLanguage } from './LanguageProvider';
import { useTranslations } from '../hooks/useTranslations';

interface StoryUser {
  id: string;
  name: string;
  avatar: string;
  count: number;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: 'events' | 'hotels' | 'restaurants' | 'cafes' | 'tourism';
  count: number;
}

export default function NeonHomepage() {
  const { language, isRTL } = useLanguage();
  const { t } = useTranslations();
  const [selectedCity, setSelectedCity] = useState('Baghdad');

  // Story users (mock data)
  const storyUsers: StoryUser[] = [
    { id: '1', name: 'Ahmed M.', avatar: '/api/placeholder/64/64', count: 245 },
    { id: '2', name: 'Sara K.', avatar: '/api/placeholder/64/64', count: 89 },
    { id: '3', name: 'Omar H.', avatar: '/api/placeholder/64/64', count: 156 }
  ];

  // Categories with specific neon colors
  const categories: Category[] = [
    { id: 'events', name: 'Events', icon: '📅', color: 'events', count: 124 },
    { id: 'hotels', name: 'Hotels', icon: '🏨', color: 'hotels', count: 87 },
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156 },
    { id: 'cafes', name: 'Cafes', icon: '☕', color: 'cafes', count: 92 },
    { id: 'tourism', name: 'Tourism', icon: '📸', color: 'tourism', count: 73 }
  ];

  return (
    <div className="min-h-screen">
      {/* Stories Section */}
      <div className="story-section">
        <div className="story-container">
          {/* Add Story Button */}
          <div className="story-avatar add-story">
            <span>+</span>
            <div className="name">Add Story</div>
          </div>

          {/* User Stories */}
          {storyUsers.map((user) => (
            <div key={user.id} className="story-avatar events-glow">
              <img
                src={user.avatar}
                alt={user.name}
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.src = `data:image/svg+xml;base64,${btoa(`
                    <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <rect width="64" height="64" fill="#2D1B4E"/>
                      <circle cx="32" cy="24" r="8" fill="#B24BF3"/>
                      <path d="M16 48c0-8 7-16 16-16s16 8 16 16" fill="#B24BF3"/>
                    </svg>
                  `)}`;
                }}
              />
              <div className="name">{user.name}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Currently Exploring Section */}
      <div className="currently-exploring tourism-glow">
        <h2 className="neon-glow">Currently Exploring</h2>

        <div className="city-name">
          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#00F0FF', textShadow: '0 0 10px #00F0FF' }}>
            Baghdad
          </div>
          <div className="arabic-name">بغداد</div>
          <div style={{ marginTop: '8px', opacity: 0.8 }}>Central Iraq</div>
        </div>

        <p style={{ margin: '16px 0', fontSize: '1.1rem' }}>
          The vibrant capital city
        </p>

        <button className="neon-button tourism" style={{ marginTop: '16px' }}>
          Change City
        </button>

        <button
          className="neon-button tourism"
          style={{ marginTop: '8px', marginLeft: '12px' }}
        >
          Select a City
        </button>
      </div>

      {/* Categories Section */}
      <div style={{ padding: '40px 20px' }}>
        <h2 style={{
          textAlign: 'center',
          fontSize: '2rem',
          marginBottom: '32px',
          color: 'var(--text-primary)',
          textShadow: '0 0 10px var(--events-color)'
        }}>
          Categories
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '24px',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          {categories.map((category) => (
            <Link
              key={category.id}
              href={`/${category.id}`}
              className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
              style={{
                textDecoration: 'none',
                animationDelay: `${categories.indexOf(category) * 0.2}s`
              }}
            >
              <div className="icon" style={{
                fontSize: '3rem',
                filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
              }}>
                {category.icon}
              </div>
              <div className="label" style={{
                fontSize: '1.1rem',
                fontWeight: 'bold',
                color: `var(--${category.color}-color)`,
                textShadow: `0 0 5px var(--${category.color}-color)`
              }}>
                {category.name}
              </div>
              <div style={{
                fontSize: '0.9rem',
                color: 'var(--text-secondary)',
                marginTop: '4px'
              }}>
                {category.count}+ places
              </div>
            </Link>
          ))}
        </div>
      </div>

      {/* Featured Content Sections */}
      <div style={{ padding: '40px 20px' }}>
        {/* Featured Events */}
        <section style={{ marginBottom: '48px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
            <h3 style={{
              fontSize: '1.8rem',
              color: 'var(--text-primary)',
              textShadow: '0 0 5px var(--events-color)'
            }}>
              Featured Events in {selectedCity}
            </h3>
            <Link
              href="/events"
              className="neon-button events"
              style={{ fontSize: '0.9rem', padding: '8px 16px' }}
            >
              See All
            </Link>
          </div>

          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
            gap: '20px'
          }}>
            {/* Sample Featured Event Cards */}
            <div className="neon-card events events-glow featured">
              <div style={{ padding: '20px' }}>
                <div style={{
                  width: '100%',
                  height: '150px',
                  background: 'linear-gradient(135deg, var(--events-color), var(--bg-secondary))',
                  borderRadius: '8px',
                  marginBottom: '16px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '3rem'
                }}>
I suspect the categories data might be in "src/app/categories/page.tsx." Let's verify.

root@66535ad8d509:/workspace/missinggold# find src -maxdepth 3 -name 'categories' -print
src/app/categories
src/app/[locale]/categories
I'll open src/app/categories/page.tsx to look for potential changes.

root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' src/app/categories/page.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import { useTranslations } from "../hooks/useTranslations";
import { useContentOverride } from "../hooks/useContent";

export default function CategoriesPage() {
  const { t } = useTranslations();
  const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');

  const categories = [
    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-500
 to-pink-500' },
    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptions.
technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.busi
nessNetworking'), color: 'from-blue-500 to-cyan-500' },
    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcerts'
), color: 'from-pink-500 to-red-500' },
    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'), col
or: 'from-teal-500 to-blue-500' },
    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitness'
), color: 'from-green-500 to-emerald-500' },
    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color: 'fr
om-yellow-500 to-orange-500' },
    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions.le
arningDevelopment'), color: 'from-violet-500 to-purple-500' },
    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWellne
ss'), color: 'from-emerald-500 to-teal-500' },
    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communityS
ocial'), color: 'from-orange-500 to-red-500' },
    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEsports'
), color: 'from-red-500 to-pink-500' },
    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.spir
itualReligious'), color: 'from-amber-500 to-yellow-500' },
    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'),
color: 'from-sky-500 to-blue-500' },
    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoorAd
venture'), color: 'from-lime-500 to-green-500' },
    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEvents'
), color: 'from-slate-500 to-gray-500' },
    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions.ac
ademicConferences'), color: 'from-rose-500 to-red-500' }
  ];

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      {/* Hero Section */}
      <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 py-16">
        <div className="max-w-7xl mx-auto px-4 text-center">
          <h1 className="text-5xl font-bold text-white mb-6">{t('categoriesPage.title')}</h1>
          <p className="text-xl text-white/90 max-w-3xl mx-auto">
            {categoriesSubtitle?.value || t('categoriesPage.subtitle')}
          </p>
        </div>
      </div>

      {/* Categories Grid */}
      <div className="max-w-7xl mx-auto px-4 py-16">
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {categories.map((category, index) => (
            <div
              key={category.name}
              className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-1
05 group"
            >
              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-6 g
roup-hover:scale-110 transition-transform duration-300`}>
                <span className="text-3xl">{category.icon}</span>
              </div>

              <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-purple-600 transition-colors">
                {category.name}
              </h3>

              <p className="text-gray-600 leading-relaxed mb-6">
                {category.description}
              </p>

              <Link
                href={`/events?category=${encodeURIComponent(category.key)}`}
                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-full
font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
              >
                <span>{t('homepage.exploreEvents')}</span>
                <span>→</span>
              </Link>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 py-16">
        <div className="max-w-4xl mx-auto px-4 text-center">
          <h2 className="text-4xl font-bold text-white mb-6">
            {t('categoriesPage.ctaTitle')}
          </h2>
          <p className="text-xl text-white/90 mb-8">
            {t('categoriesPage.ctaSubtitle')}
          </p>
          <Link
            href="/register"
            className="bg-white text-orange-600 px-8 py-4 rounded-full font-bold text-lg hover:shadow-xl transition-all duration
-300 transform hover:scale-105 inline-flex items-center gap-3"
          >
            <span className="text-2xl">🎆</span>
            {t('events.createYourEvent')}
          </Link>
        </div>
      </div>
    </div>
  );
}root@66535ad8d509:/workspace/missinggold#
The user mentioned nine categories, so I need to check if they refer to the main ones or something else. I'll look into OptimizedNavigation.tsx, MARKETING_REVENUE_STRATEGY.md, and possibly the events.json file to figure this out. There's also mention of grids and subcategories, so I'll explore that data closely.

}root@66535ad8d509:/workspace/missinggold# sed -n '1,120p' public/data/events.json
[
  {
    "id": "1",
    "publicId": "ai-summit-2025",
    "title": "AI Innovation Summit",
    "description": "Explore AI and machine learning breakthroughs with talks, workshops, and networking.",
    "date": "2025-10-10T10:00:00Z",
    "location": "Baghdad Tech Center, Baghdad",
    "category": "Technology & Innovation",
    "price": 50,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Tech Events Iraq", "email": "tech@iraqevents.com" }
  },
  {
    "id": "2",
    "publicId": "music-festival-erbil",
    "title": "Kurdish Music Festival",
    "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary artists.",
    "date": "2025-10-15T18:00:00Z",
    "location": "Citadel Park, Erbil",
    "category": "Music & Concerts",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Kurdistan Arts Council", "email": "arts@kurdistan.org" }
  },
  {
    "id": "3",
    "publicId": "business-workshop-basra",
    "title": "Business Leadership Workshop",
    "description": "Learn essential leadership skills and networking strategies for growth in the Middle East.",
    "date": "2025-10-20T09:00:00Z",
    "location": "Business District, Basra",
    "category": "Business",
    "price": 75,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Business Development Iraq", "email": "business@iraq.com" }
  },
  {
    "id": "4",
    "publicId": "art-exhibition-mosul",
    "title": "Modern Art Exhibition",
    "description": "Contemporary Iraqi and international art featuring 50+ artists.",
    "date": "2025-11-01T14:00:00Z",
    "location": "Culture Center, Mosul",
    "category": "Arts & Culture",
    "price": 30,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
    "user": { "name": "Mosul Cultural Foundation", "email": "culture@mosul.org" }
  },
  {
    "id": "5",
    "publicId": "food-festival-baghdad",
    "title": "Iraqi Food Festival",
    "description": "Taste authentic Iraqi cuisine from various regions with live cooking demos.",
    "date": "2025-11-05T12:00:00Z",
    "location": "Al-Zawra Park, Baghdad",
    "category": "Food & Drink",
    "price": 15,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Baghdad Culinary Society", "email": "food@baghdad.com" }
  },
  {
    "id": "6",
    "publicId": "sports-tournament-sulaymaniyah",
    "title": "Football Championship",
    "description": "Regional football tournament featuring teams across Kurdistan and Iraq.",
    "date": "2025-11-10T16:00:00Z",
    "location": "Sulaymaniyah Stadium, Sulaymaniyah",
    "category": "Sports & Fitness",
    "price": 25,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Kurdistan Football League", "email": "sports@kurdistan.com" }
  },
  {
    "id": "7",
    "publicId": "health-expo-karbala",
    "title": "Health & Wellness Expo",
    "description": "Exhibitions and talks on wellness, nutrition, and preventive care.",
    "date": "2025-11-18T10:00:00Z",
    "location": "Convention Hall, Karbala",
    "category": "Health & Wellness",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
    "user": { "name": "Iraq Health Network", "email": "health@iraq.org" }
  },
  {
    "id": "8",
    "publicId": "community-day-najaf",
    "title": "Community Volunteering Day",
    "description": "Join local organizations for a day of volunteering and community service.",
    "date": "2025-11-22T09:00:00Z",
    "location": "Old City, Najaf",
    "category": "Community & Social",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Najaf Community Org", "email": "community@najaf.org" }
  },
  {
    "id": "9",
    "publicId": "startup-pitch-erbil",
    "title": "Startup Pitch Night",
    "description": "Early-stage startups pitch to mentors and investors. Open networking.",
    "date": "2025-11-25T19:00:00Z",
    "location": "Innovation Hub, Erbil",
    "category": "Business",
    "price": 10,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Erbil Startup Network", "email": "startups@erbil.io" }
  },
  {
    "id": "10",
I'll search for components that might help summarize the app's folder structure and categories.

root@66535ad8d509:/workspace/missinggold# ls public
apple-touch-icon.png  favicon.ico  globe.svg  icons    manifest.json  next.svg  vercel.svg  workbox-f52fd911.js
data                  file.svg     icon.svg   locales  mockups        sw.js     window.svg
The user likely wants a list of 9 main categories and subcategories. I'll check if they appear under public/locales. I'll search "9 categories" across the repo too.

root@66535ad8d509:/workspace/missinggold# rg "nine" -n
I'll check the MARKETING_REVENUE_STRATEGY.md to identify the 9 content categories.

root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' MARKETING_REVENUE_STRATEGY.md
# 🚀 EVENTRA: COMPREHENSIVE MARKETING & REVENUE STRATEGY
## Iraq Launch → Global Expansion Roadmap

---

## 🎯 **EXECUTIVE SUMMARY**

**Mission**: Launch Eventra as the dominant event platform in Iraq, then rapidly scale across the Middle East using AI-powered a
utomation and intelligent localization.

**Strategy**: Start with Iraq's underserved Kurdish and Arabic markets, build automated revenue streams, then replicate the mode
l across 20+ countries with minimal manual intervention.

**Goal**: $10M ARR by Year 2, $50M ARR by Year 3, across 10+ countries.

---

## 🌍 **INTELLIGENT LOCALIZATION STRATEGY**

### **🧠 AI-POWERED GEO-LANGUAGE DETECTION**

#### **Smart Language Selection System**
```javascript
// Auto-detect user's optimal language
const detectOptimalLanguage = (userLocation, browserLang, userHistory) => {
  // Priority order:
  1. User's saved preference (highest priority)
  2. Geo-location + cultural mapping
  3. Browser language detection
  4. Fallback to region default

  // Iraq Example:
  Baghdad → Arabic (default)
  Erbil/Sulaymaniyah → Kurdish (default)
  Tourist areas → English option prominent
}
```

#### **Geo-Cultural Intelligence Map**
```
IRAQ LOCALIZATION:
🏙️ Baghdad: Arabic (primary), English (business)
🏔️ Erbil: Kurdish (primary), Arabic (secondary), English (business)
🏛️ Sulaymaniyah: Kurdish (primary), Arabic (secondary)
🌍 Tourist hotspots: English prominent with local language

UAE LOCALIZATION:
🏙️ Dubai: English (primary), Arabic (secondary)
🏛️ Abu Dhabi: Arabic (primary), English (business)
🏖️ Tourist areas: English (primary), Arabic (cultural events)

TURKEY LOCALIZATION:
🏙️ Istanbul: Turkish (primary), English (business), Kurdish (southeast)
🏔️ Southeast regions: Kurdish (primary), Turkish (secondary)
```

### **🎨 CULTURAL ADAPTATION ENGINE**

#### **Content Customization by Region**
```
EVENT CATEGORIES (Auto-adapted by location):

IRAQ:
- Kurdish Cultural Events (Newroz, traditional festivals)
- Islamic Religious Events (Ramadan, Eid celebrations)
- Business Conferences (oil, tech, trade)
- Family Events (wedding halls, gatherings)
- Educational Seminars (universities, training)

UAE:
- International Business Events (trade shows, conferences)
- Cultural Festivals (multicultural celebrations)
- Sports Events (Formula 1, football)
- Luxury Events (galas, exhibitions)
- Tech & Innovation (startup events, AI conferences)

TURKEY:
- Cultural Heritage Events (historical celebrations)
- Business Conferences (manufacturing, tourism)
- Kurdish Cultural Events (southeast regions)
- International Events (connecting Europe-Asia)
```

---

## 💰 **EXHAUSTIVE REVENUE STREAM ARCHITECTURE**

### **🏆 PRIMARY REVENUE STREAMS (High-Volume)**

#### **1. Event Ticketing Commission (40% of revenue)**
```
PRICING MODEL:
- Free events: $0 commission (build user base)
- Paid events: 2.5% commission (competitive vs Eventbrite's 3-5%)
- Premium events: 3.5% commission (high-value events)
- Corporate events: 4.5% commission (enterprise pricing)

VOLUME PROJECTIONS (Iraq Year 1):
- 1,000 events/month × $50 average ticket × 2.5% = $1,250/month
- Growing to 10,000 events/month × $75 average = $18,750/month
- Annual potential: $150K-$225K from Iraq alone
```

#### **2. Hotel Booking Integration (25% of revenue)**
```
PARTNERSHIP MODEL:
- Commission: 8-12% from hotel bookings
- Average booking: $80/night × 2 nights = $160
- Commission per booking: $13-19
- Cross-sell rate: 15% of event attendees

AUTOMATION:
- AI suggests hotels near event venues
- Dynamic pricing based on event dates
- Package deals (event ticket + hotel)
- Instant booking through API integration

PROJECTED REVENUE:
- 100 hotel bookings/month × $15 commission = $1,500/month
- Growing to 1,000 bookings/month = $15,000/month
- Annual potential: $120K-$180K from Iraq alone
```

#### **3. Travel Package Commissions (15% of revenue)**
```
SERVICES:
- Flight bookings (5-8% commission)
- Car rentals (10-15% commission)
- Tour packages (15-20% commission)
- Complete travel itineraries

AI AUTOMATION:
- Auto-generate travel packages based on events
- Cross-country event recommendations
- Dynamic pricing optimization
- Partnership with regional airlines

REVENUE EXAMPLE:
- Flight booking: $400 × 5% = $20 commission
- Car rental: $100 × 12% = $12 commission
- Tour package: $200 × 18% = $36 commission
- Total per package: $68 commission
- 50 packages/month = $3,400/month
```

### **🎯 SECONDARY REVENUE STREAMS (High-Margin)**

#### **4. Premium Event Listings (10% of revenue)**
```
PREMIUM FEATURES:
- Featured placement: $20-50/event
- Homepage banner: $100-200/event
- Social media promotion: $30-80/event
- Email marketing inclusion: $25-60/event

AUTOMATION:
- Self-service premium upgrade portal
- AI-optimized placement based on user behavior
- Automated social media posting
- Performance analytics dashboard

MONTHLY POTENTIAL:
- 100 premium listings × $35 average = $3,500/month
```

#### **5. Corporate Event Management (8% of revenue)**
```
ENTERPRISE SERVICES:
- Custom event pages: $200-500 per event
- Branded microsites: $500-1,500 per client
- Advanced analytics: $100-300/month per client
- Dedicated support: $200-500/month per client

TARGET CLIENTS (Iraq):
- Oil companies (ExxonMobil, BP, local firms)
- Government agencies (trade ministries)
- International NGOs (UN, World Bank)
- Universities (Baghdad University, American University)

REVENUE POTENTIAL:
- 20 enterprise clients × $400/month = $8,000/month
```

#### **6. Advertising & Sponsored Content (2% of revenue)**
```
AD FORMATS:
- Banner ads: $5-15 CPM
- Sponsored event listings: $50-200 per listing
- Newsletter sponsorships: $100-500 per edition
- Video ads: $10-25 CPM

TARGET ADVERTISERS:
- Event venues (wedding halls, hotels)
- Catering companies
- Photography services
- Travel agencies
- Local businesses

AUTOMATION:
- Programmatic ad serving
- AI-optimized ad placement
- Performance tracking
I’ll check the src/app/api/venues directory to find more details on the categories.

root@66535ad8d509:/workspace/missinggold# rg "grid" src/app -n | head
src/app/about/page.tsx:117:          <div className="grid grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8">
src/app/about/page.tsx:133:          <div className="lg:grid lg:grid-cols-2 lg:gap-16 lg:items-center">
src/app/about/page.tsx:174:          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12">
src/app/about/page.tsx:201:          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">
src/app/about/page.tsx:236:          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-16">
src/app/about/page.tsx:342:          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">
src/app/dashboard/EventList.tsx:43:    <div className="mt-4 grid gap-4">
src/app/dashboard/EventForm.tsx:107:      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
src/app/dashboard/EventForm.tsx:230:      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
src/app/dashboard/content/page.tsx:78:          <div className="grid md:grid-cols-3 gap-4 mb-4">
I'll search for how subcategories are stored in this code, maybe in a script or public.

root@66535ad8d509:/workspace/missinggold# rg "subcategories" -n
I’ll focus on providing an overview of the app’s structure and categories and citing files.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/categories/page.tsx | sed -n '1,200p'
     1  'use client';
     2
     3  import React from 'react';
     4  import Link from 'next/link';
     5  import { useTranslations } from "../hooks/useTranslations";
     6  import { useContentOverride } from "../hooks/useContent";
     7
     8  export default function CategoriesPage() {
     9    const { t } = useTranslations();
    10    const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');
    11
    12    const categories = [
    13      { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-pu
rple-500 to-pink-500' },
    14      { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescr
iptions.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
    15      { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescripti
ons.businessNetworking'), color: 'from-blue-500 to-cyan-500' },
    16      { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicC
oncerts'), color: 'from-pink-500 to-red-500' },
    17      { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCultur
e'), color: 'from-teal-500 to-blue-500' },
    18      { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sports
Fitness'), color: 'from-green-500 to-emerald-500' },
    19      { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), co
lor: 'from-yellow-500 to-orange-500' },
    20      { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescrip
tions.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
    21      { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.heal
thWellness'), color: 'from-emerald-500 to-teal-500' },
    22      { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.co
mmunitySocial'), color: 'from-orange-500 to-red-500' },
    23      { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gaming
Esports'), color: 'from-red-500 to-pink-500' },
    24      { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescripti
ons.spiritualReligious'), color: 'from-amber-500 to-yellow-500' },
    25      { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.family
Kids'), color: 'from-sky-500 to-blue-500' },
    26      { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.o
utdoorAdventure'), color: 'from-lime-500 to-green-500' },
    27      { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtua
lEvents'), color: 'from-slate-500 to-gray-500' },
    28      { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescrip
tions.academicConferences'), color: 'from-rose-500 to-red-500' }
    29    ];
    30
    31    return (
    32      <div className="min-h-screen bg-gray-50 py-8">
    33        {/* Hero Section */}
    34        <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 py-16">
    35          <div className="max-w-7xl mx-auto px-4 text-center">
    36            <h1 className="text-5xl font-bold text-white mb-6">{t('categoriesPage.title')}</h1>
    37            <p className="text-xl text-white/90 max-w-3xl mx-auto">
    38              {categoriesSubtitle?.value || t('categoriesPage.subtitle')}
    39            </p>
    40          </div>
    41        </div>
    42
    43        {/* Categories Grid */}
    44        <div className="max-w-7xl mx-auto px-4 py-16">
    45          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
    46            {categories.map((category, index) => (
    47              <div
    48                key={category.name}
    49                className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover
:scale-105 group"
    50              >
    51                <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-cente
r mb-6 group-hover:scale-110 transition-transform duration-300`}>
    52                  <span className="text-3xl">{category.icon}</span>
    53                </div>
    54
    55                <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-purple-600 transition-colors">
    56                  {category.name}
    57                </h3>
    58
    59                <p className="text-gray-600 leading-relaxed mb-6">
    60                  {category.description}
    61                </p>
    62
    63                <Link
    64                  href={`/events?category=${encodeURIComponent(category.key)}`}
    65                  className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 round
ed-full font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
    66                >
    67                  <span>{t('homepage.exploreEvents')}</span>
    68                  <span>→</span>
    69                </Link>
    70              </div>
    71            ))}
    72          </div>
    73        </div>
    74
    75        {/* CTA Section */}
    76        <div className="bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 py-16">
    77          <div className="max-w-4xl mx-auto px-4 text-center">
    78            <h2 className="text-4xl font-bold text-white mb-6">
    79              {t('categoriesPage.ctaTitle')}
    80            </h2>
    81            <p className="text-xl text-white/90 mb-8">
    82              {t('categoriesPage.ctaSubtitle')}
    83            </p>
    84            <Link
    85              href="/register"
    86              className="bg-white text-orange-600 px-8 py-4 rounded-full font-bold text-lg hover:shadow-xl transition-all
duration-300 transform hover:scale-105 inline-flex items-center gap-3"
    87            >
    88              <span className="text-2xl">🎆</span>
    89              {t('events.createYourEvent')}
    90            </Link>
    91          </div>
    92        </div>
    93      </div>
    94    );
    95  }
I'm reconsidering if I need subcategories. Maybe the user refers to something else, like src/app/(marketing). I'll list public/mockups next.

root@66535ad8d509:/workspace/missinggold# ls public/mockups
explore.html
Let's check public/mockups/explore.html for grid usage.

root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' public/mockups/explore.html
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Hub • Events First + Two-Row Categories</title>
  <style>
    :root{--text:#e5e7eb;--muted:#9ca3af}
    html,body{margin:0;padding:0;background:linear-gradient(180deg,#0b1020,#101a33);color:var(--text);font-family:"Noto Naskh Ar
abic",system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}
    .wrap{max-width:420px;margin:0 auto}
    .bar{display:flex;justify-content:space-between;align-items:center;padding:14px 16px}
    select{background:#0d1530;color:#fff;border:1px solid rgba(255,255,255,.08);padding:10px;border-radius:12px;direction:rtl;te
xt-align:right;font-family:inherit}
    .lang button{background:rgba(34,211,238,.15);border:1px solid rgba(34,211,238,.4);color:#a5f3fc;border-radius:999px;padding:
6px 10px;font-size:12px;margin-inline-start:6px}
    .section{padding:10px 16px}
    .card{background:linear-gradient(180deg,#0b1220,#0e1730);border:1px solid rgba(255,255,255,.06);border-radius:16px;box-shado
w:0 10px 30px rgba(0,0,0,.35)}
    .events{padding:14px}
    .row{display:flex;align-items:center;gap:12px;flex-wrap:wrap}
    .title{font-weight:900}
    .chips{display:flex;gap:8px;margin-top:10px;overflow:auto}
    .chip{background:rgba(167,139,250,.15);border:1px solid rgba(167,139,250,.4);color:#ddd;border-radius:999px;padding:8px 10px
;font-size:12px;white-space:nowrap}
    .chip.accent{background:rgba(34,211,238,.2);border-color:rgba(34,211,238,.5)}
    .tiles{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:14px}
    .tile{border-radius:14px;padding:14px;background:linear-gradient(160deg,rgba(167,139,250,.10),rgba(34,211,238,.10));border:1
px solid rgba(255,255,255,.06);text-decoration:none;color:inherit;display:flex;align-items:center;gap:8px}
    .ic{font-size:20px}
    .tt{font-weight:800;font-size:14px}
    .foot{opacity:.7;text-align:center;font-size:12px;padding:10px 0 20px}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="bar">
      <div>🌆 <select id="city"><option>هەولێر</option><option>بەغدا</option><option>سلێمانی</option><option>مووسڵ</option><opti
on>کەرکووک</option></select></div>
      <div class="lang"><button id="ar">العربية</button><button id="ku">کوردی</button></div>
    </div>

    <!-- Events: separate, time-based controls -->
    <div class="section">
      <div class="card events">
        <div class="row">
          <div class="title" id="ev">الفعاليات</div>
        </div>
        <div class="chips" style="margin-top:12px">
          <div class="chip accent" id="today">اليوم</div>
          <div class="chip" id="week">هذا الأسبوع</div>
          <div class="chip" id="next">الأسبوع القادم</div>
          <div class="chip" id="month">حسب الشهر</div>
        </div>
        <div class="chips" style="margin-top:8px" id="months">
          <div class="chip">يناير</div><div class="chip">فبراير</div><div class="chip">مارس</div><div class="chip">أبريل</div>
        </div>
      </div>
    </div>

    <!-- Two-row categories: compact tiles with small icons -->
    <div class="section">
      <div class="card">
        <div class="tiles">
          <a class="tile" href="#"><div class="ic">🏨</div><div class="tt" id="h">الفنادق</div></a>
          <a class="tile" href="#"><div class="ic">🍽️</div><div class="tt" id="r">المطاعم</div></a>
          <a class="tile" href="#"><div class="ic">☕</div><div class="tt" id="c">المقاهي</div></a>
          <a class="tile" href="#"><div class="ic">🗺️</div><div class="tt" id="t">الأماكن السياحية</div></a>
        </div>
      </div>
    </div>

    <div class="foot">نموذج: الفعاليات منفصلة مع فلاتر زمنية + شبكتان للفئات الثابتة</div>
  </div>

  <script>
    const D={ar:{ev:"الفعاليات",today:"اليوم",week:"هذا الأسبوع",next:"الأسبوع القادم",month:"حسب الشهر",months:["يناير","فبراير
","مارس","أبريل"],h:"الفنادق",r:"المطاعم",c:"المقاهي",t:"الأماكن السياحية"},
             ku:{ev:"بۆنەکان",today:"ئەمڕۆ",week:"ئەم هەفتە",next:"هەفتەی داهاتوو",month:"بەپێی مانگ",months:["کانونی دووەم","شو
بات","ئازار","نیسان"],h:"هۆتێلەکان",r:"چێشتخانەکان",c:"قه‌وەخانه‌کان",t:"شوێنە گەشتیاریەکان"}};
    function set(l){
      document.getElementById('ev').textContent=D[l].ev;
      document.getElementById('today').textContent=D[l].today;
      document.getElementById('week').textContent=D[l].week;
      document.getElementById('next').textContent=D[l].next;
      document.getElementById('month').textContent=D[l].month;
      document.getElementById('months').innerHTML='';
      D[l].months.forEach(m=>{const x=document.createElement('div');x.className='chip';x.textContent=m;months.appendChild(x)});
      document.getElementById('h').textContent=D[l].h;
      document.getElementById('r').textContent=D[l].r;
      document.getElementById('c').textContent=D[l].c;
      document.getElementById('t').textContent=D[l].t;
    }
    document.getElementById('ar').onclick=()=>set('ar');
    document.getElementById('ku').onclick=()=>set('ku');
    set('ar');
  </script>
</body>
</html>
User wants 9 categories, need to search the repo for a list, possibly under technologyInnovation.

root@66535ad8d509:/workspace/missinggold# rg "technologyInnovation" -n
scripts/add-missing-translations.js
24:    "technologyInnovation": {

messages/en.json
102:    "technologyInnovation": "Technology & Innovation",
310:    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",

messages/ar.json
104:    "technologyInnovation": "التكنولوجيا والابتكار",
324:    "technologyInnovation": "لقاءات تقنية، هاكاثونات، وعروض ابتكار",

src/app/dashboard/EventForm.tsx
147:            <option value="technologyInnovation">{t('categories.technologyInnovation')}</option>

messages/ku.json
189:    "technologyInnovation": "تەکنەلۆژیا و نوێکاری",
353:    "technologyInnovation": "وتووێژی تەکنەلۆژیا و پێشانگای نوێکاری",

src/app/[locale]/events/page.tsx
63:    { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
296:      "Technology & Innovation": "categories.technologyInnovation",

src/app/[locale]/categories/page.tsx
29:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },

public/locales/ar/common.json
124:    "technologyInnovation": "التكنولوجيا والابتكار",
412:    "technologyInnovation": "أحدث التقنيات والذكاء الاصطناعي والابتكار الرقمي",

public/locales/en/common.json
124:    "technologyInnovation": "Technology & Innovation",
384:    "technologyInnovation": "Latest in tech, AI, and digital innovation",

public/locales/ku/common.json
118:    "technologyInnovation": "تەکنەلۆژیا و نوێکاری",
406:    "technologyInnovation": "نوێترین تەکنەلۆژیا و AI و داهێنانی دیجیتاڵی",

src/app/categories/page.tsx
14:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },

src/app/page-original.tsx
60:    { name: t('categories.technologyInnovation'), icon: "💻" },
226:      'technologyinnovation': 'categories.technologyInnovation',
242:      'tech': 'categories.technologyInnovation',
243:      'technology': 'categories.technologyInnovation',

src/app/components/EventDetailsModal.tsx
36:    "Technology & Innovation": "categories.technologyInnovation",

src/app/components/SimpleLanguageProvider.tsx
30:  'categories.technologyInnovation': 'Technology & Innovation',
I should check public/locales/en/common.json for possible subcategories and more detailed translations.

root@66535ad8d509:/workspace/missinggold# sed -n '360,460p' public/locales/en/common.json
    "slide4": {
      "title": "Modern Art Exhibition",
      "subtitle": "Art & Culture",
      "description": "Discover contemporary Iraqi and Kurdish art"
    },
    "attendees": "Attendees",
    "sessions": "Sessions",
    "days": "Days",
    "artists": "Artists",
    "stages": "Stages",
    "hours": "Hours",
    "leaders": "Leaders",
    "companies": "Companies",
    "workshops": "Workshops",
    "artworks": "Artworks",
    "galleries": "Galleries"
  },
  "meta": {
    "title": "IraqEvents - Discover Amazing Events in Iraq",
    "description": "The premier event platform for Iraq. Discover concerts, conferences, festivals, and community events across
Baghdad, Erbil, Basra, and all Iraqi cities.",
    "appTitle": "IraqEvents"
  },
  "categoryDescriptions": {
    "all": "All Categories",
    "technologyInnovation": "Latest in tech, AI, and digital innovation",
    "businessNetworking": "Professional development and networking opportunities",
    "musicConcerts": "Live music performances and concerts",
    "artsCulture": "Art exhibitions, cultural events, and heritage",
    "sportsFitness": "Sports events, fitness activities, and wellness",
    "foodDrink": "Culinary experiences, food festivals, and tastings",
    "learningDevelopment": "Educational workshops and skill development",
    "healthWellness": "Health, wellness, and mental health events",
    "communitySocial": "Community gatherings and social events",
    "gamingEsports": "Gaming tournaments and esports competitions",
    "spiritualReligious": "Religious ceremonies and spiritual gatherings",
    "familyKids": "Family-friendly events and kids activities",
    "outdoorAdventure": "Outdoor activities and adventure sports",
    "virtualEvents": "Online events and virtual experiences",
    "academicConferences": "Academic conferences and research presentations"
  },
  "categoriesPage": {
    "title": "Event Categories",
    "subtitle": "Discover events that match your interests",
    "ctaTitle": "Ready to Create Your Event?",
    "ctaSubtitle": "Join thousands of event organizers using our platform"
  },
  "reset": {
    "emailSent": "Reset email sent successfully",
    "sending": "Sending...",
    "sendResetLink": "Send Reset Link"
  },
  "demo": {
    "events": {
      "aiSummit": {
        "title": "AI Innovation Summit",
        "description": "Join us for a comprehensive exploration of artificial intelligence and machine learning technologies tha
t are shaping the future.",
        "location": "Baghdad Tech Center, Baghdad",
        "category": "Technology & Innovation"
      },
      "musicFestival": {
        "title": "Kurdish Music Festival",
        "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary Kurdish artists.",
        "location": "Central Park, Erbil",
        "category": "Music & Concerts"
      },
      "businessWorkshop": {
        "title": "Business Leadership Workshop",
        "description": "Learn essential leadership skills and networking strategies for business growth in the Middle East marke
t.",
        "location": "Business District, Basra",
        "category": "Business & Networking"
      },
      "artExhibition": {
        "title": "Modern Art Exhibition",
        "description": "Discover contemporary Iraqi and international art in this groundbreaking exhibition featuring 50+ artist
s.",
        "location": "Culture Center, Mosul",
        "category": "Arts & Culture"
      }
    }
  }
}root@66535ad8d509:/workspace/missinggold#
I see categories listed in this file, but I'm wondering if subcategories are in another file.

}root@66535ad8d509:/workspace/missinggold# nl -ba src/app/[locale]/events/page.tsx | sed -n '1,200p'
     1  "use client";
     2
     3  import Link from "next/link";
     4  import React, { useState, useEffect } from "react";
     5  import EventImage from "../../components/EventImage";
     6  import EventDetailsModal from "../../components/EventDetailsModal";
     7  import ResponsiveButton from "../../components/ResponsiveButton";
     8  import { useLanguage } from "../../components/LanguageProvider";
     9  import { useTranslations } from "../../hooks/useTranslations";
    10
    11  interface Event {
    12    id: string;
    13    publicId: string;
    14    title: string;
    15    description: string;
    16    date: string;
    17    location: string;
    18    category?: string;
    19    price?: number;
    20    isFree?: boolean;
    21    imageUrl?: string;
    22    user?: {
    23      name?: string;
    24      email: string;
    25    };
    26  }
    27
    28  interface EventsPageProps {
    29    params: Promise<{ locale: string }>;
    30  }
    31
    32  export default function EventsPage({ params }: EventsPageProps) {
    33    const [events, setEvents] = useState<Event[]>([]);
    34    const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);
    35    const [loading, setLoading] = useState(true);
    36    const [searchQuery, setSearchQuery] = useState("");
    37    const [selectedCategory, setSelectedCategory] = useState("");
    38    const [selectedCity, setSelectedCity] = useState("");
    39    const [selectedMonth, setSelectedMonth] = useState("");
    40    const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
    41    const [isModalOpen, setIsModalOpen] = useState(false);
    42    const [locale, setLocale] = useState<string>("en");
    43
    44    const { language, isRTL, setLanguage } = useLanguage();
    45    const { t } = useTranslations();
    46
    47    // Get locale from params
    48    useEffect(() => {
    49      const getLocale = async () => {
    50        const resolvedParams = await params;
    51        setLocale(resolvedParams.locale);
    52        // Update language context to match the URL locale
    53        if (['en', 'ar', 'ku'].includes(resolvedParams.locale)) {
    54          setLanguage(resolvedParams.locale as 'en' | 'ar' | 'ku');
    55        }
    56      };
    57      getLocale();
    58    }, [params, setLanguage]);
    59
    60    // Use translated categories
    61    const categories = [
    62      { name: t('common.allCategories'), icon: "🎉", key: 'all' },
    63      { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
    64      { name: t('categories.businessNetworking'), icon: "💼", key: 'businessNetworking' },
    65      { name: t('categories.musicConcerts'), icon: "🎵", key: 'musicConcerts' },
    66      { name: t('categories.artsCulture'), icon: "🎨", key: 'artsCulture' },
    67      { name: t('categories.sportsFitness'), icon: "⚽", key: 'sportsFitness' },
    68      { name: t('categories.foodDrink'), icon: "🍽️", key: 'foodDrink' },
    69      { name: t('categories.learningDevelopment'), icon: "📚", key: 'learningDevelopment' },
    70      { name: t('categories.healthWellness'), icon: "🏥", key: 'healthWellness' },
    71      { name: t('categories.communitySocial'), icon: "👥", key: 'communitySocial' },
    72      { name: t('categories.gamingEsports'), icon: "🎮", key: 'gamingEsports' },
    73      { name: t('categories.spiritualReligious'), icon: "🕌", key: 'spiritualReligious' },
    74      { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦", key: 'familyKids' },
    75      { name: t('categories.outdoorAdventure'), icon: "🏔️", key: 'outdoorAdventure' },
    76      { name: t('categories.virtualEvents'), icon: "📱", key: 'virtualEvents' },
    77      { name: t('categories.academicConferences'), icon: "🎓", key: 'academicConferences' }
    78    ];
    79
    80    // Use translated cities
    81    const cities = [
    82      t('common.allCities'),
    83      t('cities.baghdad'),
    84      t('cities.basra'),
    85      t('cities.mosul'),
    86      t('cities.erbil'),
    87      t('cities.sulaymaniyah'),
    88      t('cities.duhok'),
    89      t('cities.kirkuk'),
    90      t('cities.anbar'),
    91      t('cities.najaf'),
    92      t('cities.karbala')
    93    ];
    94
    95    // Use translated months (memoized)
    96    const months = React.useMemo(() => ([
    97      t('common.allMonths'),
    98      t('months.january'), t('months.february'), t('months.march'),
    99      t('months.april'), t('months.may'), t('months.june'),
   100      t('months.july'), t('months.august'), t('months.september'),
   101      t('months.october'), t('months.november'), t('months.december')
   102    ]), [language]);
   103
   104    // Initialize filter states with translations when they're loaded
   105    useEffect(() => {
   106      if (t && selectedCategory === '') {
   107        setSelectedCategory(t('common.allCategories'));
   108        setSelectedCity(t('common.allCities'));
   109        setSelectedMonth(t('common.allMonths'));
   110      }
   111    }, [t, selectedCategory, selectedCity, selectedMonth]);
   112
   113    // Fetch events
   114    useEffect(() => {
   115      const fetchEvents = async () => {
   116        try {
   117          const response = await fetch(`/api/events?type=public&lang=${locale}`);
   118          if (response.ok) {
   119            const eventsData = await response.json();
   120            setEvents(eventsData);
   121            setFilteredEvents(eventsData);
   122          } else {
   123            console.error('Failed to fetch events');
   124            // Set some demo events for now
   125            setEvents(demoEvents);
   126            setFilteredEvents(demoEvents);
   127          }
   128        } catch (error) {
   129          console.error('Error fetching events:', error);
   130          // Set some demo events for now
   131          setEvents(demoEvents);
   132          setFilteredEvents(demoEvents);
   133        } finally {
   134          setLoading(false);
   135        }
   136      };
   137
   138      if (locale) {
   139        fetchEvents();
   140      }
   141    }, [locale]);
   142
   143    // Demo events for when database is empty
   144    const demoEvents: Event[] = [
   145      {
   146        id: "1",
   147        publicId: "ai-summit-2025",
   148        title: t('demo.events.aiSummit.title'),
   149        description: t('demo.events.aiSummit.description'),
   150        date: "2025-03-15T10:00:00Z",
   151        location: t('demo.events.aiSummit.location'),
   152        category: t('demo.events.aiSummit.category'),
   153        price: 50,
   154        isFree: false,
   155        imageUrl: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
   156        user: { name: "Tech Events Iraq", email: "tech@iraqevents.com" }
   157      },
   158      {
   159        id: "2",
   160        publicId: "music-festival-erbil",
   161        title: t('demo.events.musicFestival.title'),
   162        description: t('demo.events.musicFestival.description'),
   163        date: "2025-03-20T18:00:00Z",
   164        location: t('demo.events.musicFestival.location'),
   165        category: t('demo.events.musicFestival.category'),
   166        price: 0,
   167        isFree: true,
   168        imageUrl: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
   169        user: { name: "Kurdistan Arts Council", email: "arts@kurdistan.org" }
   170      },
   171      {
   172        id: "3",
   173        publicId: "business-workshop-basra",
   174        title: t('demo.events.businessWorkshop.title'),
   175        description: t('demo.events.businessWorkshop.description'),
   176        date: "2025-03-25T09:00:00Z",
   177        location: t('demo.events.businessWorkshop.location'),
   178        category: t('demo.events.businessWorkshop.category'),
   179        price: 75,
   180        isFree: false,
   181        imageUrl: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
   182        user: { name: "Business Development Iraq", email: "business@iraq.com" }
   183      },
   184      {
   185        id: "4",
   186        publicId: "art-exhibition-mosul",
   187        title: t('demo.events.artExhibition.title'),
   188        description: t('demo.events.artExhibition.description'),
   189        date: "2025-04-01T14:00:00Z",
   190        location: t('demo.events.artExhibition.location'),
   191        category: t('demo.events.artExhibition.category'),
   192        price: 30,
   193        isFree: false,
   194        imageUrl: "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&
q=80",
   195        user: { name: "Mosul Cultural Foundation", email: "culture@mosul.org" }
   196      },
   197      {
   198        id: "5",
   199        publicId: "food-festival-baghdad",
   200        title: "Iraqi Food Festival",
I'll keep going to see if there's a categoryMap or subcategory references.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/[locale]/events/page.tsx | sed -n '200,400p'
   200        title: "Iraqi Food Festival",
   201        description: "Taste authentic Iraqi cuisine from various regions, featuring traditional recipes and modern interpr
etations.",
   202        date: "2025-04-05T12:00:00Z",
   203        location: "Al-Zawra Park, Baghdad",
   204        category: "Food & Drink",
   205        price: 15,
   206        isFree: false,
   207        imageUrl: "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
   208        user: { name: "Baghdad Culinary Society", email: "food@baghdad.com" }
   209      },
   210      {
   211        id: "6",
   212        publicId: "sports-tournament-sulaymaniyah",
   213        title: "Football Championship",
   214        description: "Regional football tournament featuring teams from across Kurdistan and Iraq competing for the champi
onship.",
   215        date: "2025-04-10T16:00:00Z",
   216        location: "Sulaymaniyah Stadium, Sulaymaniyah",
   217        category: "Sports & Fitness",
   218        price: 25,
   219        isFree: false,
   220        imageUrl: "https://images.unsplash.com/photo-1431324155629-1a6deb1dec8d?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
   221        user: { name: "Kurdistan Football League", email: "sports@kurdistan.com" }
   222      }
   223    ];
   224
   225    // Filter events
   226    useEffect(() => {
   227      let filtered = events;
   228
   229      // Search filter
   230      if (searchQuery) {
   231        filtered = filtered.filter(event =>
   232          event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
   233          event.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
   234          event.location.toLowerCase().includes(searchQuery.toLowerCase())
   235        );
   236      }
   237
   238      // Category filter
   239      if (selectedCategory !== t('common.allCategories')) {
   240        filtered = filtered.filter(event => event.category === selectedCategory);
   241      }
   242
   243      // City filter
   244      if (selectedCity !== t('common.allCities')) {
   245        filtered = filtered.filter(event =>
   246          event.location.toLowerCase().includes(selectedCity.toLowerCase())
   247        );
   248      }
   249
   250      // Month filter
   251      if (selectedMonth !== t('common.allMonths')) {
   252        const monthIndex = months.indexOf(selectedMonth) - 1; // -1 because months array includes "All Months"
   253        filtered = filtered.filter(event => {
   254          const eventDate = new Date(event.date);
   255          return eventDate.getMonth() === monthIndex;
   256        });
   257      }
   258
   259      setFilteredEvents(filtered);
   260    }, [events, searchQuery, selectedCategory, selectedCity, selectedMonth, t, language]);
   261
   262    const clearAllFilters = () => {
   263      setSearchQuery("");
   264      setSelectedCategory(t('common.allCategories'));
   265      setSelectedCity(t('common.allCities'));
   266      setSelectedMonth(t('common.allMonths'));
   267    };
   268
   269    const formatDate = (dateString: string) => {
   270      const date = new Date(dateString);
   271      const localeCode = language === 'ar' ? 'ar-IQ' : language === 'ku' ? 'ckb-IQ' : 'en-US';
   272      return date.toLocaleDateString(localeCode, {
   273        weekday: 'long',
   274        year: 'numeric',
   275        month: 'long',
   276        day: 'numeric',
   277        hour: '2-digit',
   278        minute: '2-digit'
   279      });
   280    };
   281
   282    const handleViewDetails = (event: Event, e: React.MouseEvent) => {
   283      e.preventDefault();
   284      setSelectedEvent(event);
   285      setIsModalOpen(true);
   286    };
   287
   288    const getCategoryIcon = (categoryName: string) => {
   289      const category = categories.find(cat => cat.name === categoryName);
   290      return category ? category.icon : "🎉";
   291    };
   292
   293    const translateCategory = (categoryName: string): string => {
   294      // Map English category names to translation keys
   295      const categoryMap: { [key: string]: string } = {
   296        "Technology & Innovation": "categories.technologyInnovation",
   297        "Business & Networking": "categories.businessNetworking",
   298        "Business": "categories.businessNetworking", // Handle variations
   299        "Music & Concerts": "categories.musicConcerts",
   300        "Arts & Culture": "categories.artsCulture",
   301        "Sports & Fitness": "categories.sportsFitness",
   302        "Food & Drink": "categories.foodDrink",
   303        "Learning & Development": "categories.learningDevelopment",
   304        "Health & Wellness": "categories.healthWellness",
   305        "Community & Social": "categories.communitySocial",
   306        "Gaming & Esports": "categories.gamingEsports",
   307        "Spiritual & Religious": "categories.spiritualReligious",
   308        "Family & Kids": "categories.familyKids",
   309        "Outdoor & Adventure": "categories.outdoorAdventure",
   310        "Virtual Events": "categories.virtualEvents",
   311        "Academic and Conferences": "categories.academicConferences"
   312      };
   313
   314      const translationKey = categoryMap[categoryName];
   315      return translationKey ? t(translationKey) : categoryName;
   316    };
   317
   318    const getEventImageCategory = (category: string) => {
   319      const mapping: { [key: string]: string } = {
   320        "Music & Concerts": "music",
   321        "Sports & Fitness": "sports",
   322        "Food & Drink": "food",
   323        "Business": "business",
   324        "Technology & Innovation": "tech",
   325        "Arts & Culture": "art",
   326        "Health & Wellness": "health",
   327        "Community & Social": "community"
   328      };
   329      return mapping[category] || "community";
   330    };
   331
   332    if (loading) {
   333      return (
   334        <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 flex items-center justify-cen
ter">
   335          <div className="text-center">
   336            <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-purple-600 mx-auto mb-4"></div>
   337            <h2 className="text-2xl font-bold text-gray-900 mb-2">{t('homepage.loading')}</h2>
   338            <p className="text-gray-600">{t('events.subtitle')}</p>
   339          </div>
   340        </div>
   341      );
   342    }
   343
   344    return (
   345      <div className={`min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 ${isRTL ? 'text-right' : 'text
-left'}`}>
   346        {/* Header Section */}
   347        <div className="bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-500 py-16">
   348          <div className="max-w-7xl mx-auto px-4">
   349            <div className="text-center mb-12">
   350              <div className="inline-block bg-white/20 backdrop-blur-md px-6 py-3 rounded-full border border-white/30 mb-6
">
   351                <span className="text-white font-semibold">📅 {t('homepage.allEvents')}</span>
   352              </div>
   353              <h1 className="text-5xl md:text-6xl font-bold text-white mb-6">
   354                {t('events.title')}
   355              </h1>
   356              <p className="text-xl text-white/90 max-w-3xl mx-auto">
   357                {t('events.subtitle')}
   358              </p>
   359            </div>
   360
   361            {/* Search and Filter Section */}
   362            <div className="max-w-6xl mx-auto">
   363              {/* Search Bar */}
   364              <div className="mb-8">
   365                <div className="relative max-w-2xl mx-auto">
   366                  <input
   367                    type="text"
   368                    value={searchQuery}
   369                    onChange={(e) => setSearchQuery(e.target.value)}
   370                    placeholder={t('events.searchPlaceholder')}
   371                    className="w-full px-6 py-4 rounded-full text-lg border border-gray-300 focus:border-blue-500 focus:ri
ng-2 focus:ring-blue-200 outline-none"
   372                  />
   373                  <div className="absolute right-2 top-2 bg-blue-500 text-white p-2 rounded-full">
   374                    🔍
   375                  </div>
   376                </div>
   377              </div>
   378
   379              {/* Filter Controls - Clean 3 Filters */}
   380              <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
   381                <select
   382                  value={selectedCategory}
   383                  onChange={(e) => setSelectedCategory(e.target.value)}
   384                  className="px-4 py-3 rounded-lg border border-gray-300 bg-white text-gray-800 font-medium focus:border-b
lue-500 focus:ring-2 focus:ring-blue-200 outline-none"
   385                >
   386                  {categories.map(cat => (
   387                    <option key={cat.name} value={cat.name}>
   388                      {cat.icon} {cat.name}
   389                    </option>
   390                  ))}
   391                </select>
   392
   393                <select
   394                  value={selectedCity}
   395                  onChange={(e) => setSelectedCity(e.target.value)}
   396                  className="px-4 py-3 rounded-lg border border-gray-300 bg-white text-gray-800 font-medium focus:border-b
lue-500 focus:ring-2 focus:ring-blue-200 outline-none"
   397                >
   398                  {cities.map(city => (
   399                    <option key={city} value={city}>📍 {city}</option>
   400                  ))}
I'll look up the marketing doc for category details to clarify the top 9.

root@66535ad8d509:/workspace/missinggold# rg "Category" MARKETING_REVENUE_STRATEGY.md
I should check if IMPLEMENTATION_GUIDE.md or other guides are available.

root@66535ad8d509:/workspace/missinggold# rg "Categories" -n *.md
STEP_3_COMPLETION_REPORT.md
75:- ✅ **Lines 17-18:** `"All Cities"` and `"All Categories"` → Dynamic initialization with `t()`

PERFORMANCE_OPTIMIZATION_REPORT.md
112:│   ├── useCategories() - Data transformation

I18N_IMPLEMENTATION_SUMMARY.md
20:- **✅ Navigation Menu**: All nav items translated (Home, Events, Categories, etc.)

NAVIGATION_LOCALE_FIX_MEMORY.md
90:2. **Categories Page 404 Error**:
109:2. **Categories Page 404**: ✅ `/ku/categories` now works (200 response)

UI_IMPROVEMENTS.md
90:- **Categories**: Events, Hotels, Restaurants, Cafes, Tourism

QUICK_REFERENCE.md
134:// Categories

PRACTICAL_MULTI_COUNTRY_GUIDE.md
33:// Categories: Luxury Events, Business Networking, Desert Adventures
69:import { getCountryCities, getCountryCategories } from '../lib/countries';
77:  const categories = getCountryCategories(countryCode);
120:Categories: Tech, Music, Business
128:Categories: Luxury Events, Desert Adventures, Business Networking
I'll review the lines in UI_IMPROVEMENTS.md related to categories.

root@66535ad8d509:/workspace/missinggold# sed -n '80,130p' UI_IMPROVEMENTS.md
3. Modal pops up with all cities
4. Click any city card
5. Watch the interface update instantly!

### Language Switcher:
1. Look for 🌐 globe icon in navigation
2. Hover to see language options
3. Select: English, العربية, or کوردی

### Browse Content:
- **Categories**: Events, Hotels, Restaurants, Cafes, Tourism
- **Featured Events**: See upcoming events in selected city
- **Quick Actions**: Create Event, Explore, Find Hotels

---

## 📁 Files Modified

1. `src/app/components/OptimizedNeonHomepage.tsx`
   - Added CITIES array
   - Implemented city selector modal
   - Dynamic city/region display

2. `src/app/components/LanguageProvider.tsx`
   - Fixed hydration mismatch
   - Consistent initial state

3. `src/app/components/Navigation.tsx`
   - Added suppressHydrationWarning
   - Fixed language display

4. `src/app/components/SessionProviderWrapper.tsx`
   - New file for NextAuth

5. `src/app/components/ClientLayout.tsx`
   - Wrapped with SessionProvider

6. `src/app/layout.tsx`
   - Server-side session fetching
   - Async layout

7. `src/lib/auth.ts`
   - Enhanced error logging

8. `src/app/globals.css`
   - Added responsive grid classes
   - CSS media queries for mobile/tablet/desktop

9. `src/app/hooks/useOptimizedState.ts`
   - Fixed useWindowSize SSR issue
The user's expecting 9 categories, so I'll check QUICK_REFERENCE.md for more details.

root@66535ad8d509:/workspace/missinggold# sed -n '120,160p' QUICK_REFERENCE.md
```

### Common Patterns

```typescript
// Card grids
<CardSkeleton count={6} />

// Lists
<ListSkeleton count={5} />

// Tables
<TableSkeleton rows={5} columns={4} />

// Categories
<CategoryGridSkeleton count={5} />
```

---

## 🛡️ Error Handling

### Basic Error Boundary

```typescript
<ErrorBoundary>
  <YourComponent />
</ErrorBoundary>
```

### With Custom Fallback

```typescript
<ErrorBoundary
  fallback={<CustomError />}
  onError={(error) => logToSentry(error)}
>
  <YourComponent />
</ErrorBoundary>
```
I'll check the documents for references to "grid" or "9" to find the categories.

root@66535ad8d509:/workspace/missinggold# rg "grid" -n *.md | head
PERFORMANCE_OPTIMIZATION_REPORT.md:181:- `CategoryGridSkeleton` - For category grids
DEPLOYMENT_VERIFICATION.md:141:- ✅ CategoryGridSkeleton (category grids)
IMPLEMENTATION_GUIDE.md:182:    <div className="grid grid-cols-3 gap-4">
QUICK_REFERENCE.md:125:// Card grids
UI_IMPROVEMENTS.md:62:- ✅ Responsive grid layouts
UI_IMPROVEMENTS.md:125:   - Added responsive grid classes
I suspect the user means 9 categories for marketing, so I'll search for "Category grid."

root@66535ad8d509:/workspace/missinggold# rg "Category" STRATEGIC_PLATFORM_ANALYSIS.md
I'll start by checking the README to understand the folder structure and key features.

root@66535ad8d509:/workspace/missinggold# sed -n '1,160p' README.md
# Missinggold - Event Management Platform

A comprehensive event management and venue platform for Iraq & Kurdistan, featuring hotels, restaurants, activities, and enterta
inment venues.

## Features

- 🎯 **Multi-language Support**: English, Arabic, and Kurdish
- 🏨 **Venue Management**: Hotels, restaurants, cafes, and tourism activities
- 📱 **Progressive Web App**: Offline-capable mobile experience
- 🔐 **Authentication**: Secure user authentication with NextAuth.js
- 💎 **Modern Stack**: Next.js 15, React 19, TypeScript, Prisma
- 🎨 **Beautiful UI**: Tailwind CSS with responsive design
- 🌍 **RTL Support**: Full right-to-left language support

## Quick Start

### Prerequisites

- Node.js 18+
- PostgreSQL database
- Prisma CLI

### Installation

```bash
# Clone the repository
git clone https://github.com/absulysuly/missinggold.git
cd missinggold

# Install dependencies
npm ci

# Set up environment variables
cp .env.example .env.local
# Edit .env.local with your database URL and other secrets

# Set up the database
npm run db:deploy
npm run db:seed

# Start development server
npm run dev
```

Visit [http://localhost:3000](http://localhost:3000) to see the application.

## Environment Variables

Create a `.env.local` file in the root directory with the following variables:

```bash
# Database
DATABASE_URL="postgresql://user:password@localhost:5432/missinggold"

# Authentication
NEXTAUTH_SECRET="your-nextauth-secret-here"
NEXTAUTH_URL="http://localhost:3000"

# Rate Limiting (Upstash Redis)
UPSTASH_REDIS_REST_URL="your-upstash-url"
UPSTASH_REDIS_REST_TOKEN="your-upstash-token"

# Email (Resend)
RESEND_API_KEY="your-resend-api-key"

# Analytics (Optional)
SENTRY_DSN="your-sentry-dsn"
```

## Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint
- `npm run type-check` - Run TypeScript checking
- `npm run db:migrate` - Run database migrations
- `npm run db:seed` - Seed database with initial data

## Deployment

See [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed production deployment instructions.

## Project Structure

```
├── src/
│   ├── app/              # Next.js app router pages
│   ├── components/       # Reusable React components
│   ├── lib/              # Utility libraries
│   └── types/            # TypeScript type definitions
├── prisma/              # Database schema and migrations
├── public/              # Static assets
├── messages/            # i18n translation files
└── scripts/             # Build and maintenance scripts
```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Security

If you discover any security issues, please email [security@example.com](mailto:security@example.com) instead of using the issue
 tracker.

**Note**: After deployment, rotate all secrets that were removed during repository extraction.
I'll search in common.json and the MULTI_COUNTRY_SCALING_STRATEGY for relevant subcategories.

root@66535ad8d509:/workspace/missinggold# rg "categories" MULTI_COUNTRY_SCALING_STRATEGY.md
133:-- UAE-specific event categories
134:INSERT INTO categories (country, name_en, name_ar) VALUES
155:- Local cultural event categories
179:    features: ['credit_cards', 'luxury_categories']
I should check the surrounding context to identify potential categories.

root@66535ad8d509:/workspace/missinggold# sed -n '120,200p' MULTI_COUNTRY_SCALING_STRATEGY.md

#### Week 2: Database & Content Adaptation
```sql
-- Add country-specific content table
CREATE TABLE country_configs (
  id UUID PRIMARY KEY,
  country_code VARCHAR(2),
  cities JSONB,
  currency VARCHAR(3),
  languages JSONB,
  features JSONB
);

-- UAE-specific event categories
INSERT INTO categories (country, name_en, name_ar) VALUES
('AE', 'Business Networking', 'شبكات الأعمال'),
('AE', 'Desert Adventures', 'مغامرات صحراوية'),
('AE', 'Luxury Events', 'فعاليات فاخرة');
```

#### Week 3: Testing & Launch
- Country-specific testing
- Local payment integration (if needed)
- SEO optimization for UAE market
- Soft launch with select UAE events

### **Phase 2: Saudi Arabia** - *2 weeks*
- Leverage UAE learnings
- Saudi-specific cultural adaptations
- Ramadan/Hajj event considerations
- Integration with Saudi payment systems

### **Phase 3: Jordan, Lebanon, Morocco** - *1.5 weeks each*
- Streamlined process from previous phases
- Country-specific city data
- Local cultural event categories

---

## 🔧 TECHNICAL IMPLEMENTATION

### **1. Country Configuration System**
```typescript
// src/lib/countries.ts
export const COUNTRY_CONFIGS = {
  IQ: {
    name: 'Iraq',
    code: 'IQ',
    currency: 'IQD',
    languages: ['ar', 'ku', 'en'],
    cities: ['Baghdad', 'Basra', 'Erbil', 'Sulaymaniyah'],
    features: ['whatsapp_integration', 'cash_payments']
  },
  AE: {
    name: 'UAE',
    code: 'AE',
    currency: 'AED',
    languages: ['ar', 'en'],
    cities: ['Dubai', 'Abu Dhabi', 'Sharjah'],
    features: ['credit_cards', 'luxury_categories']
  }
};
```

### **2. Dynamic Routing System**
```typescript
// src/app/[country]/layout.tsx
export default function CountryLayout({
  children,
  params: { country }
}: {
  children: React.ReactNode;
  params: { country: string };
}) {
  const config = COUNTRY_CONFIGS[country.toUpperCase()];
  return (
    <CountryProvider config={config}>
      {children}
    </CountryProvider>
  );
}
I think I should check if PRACTICAL_MULTI_COUNTRY_GUIDE.md mentions categories.

root@66535ad8d509:/workspace/missinggold# sed -n '1,200p' PRACTICAL_MULTI_COUNTRY_GUIDE.md
# 🚀 PRACTICAL MULTI-COUNTRY IMPLEMENTATION GUIDE

## ❓ **YOUR QUESTION ANSWERED**

**Q: "Do we need to do the job from beginning or it's easier to adapt it and clone it?"**

**A: It's MUCH easier to adapt! Here's exactly how:**

---

## 🎯 **THE SIMPLE ANSWER**

**90% of your code stays exactly the same!** Only these things change per country:
1. **Cities list** (Dubai vs Baghdad)
2. **Currency** (AED vs IQD)
3. **Local categories** (Desert Adventures vs Kurdish Events)
4. **Translation files** (UAE Arabic vs Iraqi Arabic)

**That's literally it!**

---

## 🛠️ **EXACT STEPS TO ADD UAE (2-3 days work)**

### **Step 1: Add UAE Configuration (30 minutes)**

I already created `src/lib/countries.ts` with UAE ready! Just add it to your project:

```typescript
// UAE is already configured in countries.ts
// Cities: Dubai, Abu Dhabi, Sharjah, etc.
// Currency: AED (د.إ)
// Categories: Luxury Events, Business Networking, Desert Adventures
```

### **Step 2: Create UAE Translation File (2 hours)**

```bash
# Copy your existing Arabic file
Copy-Item messages/ar.json messages/ar-AE.json
```

Then edit `messages/ar-AE.json` with UAE-specific terms:
```json
{
  "cities": {
    "dubai": "دبي",
    "abudhabi": "أبو ظبي",
    "sharjah": "الشارقة"
  },
  "categories": {
    "luxury": "فعاليات فاخرة",
    "desert": "مغامرات صحراوية",
    "business": "شبكات الأعمال"
  },
  "currency": {
    "symbol": "د.إ",
    "name": "درهم إماراتي"
  }
}
```

### **Step 3: Update Your Event Form (1 hour)**

Your existing `EventForm.tsx` automatically adapts! Just import the country config:

```typescript
// In src/app/dashboard/EventForm.tsx
import { getCountryCities, getCountryCategories } from '../lib/countries';

export default function EventForm() {
  // Get current country (from URL or user selection)
  const countryCode = 'AE'; // This comes from routing

  // Your form automatically uses UAE cities and categories!
  const cities = getCountryCities(countryCode);
  const categories = getCountryCategories(countryCode);

  // Rest of your code stays EXACTLY the same!
  return (
    <form>
      <select>
        {cities.map(city => (
          <option key={city} value={city}>{city}</option>
        ))}
      </select>
      <select>
        {categories.map(cat => (
          <option key={cat.key} value={cat.key}>
            {cat.icon} {cat.name}
          </option>
        ))}
      </select>
    </form>
  );
}
```

### **Step 4: Update Routing (30 minutes)**

Add UAE to your existing routing:

```typescript
// In your existing routing file
const SUPPORTED_COUNTRIES = ['IQ', 'AE']; // Just add AE!

// Your existing middleware automatically handles UAE
// No code changes needed!
```

---

## 📸 **BEFORE/AFTER COMPARISON**

### **Iraq (Current)**
```
URL: eventra.com/iraq/events
Cities: Baghdad, Basra, Erbil
Currency: IQD (د.ع)
Categories: Tech, Music, Business
```

### **UAE (After 2 days)**
```
URL: eventra.com/uae/events
Cities: Dubai, Abu Dhabi, Sharjah
Currency: AED (د.إ)
Categories: Luxury Events, Desert Adventures, Business Networking
```

**Same code, different data!** 🎉

---

## 💻 **WHAT DOESN'T CHANGE (90% of your code)**

### ✅ **These Stay Exactly The Same:**
- All your React components
- Authentication system (NextAuth)
- Database schema (Prisma)
- Security (rate limiting, CSP)
- Image optimization
- PWA features
- Language switching (Arabic/English)
- All your beautiful UI

### ✅ **Your Existing Features Work Immediately:**
- User registration/login ✅
- Event creation ✅
- Image upload ✅
- WhatsApp integration ✅
- Public event pages ✅
- Search and filtering ✅
- Mobile responsiveness ✅

---

## 🔧 **TECHNICAL PROOF: Update Your EventForm**

Here's how to make your current EventForm work for multiple countries:

<function_calls>
<invoke name="edit_files">
<parameter name="title">EXAMPLE: Update EventForm for multi-country supportroot@66535ad8d509:/workspace/missinggold#
To summarize the app structure, I'll check README and search for potential subcategory data.

<parameter name="title">EXAMPLE: Update EventForm for multi-country supportroot@66535ad8d509:/workspace/missinggold# rg "Categor
y" src -g"*.ts" -n | head
It looks like public/locales/en/common.json might have the details. I’ll check.

root@66535ad8d509:/workspace/missinggold# nl -ba src/lib/countries.ts | sed -n '1,200p'
     1  // Multi-country configuration for Eventra
     2  // Add new countries here with their specific settings
     3
     4  export interface CountryConfig {
     5    name: string;
     6    code: string;
     7    currency: string;
     8    currencySymbol: string;
     9    languages: string[];
    10    defaultLanguage: string;
    11    cities: string[];
    12    timezone: string;
    13    dateFormat: string;
    14    features: string[];
    15    paymentMethods: string[];
    16    categories: Array<{
    17      key: string;
    18      name: string;
    19      icon: string;
    20    }>;
    21  }
    22
    23  export const COUNTRY_CONFIGS: Record<string, CountryConfig> = {
    24    // EXISTING: Iraq (your current setup)
    25    IQ: {
    26      name: 'Iraq',
    27      code: 'IQ',
    28      currency: 'IQD',
    29      currencySymbol: 'د.ع',
    30      languages: ['ar', 'ku', 'en'],
    31      defaultLanguage: 'ar',
    32      cities: [
    33        'Baghdad', 'Basra', 'Erbil', 'Sulaymaniyah',
    34        'Mosul', 'Duhok', 'Kirkuk', 'Anbar', 'Najaf', 'Karbala'
    35      ],
    36      timezone: 'Asia/Baghdad',
    37      dateFormat: 'DD/MM/YYYY',
    38      features: ['whatsapp_integration', 'cash_payments', 'multilingual'],
    39      paymentMethods: ['cash', 'bank_transfer'],
    40      categories: [
    41        { key: 'tech', name: 'Technology', icon: '💻' },
    42        { key: 'music', name: 'Music', icon: '🎵' },
    43        { key: 'business', name: 'Business', icon: '💼' },
    44        { key: 'art', name: 'Arts & Culture', icon: '🎨' },
    45        { key: 'sports', name: 'Sports', icon: '⚽' },
    46        { key: 'food', name: 'Food & Dining', icon: '🍽️' },
    47        { key: 'health', name: 'Health & Wellness', icon: '🏥' },
    48        { key: 'community', name: 'Community', icon: '👥' }
    49      ]
    50    },
    51
    52    // NEW: UAE
    53    AE: {
    54      name: 'United Arab Emirates',
    55      code: 'AE',
    56      currency: 'AED',
    57      currencySymbol: 'د.إ',
    58      languages: ['ar', 'en'],
    59      defaultLanguage: 'ar',
    60      cities: [
    61        'Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman',
    62        'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain'
    63      ],
    64      timezone: 'Asia/Dubai',
    65      dateFormat: 'DD/MM/YYYY',
    66      features: ['credit_cards', 'luxury_events', 'international_speakers'],
    67      paymentMethods: ['credit_card', 'apple_pay', 'google_pay', 'cash'],
    68      categories: [
    69        { key: 'business', name: 'Business Networking', icon: '💼' },
    70        { key: 'luxury', name: 'Luxury Events', icon: '💎' },
    71        { key: 'tech', name: 'Technology', icon: '💻' },
    72        { key: 'desert', name: 'Desert Adventures', icon: '🏜️' },
    73        { key: 'finance', name: 'Finance & Investment', icon: '💰' },
    74        { key: 'art', name: 'Arts & Culture', icon: '🎨' },
    75        { key: 'food', name: 'Fine Dining', icon: '🍽️' },
    76        { key: 'wellness', name: 'Wellness & Spa', icon: '🧘' }
    77      ]
    78    },
    79
    80    // NEW: Saudi Arabia (for future)
    81    SA: {
    82      name: 'Saudi Arabia',
    83      code: 'SA',
    84      currency: 'SAR',
    85      currencySymbol: '﷼',
    86      languages: ['ar', 'en'],
    87      defaultLanguage: 'ar',
    88      cities: [
    89        'Riyadh', 'Jeddah', 'Mecca', 'Medina', 'Dammam',
    90        'Khobar', 'Tabuk', 'Abha', 'Taif'
    91      ],
    92      timezone: 'Asia/Riyadh',
    93      dateFormat: 'DD/MM/YYYY',
    94      features: ['vision_2030', 'mega_events', 'cultural_events'],
    95      paymentMethods: ['credit_card', 'mada', 'apple_pay', 'stc_pay'],
    96      categories: [
    97        { key: 'business', name: 'Business', icon: '💼' },
    98        { key: 'culture', name: 'Cultural Events', icon: '🏛️' },
    99        { key: 'sports', name: 'Sports', icon: '⚽' },
   100        { key: 'tech', name: 'Technology', icon: '💻' },
   101        { key: 'entertainment', name: 'Entertainment', icon: '🎭' },
   102        { key: 'education', name: 'Education', icon: '📚' }
   103      ]
   104    }
   105  };
   106
   107  // Helper functions
   108  export const getCountryConfig = (countryCode: string): CountryConfig | null => {
   109    return COUNTRY_CONFIGS[countryCode.toUpperCase()] || null;
   110  };
   111
   112  export const getAllCountries = (): CountryConfig[] => {
   113    return Object.values(COUNTRY_CONFIGS);
   114  };
   115
   116  export const getCountryCities = (countryCode: string): string[] => {
   117    const config = getCountryConfig(countryCode);
   118    return config ? config.cities : [];
   119  };
   120
   121  export const getCountryCategories = (countryCode: string) => {
   122    const config = getCountryConfig(countryCode);
   123    return config ? config.categories : [];
   124  };
Looking at the country categories, I'm wondering if they relate to the user's grids.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/api/venues/route.ts | sed -n '1,200p'
     1  import { NextRequest, NextResponse } from 'next/server';
     2  import { PrismaClient } from '@prisma/client';
     3  import { getServerSession } from 'next-auth';
     4  import { authOptions } from '../../../lib/auth';
     5
     6  const prisma = new PrismaClient();
     7
     8  export async function GET(request: NextRequest) {
     9    try {
    10      const url = new URL(request.url);
    11      const type = url.searchParams.get('type'); // EVENT, HOTEL, RESTAURANT, ACTIVITY
    12      const city = url.searchParams.get('city');
    13      const locale = url.searchParams.get('locale') || 'en';
    14      const featured = url.searchParams.get('featured') === 'true';
    15      const category = url.searchParams.get('category');
    16
    17      // Build filter conditions
    18      const where: any = {
    19        status: 'ACTIVE',
    20      };
    21
    22      if (type) {
    23        where.type = type;
    24      }
    25
    26      if (city) {
    27        where.city = city;
    28      }
    29
    30      if (featured) {
    31        where.featured = true;
    32      }
    33
    34      if (category) {
    35        where.category = category;
    36      }
    37
    38      // Fetch venues with translations
    39      const venues = await prisma.venue.findMany({
    40        where,
    41        include: {
    42          translations: true,
    43          user: {
    44            select: { id: true, name: true }
    45          }
    46        },
    47        orderBy: [
    48          { featured: 'desc' },
    49          { verified: 'desc' },
    50          { createdAt: 'desc' }
    51        ]
    52      });
    53
    54      // Localize venues
    55      const localizedVenues = venues.map((venue: any) => {
    56        const translation = venue.translations.find((t: any) => t.locale === locale) ||
    57                           venue.translations.find((t: any) => t.locale === 'en') ||
    58                           venue.translations[0];
    59
    60        return {
    61          id: venue.id,
    62          publicId: venue.publicId,
    63          type: venue.type,
    64          status: venue.status,
    65          title: translation?.title || 'Untitled Venue',
    66          description: translation?.description || '',
    67          location: translation?.location || venue.address || '',
    68          city: venue.city,
    69          category: venue.category,
    70          subcategory: venue.subcategory,
    71          priceRange: venue.priceRange,
    72          imageUrl: venue.imageUrl,
    73          galleryUrls: venue.galleryUrls ? JSON.parse(venue.galleryUrls) : [],
    74          website: venue.website,
    75          businessPhone: venue.businessPhone,
    76          whatsappPhone: venue.whatsappPhone,
    77          contactMethod: venue.contactMethod,
    78          bookingUrl: venue.bookingUrl,
    79          eventDate: venue.eventDate,
    80          cuisineType: venue.cuisineType,
    81          dietaryOptions: venue.dietaryOptions ? JSON.parse(venue.dietaryOptions) : [],
    82          amenities: translation?.amenities ? JSON.parse(translation.amenities) : [],
    83          features: translation?.features ? JSON.parse(translation.features) : [],
    84          tags: venue.tags ? JSON.parse(venue.tags) : [],
    85          featured: venue.featured,
    86          verified: venue.verified,
    87          createdAt: venue.createdAt,
    88          owner: venue.user
    89        };
    90      });
    91
    92      return NextResponse.json({
    93        success: true,
    94        venues: localizedVenues,
    95        count: localizedVenues.length
    96      });
    97
    98    } catch (error) {
    99      console.error('Error fetching venues:', error);
   100      return NextResponse.json(
   101        { success: false, error: 'Failed to fetch venues' },
   102        { status: 500 }
   103      );
   104    }
   105  }
   106
   107  export async function POST(request: NextRequest) {
   108    try {
   109      const session = await getServerSession(authOptions);
   110      if (!session?.user?.email) {
   111        return NextResponse.json(
   112          { success: false, error: 'Authentication required' },
   113          { status: 401 }
   114        );
   115      }
   116
   117      const user = await prisma.user.findUnique({
   118        where: { email: session.user.email }
   119      });
   120
   121      if (!user) {
   122        return NextResponse.json(
   123          { success: false, error: 'User not found' },
   124          { status: 404 }
   125        );
   126      }
   127
   128      const data = await request.json();
   129
   130      // Validate required fields
   131      if (!data.type || !data.translations || !Array.isArray(data.translations)) {
   132        return NextResponse.json(
   133          { success: false, error: 'Type and translations are required' },
   134          { status: 400 }
   135        );
   136      }
   137
   138      // Generate unique public ID
   139      const publicId = `${data.type.toLowerCase()}-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`;
   140
   141      // Create venue with translations
   142      const venue = await prisma.venue.create({
   143        data: {
   144          type: data.type,
   145          publicId,
   146          status: 'PENDING', // Admin approval required
   147          userId: user.id,
   148
   149          // Business info
   150          businessEmail: data.businessEmail || '',
   151          businessPhone: data.businessPhone || '',
   152          website: data.website || '',
   153          socialLinks: data.socialLinks ? JSON.stringify(data.socialLinks) : null,
   154
   155          // Location
   156          address: data.address || '',
   157          city: data.city || '',
   158          latitude: data.latitude || null,
   159          longitude: data.longitude || null,
   160
   161          // Media
   162          imageUrl: data.imageUrl || '',
   163          galleryUrls: data.galleryUrls ? JSON.stringify(data.galleryUrls) : null,
   164          videoUrl: data.videoUrl || '',
   165
   166          // Contact and booking
   167          bookingUrl: data.bookingUrl || '',
   168          whatsappPhone: data.whatsappPhone || '',
   169          contactMethod: data.contactMethod || '',
   170
   171          // Pricing and availability
   172          priceRange: data.priceRange || '',
   173          availability: data.availability ? JSON.stringify(data.availability) : null,
   174
   175          // Event-specific
   176          eventDate: data.eventDate ? new Date(data.eventDate) : null,
   177
   178          // Hotel-specific
   179          amenities: data.amenities ? JSON.stringify(data.amenities) : null,
   180          features: data.features ? JSON.stringify(data.features) : null,
   181
   182          // Restaurant-specific
   183          cuisineType: data.cuisineType || '',
   184          dietaryOptions: data.dietaryOptions ? JSON.stringify(data.dietaryOptions) : null,
   185
   186          // SEO and categorization
   187          category: data.category || '',
   188          subcategory: data.subcategory || '',
   189          tags: data.tags ? JSON.stringify(data.tags) : null,
   190
   191          // Platform flags
   192          featured: data.featured || false,
   193          verified: data.verified || false,
   194
   195          // Translations
   196          translations: {
   197            create: data.translations.map((t: any) => ({
   198              locale: t.locale,
   199              title: t.title,
   200              description: t.description || '',
I'm looking for the possible values for the "subcategory" field in the data.

root@66535ad8d509:/workspace/missinggold# rg "subcategory" -n
prisma/migrations/20250921112738_add_multi_venue_support/migration.sql
30:    "subcategory" TEXT,

prisma/schema.prisma
139:  subcategory   String?

src/app/api/venues/route.ts
70:        subcategory: venue.subcategory,
188:        subcategory: data.subcategory || '',
Looks like no direct subcategory data, but I can infer from repo contents like categoryDescriptions and categoryMap. Maybe the IMPLEMENTATION_GUIDE could have insights too. I'll review the structure and key directories. I'll mention categories found in src/lib/countries.ts, maybe there's an updated 9.

root@66535ad8d509:/workspace/missinggold# rg "categories = \[" -n src/app -g"*.tsx"
src/app/page-original.tsx
58:  const categories = [

src/app/[locale]/events/page.tsx
61:  const categories = [

src/app/[locale]/categories/page.tsx
27:  const categories = [

src/app/categories/page.tsx
12:  const categories = [
I'll take a look at the categories in page-original.tsx between lines 40-120.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/page-original.tsx | sed -n '40,120p'
    40      }
    41    }, [t, selectedCity]);
    42
    43    // Use translated cities and categories
    44    const cities = [
    45      t('common.allCities'),
    46      t('cities.baghdad'),
    47      t('cities.basra'),
    48      t('cities.mosul'),
    49      t('cities.erbil'),
    50      t('cities.sulaymaniyah'),
    51      t('cities.duhok'),
    52      t('cities.kirkuk'),
    53      t('cities.anbar'),
    54      t('cities.najaf'),
    55      t('cities.karbala')
    56    ];
    57
    58    const categories = [
    59      { name: t('common.allCategories'), icon: "🎉" },
    60      { name: t('categories.technologyInnovation'), icon: "💻" },
    61      { name: t('categories.businessNetworking'), icon: "💼" },
    62      { name: t('categories.musicConcerts'), icon: "🎵" },
    63      { name: t('categories.artsCulture'), icon: "🎨" },
    64      { name: t('categories.sportsFitness'), icon: "⚽" },
    65      { name: t('categories.foodDrink'), icon: "🍽️" },
    66      { name: t('categories.learningDevelopment'), icon: "📚" },
    67      { name: t('categories.healthWellness'), icon: "🏥" },
    68      { name: t('categories.communitySocial'), icon: "👥" },
    69      { name: t('categories.gamingEsports'), icon: "🎮" },
    70      { name: t('categories.spiritualReligious'), icon: "🕌" },
    71      { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦" },
    72      { name: t('categories.outdoorAdventure'), icon: "🏔️" },
    73      { name: t('categories.virtualEvents'), icon: "📱" },
    74      { name: t('categories.academicConferences'), icon: "🎓" }
    75    ];
    76
    77    const heroSlides = [
    78      {
    79        id: 1,
    80        title: t('heroSlides.slide1.title'),
    81        subtitle: t('heroSlides.slide1.subtitle'),
    82        description: t('heroSlides.slide1.description'),
    83        gradient: "from-purple-900 via-blue-900 to-cyan-900",
    84        buttonText: t('hero.registerNow'),
    85        buttonColor: "from-yellow-400 via-orange-500 to-red-500",
    86        stats: [{ label: t('heroSlides.attendees'), value: "5K+", color: "text-yellow-400" }, { label: t('heroSlides.sessi
ons'), value: "100+", color: "text-cyan-400" }, { label: t('heroSlides.days'), value: "3", color: "text-purple-400" }],
    87        backgroundImage: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=1920&h=1080&fit=crop&crop=center&
auto=format&q=80",
    88        category: "tech"
    89      },
    90      {
    91        id: 2,
    92        title: t('heroSlides.slide2.title'),
    93        subtitle: t('heroSlides.slide2.subtitle'),
    94        description: t('heroSlides.slide2.description'),
    95        gradient: "from-pink-900 via-purple-900 to-indigo-900",
    96        buttonText: t('hero.getTickets'),
    97        buttonColor: "from-pink-500 via-purple-500 to-indigo-500",
    98        stats: [{ label: t('heroSlides.artists'), value: "50+", color: "text-pink-400" }, { label: t('heroSlides.stages'),
 value: "5", color: "text-purple-400" }, { label: t('heroSlides.hours'), value: "72", color: "text-indigo-400" }],
    99        backgroundImage: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=1920&h=1080&fit=crop&crop=center&
auto=format&q=80",
   100        category: "music"
   101      },
   102      {
   103        id: 3,
   104        title: t('heroSlides.slide3.title'),
   105        subtitle: t('heroSlides.slide3.subtitle'),
   106        description: t('heroSlides.slide3.description'),
   107        gradient: "from-emerald-900 via-teal-900 to-cyan-900",
   108        buttonText: t('heroSlides.joinSummit'),
   109        buttonColor: "from-emerald-500 via-teal-500 to-cyan-500",
   110        stats: [{ label: t('heroSlides.leaders'), value: "200+", color: "text-emerald-400" }, { label: t('heroSlides.compa
nies'), value: "150+", color: "text-teal-400" }, { label: t('heroSlides.workshops'), value: "25", color: "text-cyan-400" }],
   111        backgroundImage: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=1920&h=1080&fit=crop&crop=center&
auto=format&q=80",
   112        category: "business"
   113      },
   114      {
   115        id: 4,
   116        title: t('heroSlides.slide4.title'),
   117        subtitle: t('heroSlides.slide4.subtitle'),
   118        description: t('heroSlides.slide4.description'),
   119        gradient: "from-orange-900 via-red-900 to-pink-900",
   120        buttonText: t('heroSlides.exploreArt'),
The user may be expecting 9 segments, but the data shows 16 categories and 5 others.

root@66535ad8d509:/workspace/missinggold# rg "segment" -n
COMPETITIVE_ANALYSIS_MIDDLE_EAST.md
329:- High-value segment

MARKETING_REVENUE_STRATEGY.md
286:   - High disposable income segment
946:- Customer segment targeting

scripts/csv-to-events-json.ts
95:  // Basic parse; if includes ranges, take first date-like segment
I think there might be a doc called STRATEGIC_PLATFORM_ANALYSIS for categories. I'll check.

root@66535ad8d509:/workspace/missinggold# sed -n '1,160p' STRATEGIC_PLATFORM_ANALYSIS.md
# 🧠 STRATEGIC PLATFORM ANALYSIS: UNIFIED vs SEPARATE

## 🎯 **YOUR STRATEGIC QUESTION ANSWERED**

**Question**: *"Should we unify all countries in one app for cross-pollination value, or keep them separate for local focus?"*

**AI-Powered Answer**: **HYBRID APPROACH** is optimal - here's the sophisticated strategy:

---

## 🤖 **AI FEATURES & MARKET VALUE ANALYSIS**

### **Network Effect Algorithm Potential**

Your platform has these **AI-powered value multipliers**:

```
Cross-Country Event Discovery Engine:
- User in Dubai sees Istanbul music festival
- Turkish business person finds Baghdad tech conference
- Shared user reviews build global trust
- Algorithm learns from ALL country data

Market Value = Users × Countries × Cross-Connections²
```

**Example**: 10,000 users in 3 countries = 30,000 baseline value
**With cross-pollination**: 10,000 × 3 × (cross-connections)² = **300,000+ value units**

---

## 🏨 **HOTEL INTEGRATION STRATEGIC ANALYSIS**

### **Unified Platform Advantages**
```
Scenario: User books Dubai event → Algorithm suggests:
✅ Dubai hotels (primary)
✅ Istanbul hotels (if traveling for business)
✅ Baghdad hotels (if regional tour)
✅ Package deals across countries

Revenue Per User: 3-5x higher
AI Learning Data: 10x richer
```

### **Separate Platform Limitations**
```
Scenario: User on dubai-eventra.com → Misses:
❌ Regional travel opportunities
❌ Cross-country business connections
❌ Bulk booking discounts
❌ AI can't learn from global patterns

Revenue Per User: 1x baseline
AI Learning Data: Fragmented
```

---

## 🧠 **OPTIMAL HYBRID STRATEGY**

### **RECOMMENDED: "Unified Backend, Localized Frontend"**

```
Technical Architecture:
├── eventra.com (Global platform)
│   ├── /iraq (Localized experience)
│   ├── /uae (Localized experience)
│   ├── /turkey (Localized experience)
│   └── /global (Cross-country discovery)
│
├── Shared Backend (AI learns from all)
├── Shared User Base (network effects)
└── Local SEO optimization per country
```

**Best of both worlds!** 🎯

---

## 📊 **MARKET VALUE COMPARISON**

### **Unified Platform Market Value**
```
Network Effects:        10x multiplier
Cross-Selling:          5x revenue per user
AI Learning:            Rich dataset
SEO Power:             Domain authority
Investment Appeal:      Scalable model
Exit Value:            $50M+ potential

Example: Eventbrite (unified) = $1.3B valuation
```

### **Separate Platforms Market Value**
```
Network Effects:        1x (isolated)
Cross-Selling:          Limited
AI Learning:            Fragmented
SEO Power:             Scattered
Investment Appeal:      Complex to scale
Exit Value:            $5-10M each

Example: Local event platforms = $1-5M typical
```

**Unified platforms typically achieve 5-10x higher valuations** 📈

---

## 🤖 **AI FEATURES THAT MULTIPLY VALUE**

### **1. Cross-Country Event Recommendation Engine**
```python
# AI Algorithm Concept
def recommend_events(user_profile, travel_history, preferences):
    """
    AI learns from ALL countries to suggest:
    - Local events in user's city
    - Events in travel destinations
    - Similar events in other countries
    - Package deals (event + hotel + flight)
    """
    return personalized_recommendations
```

**Market Value**: Users stay engaged 3x longer, book 2x more events

### **2. Dynamic Pricing Algorithm**
```python
def optimize_pricing(event_demand, hotel_capacity, flight_costs):
    """
    AI adjusts event prices based on:
    - Local demand patterns
    - Regional travel costs
    - Hotel availability
    - Cross-country competition
    """
    return optimal_price_point
```

**Market Value**: 20-30% revenue increase vs static pricing

### **3. Travel Package Creation AI**
```python
def create_travel_packages(event, user_location):
    """
    AI automatically creates:
    - Event ticket + Hotel + Flight bundles
    - Multi-city event tours
    - Business trip optimization
    - Group discount opportunities
    """
    return travel_packages
```

**Market Value**: 5-10x higher transaction value per user

---
I’ll use README for structure, then reference categories in page.tsx and countries.ts.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/components/MultiVenueHomepage.tsx | sed -n '20,120p'
    20    cuisineType?: string;
    21    eventDate?: string;
    22    amenities?: string[];
    23  }
    24
    25  export default function MultiVenueHomepage() {
    26    const [activeTab, setActiveTab] = useState<string>('all');
    27    const [venues, setVenues] = useState<Venue[]>([]);
    28    const [loading, setLoading] = useState(true);
    29
    30    const tabs = [
    31      { id: 'all', label: 'All', icon: '🌟' },
    32      { id: 'EVENT', label: 'Events', icon: '🎉' },
    33      { id: 'HOTEL', label: 'Hotels', icon: '🏨' },
    34      { id: 'RESTAURANT', label: 'Restaurants', icon: '🍽️' },
    35      { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
    36    ];
    37
    38    useEffect(() => {
    39      fetchVenues();
    40    }, [activeTab]);
    41
    42    const fetchVenues = async () => {
    43      setLoading(true);
    44      try {
    45        const params = new URLSearchParams();
    46        if (activeTab !== 'all') {
    47          params.set('type', activeTab);
    48        }
    49        params.set('locale', 'en'); // TODO: Get from context
    50
    51        const response = await fetch(`/api/venues?${params}`);
    52        const data = await response.json();
    53
    54        if (data.success) {
    55          setVenues(data.venues || []);
    56        }
    57      } catch (error) {
    58        console.error('Error fetching venues:', error);
    59      } finally {
    60        setLoading(false);
    61      }
    62    };
    63
    64    const getVenueTypeIcon = (type: string) => {
    65      switch (type) {
    66        case 'EVENT': return '🎉';
    67        case 'HOTEL': return '🏨';
    68        case 'RESTAURANT': return '🍽️';
    69        case 'ACTIVITY': return '🎯';
    70        case 'SERVICE': return '🛎️';
    71        default: return '📍';
    72      }
    73    };
    74
    75    const formatPrice = (priceRange?: string) => {
    76      if (!priceRange) return null;
    77      return priceRange;
    78    };
    79
    80    return (
    81      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
    82        {/* Hero Section */}
    83        <section className="relative py-20 px-4 text-center">
    84          <div className="max-w-4xl mx-auto">
    85            <h1 className="text-5xl font-bold text-gray-900 mb-6">
    86              🏰 Discover Iraq & Kurdistan
    87            </h1>
    88            <p className="text-xl text-gray-600 mb-8">
    89              Events • Hotels • Restaurants • Activities - All in One Platform
    90            </p>
    91
    92            {/* Tab Navigation */}
    93            <div className="flex flex-wrap justify-center gap-2 mb-8">
    94              {tabs.map((tab) => (
    95                <button
    96                  key={tab.id}
    97                  onClick={() => setActiveTab(tab.id)}
    98                  className={`px-6 py-3 rounded-full font-semibold transition-all duration-300 ${
    99                    activeTab === tab.id
   100                      ? 'bg-blue-600 text-white shadow-lg transform scale-105'
   101                      : 'bg-white text-gray-700 hover:bg-blue-50 shadow-md'
   102                  }`}
   103                >
   104                  {tab.icon} {tab.label}
   105                </button>
   106              ))}
   107            </div>
   108          </div>
   109        </section>
   110
   111        {/* Venues Grid */}
   112        <section className="px-4 pb-20">
   113          <div className="max-w-7xl mx-auto">
   114            {loading ? (
   115              <div className="flex justify-center items-center py-20">
   116                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
   117              </div>
   118            ) : (
   119              <>
   120                {venues.length === 0 ? (
User mentioned 9 categories — possible marketing splits. I'll check src/app/restaurants/page.tsx.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/restaurants/page.tsx | sed -n '200,320p'
   200          marginTop: '60px',
   201          textAlign: 'center'
   202        }}>
   203          <h2 style={{
   204            color: 'var(--restaurants-color)',
   205            fontSize: '2.5rem',
   206            marginBottom: '32px',
   207            textShadow: '0 0 10px var(--restaurants-color)'
   208          }}>
   209            Browse by Cuisine
   210          </h2>
   211
   212          <div style={{
   213            display: 'grid',
   214            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
   215            gap: '20px',
   216            maxWidth: '800px',
   217            margin: '0 auto'
   218          }}>
   219            {[
   220              { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
   221              { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
   222              { name: 'Middle Eastern', icon: '🧆', count: 15 },
   223              { name: 'Seafood', icon: '🦐', count: 12 },
   224              { name: 'International', icon: '🍝', count: 20 },
   225              { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
   226            ].map((cuisine, index) => (
   227              <div
   228                key={index}
   229                className="category-icon restaurants restaurants-glow"
   230                style={{
   231                  cursor: 'pointer',
   232                  animationDelay: `${index * 0.1}s`
   233                }}
   234              >
   235                <div style={{ fontSize: '2.5rem', marginBottom: '8px' }}>
   236                  {cuisine.icon}
   237                </div>
   238                <div style={{
   239                  color: 'var(--restaurants-color)',
   240                  fontWeight: '600',
   241                  marginBottom: '4px'
   242                }}>
   243                  {cuisine.name}
   244                </div>
   245                <div style={{
   246                  color: 'var(--text-tertiary)',
   247                  fontSize: '0.9rem'
   248                }}>
   249                  {cuisine.count} places
   250                </div>
   251              </div>
   252            ))}
   253          </div>
   254        </div>
   255
   256        {/* Call to Action */}
   257        <div style={{
   258          textAlign: 'center',
   259          marginTop: '60px',
   260          padding: '40px 20px'
   261        }}>
   262          <div className="neon-card restaurants restaurants-glow" style={{
   263            maxWidth: '600px',
   264            margin: '0 auto',
   265            padding: '32px'
   266          }}>
   267            <h2 style={{
   268              color: 'var(--restaurants-color)',
   269              fontSize: '2rem',
   270              marginBottom: '16px',
   271              textShadow: '0 0 10px var(--restaurants-color)'
   272            }}>
   273              Own a Restaurant?
   274            </h2>
   275            <p style={{
   276              color: 'var(--text-secondary)',
   277              marginBottom: '24px',
   278              fontSize: '1.1rem'
   279            }}>
   280              Join Eventra and showcase your restaurant to thousands of food lovers
   281            </p>
   282            <div style={{
   283              display: 'flex',
   284              gap: '16px',
   285              justifyContent: 'center',
   286              flexWrap: 'wrap'
   287            }}>
   288              <button className="neon-button restaurants">
   289                List Your Restaurant
   290              </button>
   291              <button className="neon-button cafes">
   292                Browse Cafes
   293              </button>
   294            </div>
   295          </div>
   296        </div>
   297      </div>
   298    );
   299  }
I'll look into src/app/hotels/page.tsx to explore the hotel subcategories.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/hotels/page.tsx | sed -n '200,320p'
   200              </button>
   201            </div>
   202          </div>
   203        </div>
   204      </div>
   205    );
   206  }
I'll use sed -n '120,200p' to grab the earlier part if needed.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/hotels/page.tsx | sed -n '120,220p'
   120                <div style={{
   121                  display: 'flex',
   122                  justifyContent: 'space-between',
   123                  alignItems: 'center',
   124                  marginBottom: '16px'
   125                }}>
   126                  <span style={{
   127                    color: 'var(--hotels-color)',
   128                    fontSize: '1.1rem',
   129                    fontWeight: 'bold'
   130                  }}>
   131                    ⭐ {hotel.rating}
   132                  </span>
   133                  <span style={{
   134                    color: 'var(--text-tertiary)',
   135                    fontSize: '0.9rem'
   136                  }}>
   137                    📍 {hotel.location}
   138                  </span>
   139                </div>
   140
   141                <div style={{
   142                  display: 'flex',
   143                  justifyContent: 'space-between',
   144                  alignItems: 'center'
   145                }}>
   146                  <span style={{
   147                    color: 'var(--hotels-color)',
   148                    fontSize: '1.3rem',
   149                    fontWeight: 'bold',
   150                    textShadow: '0 0 5px var(--hotels-color)'
   151                  }}>
   152                    {hotel.price}
   153                  </span>
   154                  <button className="neon-button hotels">
   155                    Book Now
   156                  </button>
   157                </div>
   158              </div>
   159            </div>
   160          ))}
   161        </div>
   162
   163        {/* Call to Action */}
   164        <div style={{
   165          textAlign: 'center',
   166          marginTop: '60px',
   167          padding: '40px 20px'
   168        }}>
   169          <div className="neon-card hotels hotels-glow" style={{
   170            maxWidth: '600px',
   171            margin: '0 auto',
   172            padding: '32px'
   173          }}>
   174            <h2 style={{
   175              color: 'var(--hotels-color)',
   176              fontSize: '2rem',
   177              marginBottom: '16px',
   178              textShadow: '0 0 10px var(--hotels-color)'
   179            }}>
   180              Can&apos;t find what you&apos;re looking for?
   181            </h2>
   182            <p style={{
   183              color: 'var(--text-secondary)',
   184              marginBottom: '24px',
   185              fontSize: '1.1rem'
   186            }}>
   187              Contact us to find more hotel options in your preferred location
   188            </p>
   189            <div style={{
   190              display: 'flex',
   191              gap: '16px',
   192              justifyContent: 'center',
   193              flexWrap: 'wrap'
   194            }}>
   195              <button className="neon-button hotels">
   196                Contact Us
   197              </button>
   198              <button className="neon-button tourism">
   199                Browse All Categories
   200              </button>
   201            </div>
   202          </div>
   203        </div>
   204      </div>
   205    );
   206  }
I'll look at the earlier part of the file for categories like 'luxury'.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/hotels/page.tsx | sed -n '60,140p'
    60            <p style={{
    61              color: 'var(--text-secondary)',
    62              fontSize: '1.2rem'
    63            }}>
    64              Find the perfect place to stay in Iraq & Kurdistan
    65            </p>
    66          </div>
    67        </div>
    68
    69        {/* Back Button */}
    70        <div style={{ marginBottom: '32px' }}>
    71          <Link href="/" className="neon-button hotels">
    72            ← Back to Home
    73          </Link>
    74        </div>
    75
    76        {/* Hotels Grid */}
    77        <div style={{
    78          display: 'grid',
    79          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
    80          gap: '24px',
    81          maxWidth: '1200px',
    82          margin: '0 auto'
    83        }}>
    84          {hotels.map((hotel) => (
    85            <div key={hotel.id} className="neon-card hotels hotels-glow">
    86              <div style={{ padding: '24px' }}>
    87                {/* Hotel Image/Icon */}
    88                <div style={{
    89                  width: '100%',
    90                  height: '200px',
    91                  background: 'linear-gradient(135deg, var(--hotels-color), var(--bg-secondary))',
    92                  borderRadius: '12px',
    93                  marginBottom: '20px',
    94                  display: 'flex',
    95                  alignItems: 'center',
    96                  justifyContent: 'center',
    97                  fontSize: '4rem'
    98                }}>
    99                  {hotel.image}
   100                </div>
   101
   102                {/* Hotel Info */}
   103                <h3 style={{
   104                  color: 'var(--text-primary)',
   105                  fontSize: '1.5rem',
   106                  marginBottom: '8px',
   107                  textShadow: '0 0 5px var(--hotels-color)'
   108                }}>
   109                  {hotel.name}
   110                </h3>
   111
   112                <p style={{
   113                  color: 'var(--text-secondary)',
   114                  marginBottom: '16px',
   115                  lineHeight: '1.6'
   116                }}>
   117                  {hotel.description}
   118                </p>
   119
   120                <div style={{
   121                  display: 'flex',
   122                  justifyContent: 'space-between',
   123                  alignItems: 'center',
   124                  marginBottom: '16px'
   125                }}>
   126                  <span style={{
   127                    color: 'var(--hotels-color)',
   128                    fontSize: '1.1rem',
   129                    fontWeight: 'bold'
   130                  }}>
   131                    ⭐ {hotel.rating}
   132                  </span>
   133                  <span style={{
   134                    color: 'var(--text-tertiary)',
   135                    fontSize: '0.9rem'
   136                  }}>
   137                    📍 {hotel.location}
   138                  </span>
   139                </div>
   140
I'll pull the first 60 lines to look at categories for the hotel list.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/hotels/page.tsx | sed -n '1,60p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function HotelsPage() {
     6    const hotels = [
     7      {
     8        id: '1',
     9        name: 'Baghdad Palace Hotel',
    10        description: 'Luxury accommodation in the heart of Baghdad',
    11        rating: 4.8,
    12        price: '$120/night',
    13        image: '🏰',
    14        location: 'Central Baghdad'
    15      },
    16      {
    17        id: '2',
    18        name: 'Erbil Grand Hotel',
    19        description: 'Modern hotel with stunning city views',
    20        rating: 4.6,
    21        price: '$95/night',
    22        image: '🏨',
    23        location: 'Erbil Center'
    24      },
    25      {
    26        id: '3',
    27        name: 'Basra Riverside Hotel',
    28        description: 'Peaceful riverside accommodation',
    29        rating: 4.4,
    30        price: '$80/night',
    31        image: '🌊',
    32        location: 'Basra Waterfront'
    33      }
    34    ];
    35
    36    return (
    37      <div className="min-h-screen" style={{ padding: '20px' }}>
    38        {/* Header */}
    39        <div style={{
    40          textAlign: 'center',
    41          marginBottom: '40px',
    42          padding: '40px 20px'
    43        }}>
    44          <div style={{
    45            display: 'inline-block',
    46            background: 'rgba(255, 46, 151, 0.1)',
    47            border: '2px solid var(--hotels-color)',
    48            borderRadius: '15px',
    49            padding: '24px',
    50            backdropFilter: 'blur(10px)'
    51          }}>
    52            <h1 style={{
    53              fontSize: '3rem',
    54              color: 'var(--hotels-color)',
    55              textShadow: '0 0 10px var(--hotels-color)',
    56              marginBottom: '16px'
    57            }}>
    58              🏨 Hotels
    59            </h1>
    60            <p style={{
It seems the user expects subcategories like "Luxury" for hotels. I’ll check src/app/events/page.

root@66535ad8d509:/workspace/missinggold# ls src/app
'[locale]'   api          components   favicon.ico   hotels        login               page.tsx        reset         utils
 about       cafes        dashboard    globals.css   layout.tsx    page-neon.tsx       providers.tsx   restaurants   venues
 admin       categories   events       hooks         loading.tsx   page-original.tsx   register        tourism
I'll review the cafes, tourism, and events pages and their subcategories.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/cafes/page.tsx | sed -n '1,200p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function CafesPage() {
     6    const cafes = [
     7      {
     8        id: '1',
     9        name: 'Baghdad Coffee House',
    10        description: 'Traditional Iraqi coffee in a cozy atmosphere',
    11        rating: 4.6,
    12        priceRange: '$$',
    13        image: '☕',
    14        specialty: 'Turkish Coffee',
    15        location: 'Baghdad Old City'
    16      },
    17      {
    18        id: '2',
    19        name: 'Kurdish Mountain Cafe',
    20        description: 'Authentic Kurdish tea and sweets with mountain views',
    21        rating: 4.8,
    22        priceRange: '$',
    23        image: '🫖',
    24        specialty: 'Kurdish Tea',
    25        location: 'Erbil Hills'
    26      },
    27      {
    28        id: '3',
    29        name: 'Tigris River Cafe',
    30        description: 'Riverside cafe with fresh pastries and specialty drinks',
    31        rating: 4.5,
    32        priceRange: '$$',
    33        image: '🧁',
    34        specialty: 'Pastries & Desserts',
    35        location: 'Baghdad Riverside'
    36      },
    37      {
    38        id: '4',
    39        name: 'Modern Brew Co.',
    40        description: 'Contemporary cafe with international coffee blends',
    41        rating: 4.7,
    42        priceRange: '$$$',
    43        image: '🥤',
    44        specialty: 'Specialty Coffee',
    45        location: 'Erbil Center'
    46      }
    47    ];
    48
    49    const cafeTypes = [
    50      { name: 'Traditional Coffee Houses', icon: '☕', count: 32, description: 'Authentic Iraqi coffee culture' },
    51      { name: 'Tea Gardens', icon: '🍵', count: 28, description: 'Kurdish tea traditions' },
    52      { name: 'Modern Cafes', icon: '🥤', count: 24, description: 'International coffee & vibes' },
    53      { name: 'Shisha Lounges', icon: '💨', count: 18, description: 'Relaxing hookah experience' },
    54      { name: 'Bakery Cafes', icon: '🥐', count: 22, description: 'Fresh pastries & coffee' },
    55      { name: 'Rooftop Cafes', icon: '🌆', count: 15, description: 'City views & coffee' }
    56    ];
    57
    58    return (
    59      <div className="min-h-screen" style={{ padding: '20px' }}>
    60        {/* Header */}
    61        <div style={{
    62          textAlign: 'center',
    63          marginBottom: '40px',
    64          padding: '40px 20px'
    65        }}>
    66          <div style={{
    67            display: 'inline-block',
    68            background: 'rgba(255, 237, 78, 0.1)',
    69            border: '2px solid var(--cafes-color)',
    70            borderRadius: '15px',
    71            padding: '24px',
    72            backdropFilter: 'blur(10px)'
    73          }}>
    74            <h1 style={{
    75              fontSize: '3rem',
    76              color: 'var(--cafes-color)',
    77              textShadow: '0 0 10px var(--cafes-color)',
    78              marginBottom: '16px'
    79            }}>
    80              ☕ Cafes
    81            </h1>
    82            <p style={{
    83              color: 'var(--text-secondary)',
    84              fontSize: '1.2rem'
    85            }}>
    86              Experience the rich coffee culture of Iraq & Kurdistan
    87            </p>
    88          </div>
    89        </div>
    90
    91        {/* Back Button */}
    92        <div style={{ marginBottom: '32px' }}>
    93          <Link href="/" className="neon-button cafes">
    94            ← Back to Home
    95          </Link>
    96        </div>
    97
    98        {/* Featured Cafes Grid */}
    99        <div style={{
   100          marginBottom: '60px'
   101        }}>
   102          <h2 style={{
   103            textAlign: 'center',
   104            color: 'var(--cafes-color)',
   105            fontSize: '2.5rem',
   106            marginBottom: '32px',
   107            textShadow: '0 0 10px var(--cafes-color)'
   108          }}>
   109            Featured Cafes
   110          </h2>
   111
   112          <div style={{
   113            display: 'grid',
   114            gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
   115            gap: '24px',
   116            maxWidth: '1200px',
   117            margin: '0 auto'
   118          }}>
   119            {cafes.map((cafe) => (
   120              <div key={cafe.id} className="neon-card cafes cafes-glow">
   121                <div style={{ padding: '24px' }}>
   122                  {/* Cafe Image/Icon */}
   123                  <div style={{
   124                    width: '100%',
   125                    height: '200px',
   126                    background: 'linear-gradient(135deg, var(--cafes-color), var(--bg-secondary))',
   127                    borderRadius: '12px',
   128                    marginBottom: '20px',
   129                    display: 'flex',
   130                    alignItems: 'center',
   131                    justifyContent: 'center',
   132                    fontSize: '4rem'
   133                  }}>
   134                    {cafe.image}
   135                  </div>
   136
   137                  {/* Cafe Info */}
   138                  <h3 style={{
   139                    color: 'var(--text-primary)',
   140                    fontSize: '1.5rem',
   141                    marginBottom: '8px',
   142                    textShadow: '0 0 5px var(--cafes-color)'
   143                  }}>
   144                    {cafe.name}
   145                  </h3>
   146
   147                  <p style={{
   148                    color: 'var(--text-secondary)',
   149                    marginBottom: '16px',
   150                    lineHeight: '1.6'
   151                  }}>
   152                    {cafe.description}
   153                  </p>
   154
   155                  <div style={{
   156                    display: 'grid',
   157                    gridTemplateColumns: '1fr 1fr',
   158                    gap: '12px',
   159                    marginBottom: '16px'
   160                  }}>
   161                    <div>
   162                      <span style={{
   163                        color: 'var(--cafes-color)',
   164                        fontSize: '1.1rem',
   165                        fontWeight: 'bold'
   166                      }}>
   167                        ⭐ {cafe.rating}
   168                      </span>
   169                    </div>
   170                    <div>
   171                      <span style={{
   172                        color: 'var(--text-tertiary)',
   173                        fontSize: '0.9rem'
   174                      }}>
   175                        📍 {cafe.location}
   176                      </span>
   177                    </div>
   178                    <div>
   179                      <span style={{
   180                        color: 'var(--cafes-color)',
   181                        fontSize: '0.9rem',
   182                        fontWeight: '600'
   183                      }}>
   184                        ✨ {cafe.specialty}
   185                      </span>
   186                    </div>
   187                    <div>
   188                      <span style={{
   189                        color: 'var(--text-tertiary)',
   190                        fontSize: '0.9rem'
   191                      }}>
   192                        💰 {cafe.priceRange}
   193                      </span>
   194                    </div>
   195                  </div>
   196
   197                  <div style={{
   198                    display: 'flex',
   199                    gap: '12px',
   200                    justifyContent: 'center'
I need to locate the 'tourism' page to explore those subcategories.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/tourism/page.tsx | sed -n '1,200p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function TourismPage() {
     6    const attractions = [
     7      {
     8        id: '1',
     9        name: 'Ancient Babylon',
    10        description: 'Explore the legendary ruins of one of history\'s greatest civilizations',
    11        rating: 4.9,
    12        category: 'Historical Site',
    13        image: '🏛️',
    14        location: 'Babylon, Iraq',
    15        duration: 'Full Day'
    16      },
    17      {
    18        id: '2',
    19        name: 'Kurdish Mountains',
    20        description: 'Breathtaking mountain landscapes and traditional villages',
    21        rating: 4.8,
    22        category: 'Nature & Adventure',
    23        image: '🏔️',
    24        location: 'Kurdistan Region',
    25        duration: '2-3 Days'
    26      },
    27      {
    28        id: '3',
    29        name: 'Marsh Arab Culture',
    30        description: 'Unique wetland ecosystem and ancient way of life',
    31        rating: 4.7,
    32        category: 'Cultural Experience',
    33        image: '🌾',
    34        location: 'Southern Iraq',
    35        duration: '1-2 Days'
    36      },
    37      {
    38        id: '4',
    39        name: 'Baghdad Museums',
    40        description: 'World-class artifacts and Iraqi heritage collections',
    41        rating: 4.6,
    42        category: 'Museums & Culture',
    43        image: '🏺',
    44        location: 'Baghdad',
    45        duration: 'Half Day'
    46      }
    47    ];
    48
    49    const tourismCategories = [
    50      { name: 'Historical Sites', icon: '🏛️', count: 45, description: 'Ancient civilizations & monuments' },
    51      { name: 'Natural Wonders', icon: '🌄', count: 32, description: 'Mountains, rivers & landscapes' },
    52      { name: 'Cultural Experiences', icon: '🎭', count: 28, description: 'Local traditions & customs' },
    53      { name: 'Adventure Tours', icon: '🧗', count: 24, description: 'Outdoor activities & exploration' },
    54      { name: 'Religious Sites', icon: '🕌', count: 38, description: 'Sacred places & pilgrimage sites' },
    55      { name: 'City Tours', icon: '🏙️', count: 22, description: 'Urban exploration & city life' }
    56    ];
    57
    58    const highlights = [
    59      {
    60        title: "Mesopotamian Heritage",
    61        description: "Walk through the cradle of civilization and discover 5,000 years of history",
    62        icon: "📜"
    63      },
    64      {
    65        title: "Kurdish Nature",
    66        description: "Experience pristine mountain landscapes and traditional mountain culture",
    67        icon: "🌲"
    68      },
    69      {
    70        title: "Tigris & Euphrates",
    71        description: "Explore the legendary rivers that shaped human civilization",
    72        icon: "🌊"
    73      }
    74    ];
    75
    76    return (
    77      <div className="min-h-screen" style={{ padding: '20px' }}>
    78        {/* Header */}
    79        <div style={{
    80          textAlign: 'center',
    81          marginBottom: '40px',
    82          padding: '40px 20px'
    83        }}>
    84          <div style={{
    85            display: 'inline-block',
    86            background: 'rgba(0, 240, 255, 0.1)',
    87            border: '2px solid var(--tourism-color)',
    88            borderRadius: '15px',
    89            padding: '24px',
    90            backdropFilter: 'blur(10px)'
    91          }}>
    92            <h1 style={{
    93              fontSize: '3rem',
    94              color: 'var(--tourism-color)',
    95              textShadow: '0 0 10px var(--tourism-color)',
    96              marginBottom: '16px'
    97            }}>
    98              📸 Tourism
    99            </h1>
   100            <p style={{
   101              color: 'var(--text-secondary)',
   102              fontSize: '1.2rem'
   103            }}>
   104              Discover the wonders of Iraq & Kurdistan - Where history meets adventure
   105            </p>
   106          </div>
   107        </div>
   108
   109        {/* Back Button */}
   110        <div style={{ marginBottom: '32px' }}>
   111          <Link href="/" className="neon-button tourism">
   112            ← Back to Home
   113          </Link>
   114        </div>
   115
   116        {/* Highlights Section */}
   117        <div style={{ marginBottom: '60px' }}>
   118          <h2 style={{
   119            textAlign: 'center',
   120            color: 'var(--tourism-color)',
   121            fontSize: '2.5rem',
   122            marginBottom: '32px',
   123            textShadow: '0 0 10px var(--tourism-color)'
   124          }}>
   125            Why Visit Iraq & Kurdistan?
   126          </h2>
   127
   128          <div style={{
   129            display: 'grid',
   130            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
   131            gap: '24px',
   132            maxWidth: '1000px',
   133            margin: '0 auto',
   134            marginBottom: '40px'
   135          }}>
   136            {highlights.map((highlight, index) => (
   137              <div key={index} className="neon-card tourism tourism-glow">
   138                <div style={{ padding: '24px', textAlign: 'center' }}>
   139                  <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
   140                    {highlight.icon}
   141                  </div>
   142                  <h3 style={{
   143                    color: 'var(--tourism-color)',
   144                    fontSize: '1.5rem',
   145                    marginBottom: '12px',
   146                    textShadow: '0 0 5px var(--tourism-color)'
   147                  }}>
   148                    {highlight.title}
   149                  </h3>
   150                  <p style={{
   151                    color: 'var(--text-secondary)',
   152                    lineHeight: '1.6'
   153                  }}>
   154                    {highlight.description}
   155                  </p>
   156                </div>
   157              </div>
   158            ))}
   159          </div>
   160        </div>
   161
   162        {/* Featured Attractions */}
   163        <div style={{ marginBottom: '60px' }}>
   164          <h2 style={{
   165            textAlign: 'center',
   166            color: 'var(--tourism-color)',
   167            fontSize: '2.5rem',
   168            marginBottom: '32px',
   169            textShadow: '0 0 10px var(--tourism-color)'
   170          }}>
   171            Featured Attractions
   172          </h2>
   173
   174          <div style={{
   175            display: 'grid',
   176            gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
   177            gap: '24px',
   178            maxWidth: '1200px',
   179            margin: '0 auto'
   180          }}>
   181            {attractions.map((attraction) => (
   182              <div key={attraction.id} className="neon-card tourism tourism-glow">
   183                <div style={{ padding: '24px' }}>
   184                  {/* Attraction Image/Icon */}
   185                  <div style={{
   186                    width: '100%',
   187                    height: '200px',
   188                    background: 'linear-gradient(135deg, var(--tourism-color), var(--bg-secondary))',
   189                    borderRadius: '12px',
   190                    marginBottom: '20px',
   191                    display: 'flex',
   192                    alignItems: 'center',
   193                    justifyContent: 'center',
   194                    fontSize: '4rem'
   195                  }}>
   196                    {attraction.image}
   197                  </div>
   198
   199                  {/* Attraction Info */}
   200                  <h3 style={{
I need to check the src/app/events/page.tsx for event categories and subcategories.

root@66535ad8d509:/workspace/missinggold# ls src/app/venues
page.tsx
I'm opening src/app/venues/page.tsx to review its contents.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/venues/page.tsx | sed -n '1,200p'
     1  import MultiVenueHomepage from '../components/MultiVenueHomepage';
     2
     3  export default function VenuesPage() {
     4    return <MultiVenueHomepage />;
     5  }
     6
     7  export const metadata = {
     8    title: 'Discover Iraq & Kurdistan - Events, Hotels, Restaurants & Activities',
     9    description: 'Complete platform for discovering events, booking hotels, finding restaurants, and exploring activities
in Iraq and Kurdistan Region.',
    10    keywords: 'Iraq, Kurdistan, events, hotels, restaurants, activities, travel, booking',
    11    openGraph: {
    12      title: 'Discover Iraq & Kurdistan - Complete Travel Platform',
    13      description: 'Events, Hotels, Restaurants & Activities all in one place',
    14      images: ['/og-venues.jpg'],
    15    },
    16    twitter: {
    17      card: 'summary_large_image',
    18      title: 'Discover Iraq & Kurdistan - Complete Travel Platform',
    19      description: 'Events, Hotels, Restaurants & Activities all in one place',
    20    },
    21  };
I'll review MARKETING_REVENUE_STRATEGY for revenue insights and reference structure from README.

root@66535ad8d509:/workspace/missinggold# nl -ba MARKETING_REVENUE_STRATEGY.md | sed -n '1,200p'
     1  # 🚀 EVENTRA: COMPREHENSIVE MARKETING & REVENUE STRATEGY
     2  ## Iraq Launch → Global Expansion Roadmap
     3
     4  ---
     5
     6  ## 🎯 **EXECUTIVE SUMMARY**
     7
     8  **Mission**: Launch Eventra as the dominant event platform in Iraq, then rapidly scale across the Middle East using AI-p
owered automation and intelligent localization.
     9
    10  **Strategy**: Start with Iraq's underserved Kurdish and Arabic markets, build automated revenue streams, then replicate
the model across 20+ countries with minimal manual intervention.
    11
    12  **Goal**: $10M ARR by Year 2, $50M ARR by Year 3, across 10+ countries.
    13
    14  ---
    15
    16  ## 🌍 **INTELLIGENT LOCALIZATION STRATEGY**
    17
    18  ### **🧠 AI-POWERED GEO-LANGUAGE DETECTION**
    19
    20  #### **Smart Language Selection System**
    21  ```javascript
    22  // Auto-detect user's optimal language
    23  const detectOptimalLanguage = (userLocation, browserLang, userHistory) => {
    24    // Priority order:
    25    1. User's saved preference (highest priority)
    26    2. Geo-location + cultural mapping
    27    3. Browser language detection
    28    4. Fallback to region default
    29
    30    // Iraq Example:
    31    Baghdad → Arabic (default)
    32    Erbil/Sulaymaniyah → Kurdish (default)
    33    Tourist areas → English option prominent
    34  }
    35  ```
    36
    37  #### **Geo-Cultural Intelligence Map**
    38  ```
    39  IRAQ LOCALIZATION:
    40  🏙️ Baghdad: Arabic (primary), English (business)
    41  🏔️ Erbil: Kurdish (primary), Arabic (secondary), English (business)
    42  🏛️ Sulaymaniyah: Kurdish (primary), Arabic (secondary)
    43  🌍 Tourist hotspots: English prominent with local language
    44
    45  UAE LOCALIZATION:
    46  🏙️ Dubai: English (primary), Arabic (secondary)
    47  🏛️ Abu Dhabi: Arabic (primary), English (business)
    48  🏖️ Tourist areas: English (primary), Arabic (cultural events)
    49
    50  TURKEY LOCALIZATION:
    51  🏙️ Istanbul: Turkish (primary), English (business), Kurdish (southeast)
    52  🏔️ Southeast regions: Kurdish (primary), Turkish (secondary)
    53  ```
    54
    55  ### **🎨 CULTURAL ADAPTATION ENGINE**
    56
    57  #### **Content Customization by Region**
    58  ```
    59  EVENT CATEGORIES (Auto-adapted by location):
    60
    61  IRAQ:
    62  - Kurdish Cultural Events (Newroz, traditional festivals)
    63  - Islamic Religious Events (Ramadan, Eid celebrations)
    64  - Business Conferences (oil, tech, trade)
    65  - Family Events (wedding halls, gatherings)
    66  - Educational Seminars (universities, training)
    67
    68  UAE:
    69  - International Business Events (trade shows, conferences)
    70  - Cultural Festivals (multicultural celebrations)
    71  - Sports Events (Formula 1, football)
    72  - Luxury Events (galas, exhibitions)
    73  - Tech & Innovation (startup events, AI conferences)
    74
    75  TURKEY:
    76  - Cultural Heritage Events (historical celebrations)
    77  - Business Conferences (manufacturing, tourism)
    78  - Kurdish Cultural Events (southeast regions)
    79  - International Events (connecting Europe-Asia)
    80  ```
    81
    82  ---
    83
    84  ## 💰 **EXHAUSTIVE REVENUE STREAM ARCHITECTURE**
    85
    86  ### **🏆 PRIMARY REVENUE STREAMS (High-Volume)**
    87
    88  #### **1. Event Ticketing Commission (40% of revenue)**
    89  ```
    90  PRICING MODEL:
    91  - Free events: $0 commission (build user base)
    92  - Paid events: 2.5% commission (competitive vs Eventbrite's 3-5%)
    93  - Premium events: 3.5% commission (high-value events)
    94  - Corporate events: 4.5% commission (enterprise pricing)
    95
    96  VOLUME PROJECTIONS (Iraq Year 1):
    97  - 1,000 events/month × $50 average ticket × 2.5% = $1,250/month
    98  - Growing to 10,000 events/month × $75 average = $18,750/month
    99  - Annual potential: $150K-$225K from Iraq alone
   100  ```
   101
   102  #### **2. Hotel Booking Integration (25% of revenue)**
   103  ```
   104  PARTNERSHIP MODEL:
   105  - Commission: 8-12% from hotel bookings
   106  - Average booking: $80/night × 2 nights = $160
   107  - Commission per booking: $13-19
   108  - Cross-sell rate: 15% of event attendees
   109
   110  AUTOMATION:
   111  - AI suggests hotels near event venues
   112  - Dynamic pricing based on event dates
   113  - Package deals (event ticket + hotel)
   114  - Instant booking through API integration
   115
   116  PROJECTED REVENUE:
   117  - 100 hotel bookings/month × $15 commission = $1,500/month
   118  - Growing to 1,000 bookings/month = $15,000/month
   119  - Annual potential: $120K-$180K from Iraq alone
   120  ```
   121
   122  #### **3. Travel Package Commissions (15% of revenue)**
   123  ```
   124  SERVICES:
   125  - Flight bookings (5-8% commission)
   126  - Car rentals (10-15% commission)
   127  - Tour packages (15-20% commission)
   128  - Complete travel itineraries
   129
   130  AI AUTOMATION:
   131  - Auto-generate travel packages based on events
   132  - Cross-country event recommendations
   133  - Dynamic pricing optimization
   134  - Partnership with regional airlines
   135
   136  REVENUE EXAMPLE:
   137  - Flight booking: $400 × 5% = $20 commission
   138  - Car rental: $100 × 12% = $12 commission
   139  - Tour package: $200 × 18% = $36 commission
   140  - Total per package: $68 commission
   141  - 50 packages/month = $3,400/month
   142  ```
   143
   144  ### **🎯 SECONDARY REVENUE STREAMS (High-Margin)**
   145
   146  #### **4. Premium Event Listings (10% of revenue)**
   147  ```
   148  PREMIUM FEATURES:
   149  - Featured placement: $20-50/event
   150  - Homepage banner: $100-200/event
   151  - Social media promotion: $30-80/event
   152  - Email marketing inclusion: $25-60/event
   153
   154  AUTOMATION:
   155  - Self-service premium upgrade portal
   156  - AI-optimized placement based on user behavior
   157  - Automated social media posting
   158  - Performance analytics dashboard
   159
   160  MONTHLY POTENTIAL:
   161  - 100 premium listings × $35 average = $3,500/month
   162  ```
   163
   164  #### **5. Corporate Event Management (8% of revenue)**
   165  ```
   166  ENTERPRISE SERVICES:
   167  - Custom event pages: $200-500 per event
   168  - Branded microsites: $500-1,500 per client
   169  - Advanced analytics: $100-300/month per client
   170  - Dedicated support: $200-500/month per client
   171
   172  TARGET CLIENTS (Iraq):
   173  - Oil companies (ExxonMobil, BP, local firms)
   174  - Government agencies (trade ministries)
   175  - International NGOs (UN, World Bank)
   176  - Universities (Baghdad University, American University)
   177
   178  REVENUE POTENTIAL:
   179  - 20 enterprise clients × $400/month = $8,000/month
   180  ```
   181
   182  #### **6. Advertising & Sponsored Content (2% of revenue)**
   183  ```
   184  AD FORMATS:
   185  - Banner ads: $5-15 CPM
   186  - Sponsored event listings: $50-200 per listing
   187  - Newsletter sponsorships: $100-500 per edition
   188  - Video ads: $10-25 CPM
   189
   190  TARGET ADVERTISERS:
   191  - Event venues (wedding halls, hotels)
   192  - Catering companies
   193  - Photography services
   194  - Travel agencies
   195  - Local businesses
   196
   197  AUTOMATION:
   198  - Programmatic ad serving
   199  - AI-optimized ad placement
   200  - Performance tracking
I'll clarify the categories based on the UI structure and reference key datasets. I'll focus on 9 event categories for clarity, citing from the relevant files and include marketing details.

I'll finalize the citations for each section, referencing relevant file lines and datasets for clarity.

I'll list categories with icons and descriptions, citing the translation keys and relevant lines.

root@66535ad8d509:/workspace/missinggold# nl -ba messages/en.json | sed -n '100,140p'
   100    },
   101    "categories": {
   102      "technologyInnovation": "Technology & Innovation",
   103      "businessNetworking": "Business & Networking",
   104      "musicConcerts": "Music & Concerts",
   105      "artsCulture": "Arts & Culture",
   106      "sportsFitness": "Sports & Fitness",
   107      "foodDrink": "Food & Drink",
   108      "learningDevelopment": "Learning & Development",
   109      "healthWellness": "Health & Wellness",
   110      "communitySocial": "Community & Social",
   111      "gamingEsports": "Gaming & Esports",
   112      "spiritualReligious": "Spiritual & Religious",
   113      "familyKids": "Family & Kids",
   114      "outdoorAdventure": "Outdoor & Adventure",
   115      "virtualEvents": "Virtual Events",
   116      "academicConferences": "Academic and Conferences"
   117    },
   118    "login": {
   119      "welcomeBack": "Welcome Back",
   120      "subtitle": "Sign in to your IraqEvents account",
   121      "continueWithGoogle": "Continue with Google",
   122      "orContinueWith": "Or continue with email",
   123      "emailAddress": "Email Address",
   124      "emailPlaceholder": "Enter your email",
   125      "password": "Password",
   126      "passwordPlaceholder": "Enter your password",
   127      "signingIn": "Signing in...",
   128      "signIn": "Sign In",
   129      "noAccount": "Don't have an account?",
   130      "createAccount": "Create one here",
   131      "invalidCredentials": "Invalid email or password",
   132      "googleSignInError": "Failed to sign in with Google"
   133    },
   134    "about": {
   135      "title": "About IraqEvents",
   136      "subtitle": "Connecting communities through amazing events",
   137      "stats": {
   138        "eventsCreated": "Events Created",
   139        "happyUsers": "Happy Users",
   140        "citiesCovered": "Cities Covered",
I need to review the categoryDescriptions lines for further details, especially with nl.

root@66535ad8d509:/workspace/missinggold# nl -ba messages/en.json | sed -n '300,360p'
   300      "december": "December"
   301    },
   302    "categoriesPage": {
   303      "title": "Event Categories",
   304      "subtitle": "Discover amazing events across all categories. From music and technology to food and culture, find exac
tly what interests you.",
   305      "ctaTitle": "Cannot Find Your Category?",
   306      "ctaSubtitle": "Create your own event and start building your community today!"
   307    },
   308    "categoryDescriptions": {
   309      "all": "Discover all types of events happening around you",
   310      "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
   311      "businessNetworking": "Networking events, professional meetups, and business conferences",
   312      "musicConcerts": "Live music, concerts, and musical performances",
   313      "artsCulture": "Art exhibitions, cultural events, and creative workshops",
   314      "sportsFitness": "Sports events, fitness classes, and athletic competitions",
   315      "foodDrink": "Culinary events, food festivals, and dining experiences",
   316      "learningDevelopment": "Educational workshops, skill development, and training sessions",
   317      "healthWellness": "Health seminars, wellness workshops, and medical events",
   318      "communitySocial": "Social gatherings, community events, and meetups",
   319      "gamingEsports": "Gaming tournaments, esports competitions, and gaming meetups",
   320      "spiritualReligious": "Spiritual gatherings, religious events, and faith-based meetings",
   321      "familyKids": "Family-friendly events, children's activities, and parenting workshops",
   322      "outdoorAdventure": "Outdoor activities, adventure sports, and nature experiences",
   323      "virtualEvents": "Online events, webinars, and virtual conferences",
   324      "academicConferences": "Academic conferences, research presentations, and scholarly meetings"
   325    },
   326    "hero": {
   327      "liveEventPlatform": "Live Event Platform",
   328      "registerNow": "Register Now",
   329      "getTickets": "Get Tickets",
   330      "joinSummit": "Join Summit",
   331      "exploreArt": "Explore Art",
   332      "eventStartsIn": "Event Starts In",
   333      "days": "DAYS",
   334      "hours": "HRS",
   335      "minutes": "MIN",
   336      "seconds": "SEC"
   337    },
   338    "register": {
   339      "joinIraqEvents": "Join IraqEvents",
   340      "createAccountSubtitle": "Create your account to start organizing amazing events",
   341      "continueWithGoogle": "Continue with Google",
   342      "orCreateAccount": "Or create account with email",
   343      "fullNameOptional": "Full Name (Optional)",
   344      "enterFullName": "Enter your full name",
   345      "enterEmail": "Enter your email",
   346      "createPassword": "Create a password (min. 6 characters)",
   347      "creatingAccount": "Creating account...",
   348      "createAccount": "Create Account",
   349      "alreadyHaveAccount": "Already have an account?",
   350      "signInHere": "Sign in here"
   351    },
   352    "navigation": {
   353      "home": "Home",
   354      "events": "Events",
   355      "categories": "Categories",
   356      "about": "About",
   357      "login": "Login",
   358      "logout": "Logout",
   359      "dashboard": "Dashboard",
   360      "createEvent": "Create Event",
I'll use nl -ba with a narrower range to confirm the line numbers for restaurants.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/restaurants/page.tsx | sed -n '200,260p'
   200          marginTop: '60px',
   201          textAlign: 'center'
   202        }}>
   203          <h2 style={{
   204            color: 'var(--restaurants-color)',
   205            fontSize: '2.5rem',
   206            marginBottom: '32px',
   207            textShadow: '0 0 10px var(--restaurants-color)'
   208          }}>
   209            Browse by Cuisine
   210          </h2>
   211
   212          <div style={{
   213            display: 'grid',
   214            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
   215            gap: '20px',
   216            maxWidth: '800px',
   217            margin: '0 auto'
   218          }}>
   219            {[
   220              { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
   221              { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
   222              { name: 'Middle Eastern', icon: '🧆', count: 15 },
   223              { name: 'Seafood', icon: '🦐', count: 12 },
   224              { name: 'International', icon: '🍝', count: 20 },
   225              { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
   226            ].map((cuisine, index) => (
   227              <div
   228                key={index}
   229                className="category-icon restaurants restaurants-glow"
   230                style={{
   231                  cursor: 'pointer',
   232                  animationDelay: `${index * 0.1}s`
   233                }}
   234              >
   235                <div style={{ fontSize: '2.5rem', marginBottom: '8px' }}>
   236                  {cuisine.icon}
   237                </div>
   238                <div style={{
   239                  color: 'var(--restaurants-color)',
   240                  fontWeight: '600',
   241                  marginBottom: '4px'
   242                }}>
   243                  {cuisine.name}
   244                </div>
   245                <div style={{
   246                  color: 'var(--text-tertiary)',
   247                  fontSize: '0.9rem'
   248                }}>
   249                  {cuisine.count} places
   250                </div>
   251              </div>
   252            ))}
   253          </div>
   254        </div>
   255
   256        {/* Call to Action */}
   257        <div style={{
   258          textAlign: 'center',
   259          marginTop: '60px',
   260          padding: '40px 20px'
root@66535ad8d509:/workspace/missinggold# nl -ba src/app/cafes/page.tsx | sed -n '40,80p'
    40        description: 'Contemporary cafe with international coffee blends',
    41        rating: 4.7,
    42        priceRange: '$$$',
    43        image: '🥤',
    44        specialty: 'Specialty Coffee',
    45        location: 'Erbil Center'
    46      }
    47    ];
    48
    49    const cafeTypes = [
    50      { name: 'Traditional Coffee Houses', icon: '☕', count: 32, description: 'Authentic Iraqi coffee culture' },
    51      { name: 'Tea Gardens', icon: '🍵', count: 28, description: 'Kurdish tea traditions' },
    52      { name: 'Modern Cafes', icon: '🥤', count: 24, description: 'International coffee & vibes' },
    53      { name: 'Shisha Lounges', icon: '💨', count: 18, description: 'Relaxing hookah experience' },
    54      { name: 'Bakery Cafes', icon: '🥐', count: 22, description: 'Fresh pastries & coffee' },
    55      { name: 'Rooftop Cafes', icon: '🌆', count: 15, description: 'City views & coffee' }
    56    ];
    57
    58    return (
    59      <div className="min-h-screen" style={{ padding: '20px' }}>
    60        {/* Header */}
    61        <div style={{
    62          textAlign: 'center',
    63          marginBottom: '40px',
    64          padding: '40px 20px'
    65        }}>
    66          <div style={{
    67            display: 'inline-block',
    68            background: 'rgba(255, 237, 78, 0.1)',
    69            border: '2px solid var(--cafes-color)',
    70            borderRadius: '15px',
    71            padding: '24px',
    72            backdropFilter: 'blur(10px)'
    73          }}>
    74            <h1 style={{
    75              fontSize: '3rem',
    76              color: 'var(--cafes-color)',
    77              textShadow: '0 0 10px var(--cafes-color)',
    78              marginBottom: '16px'
    79            }}>
    80              ☕ Cafes
I'll grab the line numbers for the 'tourism' section using nl -ba.

root@66535ad8d509:/workspace/missinggold# nl -ba src/app/tourism/page.tsx | sed -n '40,80p'
    40        description: 'World-class artifacts and Iraqi heritage collections',
    41        rating: 4.6,
    42        category: 'Museums & Culture',
    43        image: '🏺',
    44        location: 'Baghdad',
    45        duration: 'Half Day'
    46      }
    47    ];
    48
    49    const tourismCategories = [
    50      { name: 'Historical Sites', icon: '🏛️', count: 45, description: 'Ancient civilizations & monuments' },
    51      { name: 'Natural Wonders', icon: '🌄', count: 32, description: 'Mountains, rivers & landscapes' },
    52      { name: 'Cultural Experiences', icon: '🎭', count: 28, description: 'Local traditions & customs' },
    53      { name: 'Adventure Tours', icon: '🧗', count: 24, description: 'Outdoor activities & exploration' },
    54      { name: 'Religious Sites', icon: '🕌', count: 38, description: 'Sacred places & pilgrimage sites' },
    55      { name: 'City Tours', icon: '🏙️', count: 22, description: 'Urban exploration & city life' }
    56    ];
    57
    58    const highlights = [
    59      {
    60        title: "Mesopotamian Heritage",
    61        description: "Walk through the cradle of civilization and discover 5,000 years of history",
    62        icon: "📜"
    63      },
    64      {
    65        title: "Kurdish Nature",
    66        description: "Experience pristine mountain landscapes and traditional mountain culture",
    67        icon: "🌲"
    68      },
    69      {
    70        title: "Tigris & Euphrates",
    71        description: "Explore the legendary rivers that shaped human civilization",
    72        icon: "🌊"
    73      }
    74    ];
    75
    76    return (
    77      <div className="min-h-screen" style={{ padding: '20px' }}>
    78        {/* Header */}
    79        <div style={{
    80          textAlign: 'center',
Let's compile the citations clearly for all the relevant sections, using proper formatting and structure.
Document application structure and categories
Oct 21
·
missinggold
·
main

Archive

Share

So I want you to act as a. Structure and a lot of development. And I would like you to scrutinize this repo and this local. Folder. And all I want you to do, we have agents who's looking for data collection. So we want to have the full structure of the application side, what's necessary. So I'd like you to study this application starting with priority. We have nine categories, sub 9 main categories or 9 grids. And each grid has each category has subcategories, so I'd like you to list the mall of it and so that we can give it to the agent to collect in all those areas. And. Anything you think that should be considered for? Marketing and stuff."E:\missinggold-fresh"
Copy

Version 1

Version 2

Version 3

Version 4
Platform Overview
The application is a Next.js 15 multi-tenant event and venue platform structured around src/app for route pages, shared components, domain utilities in lib, Prisma schema in prisma, static assets in public, localized copy under messages, and automation scripts in scripts.

Venue data is modeled with Prisma so each record stores a primary category, optional subcategory, city, amenities, cuisine, and other segmentable metadata—giving agents clear fields to populate for downstream filtering and marketing analytics.

Primary Event Category Grid (9 focus areas)
Each event category is exposed in the categories page/grid with iconography, color theme, and descriptive copy that doubles as subcategory guidance for data collection.

Category	Capture these subtopics
Technology & Innovation	Tech talks, hackathons, innovation showcases
Business & Networking	Networking events, professional meetups, business conferences
Music & Concerts	Live music, concerts, musical performances
Arts & Culture	Art exhibitions, cultural events, creative workshops
Sports & Fitness	Sports events, fitness classes, athletic competitions
Food & Drink	Culinary events, food festivals, dining experiences
Learning & Development	Educational workshops, skill development, training sessions
Health & Wellness	Health seminars, wellness workshops, medical events
Community & Social	Social gatherings, community events, meetups
Extended Event Categories
Agents should also monitor these additional grids surfaced in the UI: Gaming & Esports, Spiritual & Religious, Family & Kids, Outdoor & Adventure, Virtual Events, and Academic Conferences.

Venue Verticals & Subcategories
Multi-venue navigation tabs organize inventory into All, Events, Hotels, Restaurants, and Activities—useful for high-level sourcing assignments.

Restaurants (Food & Drink depth): collect data for cuisines such as Iraqi Traditional, Kurdish Specialties, Middle Eastern, Seafood, International, and Desserts & Sweets, each highlighted with estimated venue counts.

Cafes (Coffee culture depth): target Traditional Coffee Houses, Tea Gardens, Modern Cafes, Shisha Lounges, Bakery Cafes, and Rooftop Cafes, capturing both qualitative descriptors and location counts.

Tourism experiences: gather attraction data across Historical Sites, Natural Wonders, Cultural Experiences, Adventure Tours, Religious Sites, and City Tours for travel-focused campaigns.

Supporting Taxonomies for Agents
Event filters include 10 priority cities (Baghdad, Basra, Mosul, Erbil, Sulaymaniyah, Duhok, Kirkuk, Anbar, Najaf, Karbala) and full calendar month metadata—useful for regional coverage matrices and seasonal marketing pushes.

Venue records accept localized translations, amenities, pricing, tags, and contact channels; ensure data collection covers these fields so localized listings and AI recommendations remain rich.

Marketing & Expansion Considerations
Regional content strategy already outlines priority event themes per market (e.g., Iraq: Kurdish cultural festivals, Islamic religious celebrations, business conferences, family gatherings, educational seminars; UAE: international business, cultural festivals, sports, luxury events, tech; Turkey: cultural heritage, business, Kurdish regional, international connectors). Agents can align outreach pipelines with these localized subsegments.

Revenue levers emphasize event ticketing commissions, hotel booking partnerships, and travel package upsells—data capture should tag opportunities that feed these monetization paths (e.g., pairing events with nearby hotels or travel services).

By aligning data collection with these structured categories, subcategories, and marketing objectives, agents can systematically populate the platform, support localized discovery, and accelerate monetization initiatives.




Logs
Configuring language runtimes...
Running auto setup...
Scanning repository (up to depth 3) for dependency configurations...

--- Checking . ---

==> Processing Node.js project in .
Found package-lock.json. Installing Node.js dependencies with npm ci...

Running: npm ci
npm warn Unknown env config "http-proxy". This will stop working in the next major version of npm.
⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋npm warn deprecated workbox-google-analytics@6.6.0: It is not compatible with newer versions of GA starting with v4, as long as you are using GAv3 it should be ok, but the package is not longer being maintained
⠋⠙⠹⠸⠼⠴⠦npm warn deprecated workbox-cacheable-response@6.6.0: workbox-background-sync@6.6.0
⠦⠧⠇npm warn deprecated sourcemap-codec@1.4.8: Please use @jridgewell/sourcemap-codec instead
⠇⠏⠋npm warn deprecated rollup-plugin-terser@7.0.2: This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser
⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
⠴⠦⠧⠇npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
⠇npm warn deprecated rimraf@2.7.1: Rimraf versions prior to v4 are no longer supported
⠇npm warn deprecated source-map@0.8.0-beta.0: The work that was done in this beta branch won't be included in future versions
⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇
> eventra-venues@2.0.0 postinstall
> prisma generate

⠇warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Prisma schema loaded from prisma/schema.prisma

✔ Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 136ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Interested in query caching in just a few lines of code? Try Accelerate today! https://pris.ly/tip-3-accelerate

⠙
added 856 packages, and audited 858 packages in 25s
⠙
⠙211 packages are looking for funding
⠙  run `npm fund` for details
⠙
found 0 vulnerabilities
⠙npm notice
npm notice New minor version of npm available! 11.4.2 -> 11.6.2
npm notice Changelog: https://github.com/npm/cli/releases/tag/v11.6.2
npm notice To update run: npm install -g npm@11.6.2
npm notice
⠙No installations were performed.
So I want you to act as a. Structure and a lot of development. And I would like you to scrutinize this repo and this local. Folder. And all I want you to do, we have agents who's looking for data collection. So we want to have the full structure of the application side, what's necessary. So I'd like you to study this application starting with priority. We have nine categories, sub 9 main categories or 9 grids. And each grid has each category has subcategories, so I'd like you to list the mall of it and so that we can give it to the agent to collect in all those areas. And. Anything you think that should be considered for? Marketing and stuff."E:\missinggold-fresh"
I need to find the instructions in AGENTS.md for guidance.

ls
root@a53660941a77:/workspace# ls
missinggold
Time to check if the AGENTS.md is available. Let's see what it has!

root@a53660941a77:/workspace# ls missinggold
-                                    LICENSE                             STEP_2_COMPLETION_REPORT.md       middleware.ts
COMPETITIVE_ANALYSIS_MIDDLE_EAST.md  MARKETING_REVENUE_STRATEGY.md       STEP_3_COMPLETION_REPORT.md       next.config.ts
DEPLOYMENT.md                        MULTI_COUNTRY_SCALING_STRATEGY.md   STEP_4_COMPLETION_REPORT.md       node_modules
DEPLOYMENT_GUIDE.md                  NAVIGATION_LOCALE_FIX_MEMORY.md     STRATEGIC_PLATFORM_ANALYSIS.md    package-lock.json
DEPLOYMENT_READY.md                  OPTIMIZATION_REPORT.md              TECHNICAL_ARCHITECTURE.md         package.json
DEPLOYMENT_VERIFICATION.md           OPTIMIZATION_SUMMARY.md             TRANSLATION_ENFORCEMENT_GUIDE.md  postcss.config.mjs
FILE_BY_FILE_OPTIMIZATION.md         PERFORMANCE_OPTIMIZATION_REPORT.md  UI_IMPROVEMENTS.md                prisma
FINAL_OPTIMIZATION_SUMMARY.md        PRACTICAL_MULTI_COUNTRY_GUIDE.md    WARP.md                           public
FIXES_APPLIED.md                     PRODUCTION_DEPLOYMENT.md            _backup                           safe-config.js
I18N_AUDIT_REPORT.json               QUICK_REFERENCE.md                  ai-fix-about.diff                 scripts
I18N_IMPLEMENTATION_SUMMARY.md       README.md                           eslint.config.mjs                 src
IMPLEMENTATION_GUIDE.md              RTL_LOCALIZATION_FIXES.md           i18n.ts                           tailwind.config.js
LAUNCH_CERTIFICATION.md              SECURITY_FIXES_SUMMARY.md           messages                          tsconfig.json
I need to find the AGENTS.md for instructions. Let's search for it!

root@a53660941a77:/workspace# find missinggold -name AGENTS.md -print
root@a53660941a77:/workspace# ls missinggold/src
app  components  lib  types
I think I should look for category information in the data files. Let's search.

root@a53660941a77:/workspace# rg "category" -n missinggold/src
missinggold/src/app/api/events/public/[publicId]/route.ts
24:    category: event.category,

missinggold/src/app/api/events/import/route.ts
16:  category?: string;
58:          category: ev.category || "",

missinggold/src/app/api/events/create/route.ts
58:      category: data.category ?? "",

missinggold/src/app/api/events/route.ts
54:          category: e.category,

missinggold/src/app/categories/page.tsx
13:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-
500 to-pink-500' },
14:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
15:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.b
usinessNetworking'), color: 'from-blue-500 to-cyan-500' },
16:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcer
ts'), color: 'from-pink-500 to-red-500' },
17:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'),
color: 'from-teal-500 to-blue-500' },
18:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitne
ss'), color: 'from-green-500 to-emerald-500' },
19:    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color:
'from-yellow-500 to-orange-500' },
20:    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions
.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
21:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWel
lness'), color: 'from-emerald-500 to-teal-500' },
22:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communi
tySocial'), color: 'from-orange-500 to-red-500' },
23:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },
24:    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.s
piritualReligious'), color: 'from-amber-500 to-yellow-500' },
25:    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'
), color: 'from-sky-500 to-blue-500' },
26:    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoo
rAdventure'), color: 'from-lime-500 to-green-500' },
27:    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEven
ts'), color: 'from-slate-500 to-gray-500' },
28:    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions
.academicConferences'), color: 'from-rose-500 to-red-500' }
46:          {categories.map((category, index) => (
48:              key={category.name}
51:              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-
6 group-hover:scale-110 transition-transform duration-300`}>
52:                <span className="text-3xl">{category.icon}</span>
56:                {category.name}
60:                {category.description}
64:                href={`/events?category=${encodeURIComponent(category.key)}`}
65:                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-fu
ll font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}

missinggold/src/app/about/page.tsx
151:                  category="community"
211:                      category={member.image}

missinggold/src/app/api/venues/route.ts
15:    const category = url.searchParams.get('category');
34:    if (category) {
35:      where.category = category;
69:        category: venue.category,
70:        subcategory: venue.subcategory,
187:        category: data.category || '',
188:        subcategory: data.subcategory || '',

missinggold/src/app/dashboard/EventForm.tsx
16:  const [category, setCategory] = useState("");
54:          category,
139:            {t('eventForm.category')}
142:            value={category}

missinggold/src/app/components/EventImage.tsx
13:  category?: string;
41:  category = 'general',
48:  // Use provided src or generate placeholder based on category/fallbackType
49:  const baseSrc = src || getPlaceholderImage(category || fallbackType, width, height);
50:  const imageSrc = imageError ? getPlaceholderImage(fallbackType || category, width, height) : baseSrc;

missinggold/src/app/components/MultiVenueHomepage.tsx
15:  category?: string;

missinggold/src/app/components/EventDetailsModal.tsx
14:  category?: string;
33:function translateCategoryLabel(categoryName?: string): string {
34:  if (!categoryName) return '';
53:  const key = map[categoryName];
57:    return key ? (require('../hooks/useTranslations').useTranslations().t(key)) : categoryName;
59:    return categoryName;
144:            {event.category && (
148:                  <h3 className="font-semibold text-gray-900">{t('eventForm.category')}</h3>
151:                  {translateCategoryLabel(event.category)}

missinggold/src/app/globals.css
84:[dir="rtl"] .event-card .event-category {
508:.category-icon {
525:.category-icon:hover {
530:.category-icon.events {
534:.category-icon.hotels {
538:.category-icon.restaurants {
542:.category-icon.cafes {
546:.category-icon.tourism {
550:.category-icon .icon {
555:.category-icon .label {
657:  .category-icon {
672:  .category-icon:hover {
679:.category-icon:focus,
862:.category-icon {
873:.category-icon:hover {
878:.category-icon.events {
882:.category-icon.hotels {
886:.category-icon.restaurants {
890:.category-icon.cafes {
894:.category-icon.tourism {
952:  .category-icon:hover {

missinggold/src/app/components/OptimizedNeonHomepage.tsx
46:  category: string;
87:      category: 'events'
...
144:                color: `var(--${category.color}-color)`,
145:                textShadow: `0 0 5px var(--${category.color}-color)`
147:                {category.name}
154:                {category.count}+ places

missinggold/src/app/components/SkeletonLoader.tsx
164: * Category Grid Skeleton - For category cards

missinggold/src/app/[locale]/events/page.tsx
18:  category?: string;
152:      category: t('demo.events.aiSummit.category'),
165:      category: t('demo.events.musicFestival.category'),
178:      category: t('demo.events.businessWorkshop.category'),
191:      category: t('demo.events.artExhibition.category'),
204:      category: "Food & Drink",
217:      category: "Sports & Fitness",
240:      filtered = filtered.filter(event => event.category === selectedCategory);
288:  const getCategoryIcon = (categoryName: string) => {
289:    const category = categories.find(cat => cat.name === categoryName);
290:    return category ? category.icon : "🎉";
293:  const translateCategory = (categoryName: string): string => {
294:    // Map English category names to translation keys
295:    const categoryMap: { [key: string]: string } = {
314:    const translationKey = categoryMap[categoryName];
315:    return translationKey ? t(translationKey) : categoryName;
318:  const getEventImageCategory = (category: string) => {
329:    return mapping[category] || "community";
463:                    category={getEventImageCategory(event.category || "")}
469:                      {getCategoryIcon(event.category || "")} {translateCategory(event.category || "")}
508:          <h2 className="text-2xl font-bold text-gray-900 mb-6">{t('events.exploreByCategory') || 'Explore by category'}</h2
>

missinggold/src/app/tourism/page.tsx
12:      category: 'Historical Site',
22:      category: 'Nature & Adventure',
32:      category: 'Cultural Experience',
42:      category: 'Museums & Culture',
246:                      🎯 {attraction.category}
304:          {tourismCategories.map((category, index) => (
317:                {category.icon}
326:                {category.name}
333:                {category.description}
339:                {category.count} places

missinggold/src/app/[locale]/categories/page.tsx
28:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-
500 to-pink-500' },
29:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
30:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.b
usinessNetworking'), color: 'from-blue-500 to-cyan-500' },
31:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcer
ts'), color: 'from-pink-500 to-red-500' },
32:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'),
color: 'from-teal-500 to-blue-500' },
33:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitne
ss'), color: 'from-green-500 to-emerald-500' },
34:    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color:
'from-yellow-500 to-orange-500' },
35:    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions
.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
36:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWel
lness'), color: 'from-emerald-500 to-teal-500' },
37:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communi
tySocial'), color: 'from-orange-500 to-red-500' },
38:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },
39:    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.s
piritualReligious'), color: 'from-amber-500 to-yellow-500' },
40:    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'
), color: 'from-sky-500 to-blue-500' },
41:    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoo
rAdventure'), color: 'from-lime-500 to-green-500' },
42:    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEven
ts'), color: 'from-slate-500 to-gray-500' },
43:    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions
.academicConferences'), color: 'from-rose-500 to-red-500' }
61:          {categories.map((category, index) => (
63:              key={category.name}
66:              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-
6 group-hover:scale-110 transition-transform duration-300`}>
67:                <span className="text-3xl">{category.icon}</span>
71:                {category.name}
75:                {category.description}
79:                href={language === 'en' ? `/events?category=${encodeURIComponent(category.key)}` : `/${language}/events?categ
ory=${encodeURIComponent(category.key)}`}
80:                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-fu
ll font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}

missinggold/src/app/[locale]/event/[publicId]/page.tsx
19:  category?: string;
223:                      <div className="font-semibold text-gray-900">{t('events.category')}</div>
224:                      <div className="text-gray-600">{event.category || t('common.general')}</div>

missinggold/src/app/restaurants/page.tsx
229:              className="category-icon restaurants restaurants-glow"

missinggold/src/app/page-original.tsx
88:      category: "tech"
100:      category: "music"
112:      category: "business"
124:      category: "art"
191:  const getCategoryIcon = (category: string) => {
221:    return icons[category?.toLowerCase().replace(/[^a-z]/g, '')] || '🎦';
224:  const getCategoryTranslation = (category: string) => {
225:    const categoryMap: { [key: string]: string } = {
253:    const key = categoryMap[category?.toLowerCase().replace(/[^a-z]/g, '')];
254:    return key ? t(key) : category;
257:  const getEventImageCategory = (category: string) => {
258:    const categoryMap: { [key: string]: string } = {
271:    return categoryMap[category?.toLowerCase()] || 'other';
298:          category: "technology",
311:          category: "music",
324:          category: "business",
337:          category: "art",
414:                  category={slide.category}
415:                  fallbackType={slide.category as any}
597:              {[...categories, ...categories, ...categories].map((category, index) => (
599:                  key={`category-${index}`}
601:                  onClick={() => setSelectedCategory(category.name)}
604:                    {category.icon}
607:                    {category.name}
721:                        category={getEventImageCategory(event.category || "")}
725:                          {getCategoryIcon(event.category || "")} {getCategoryTranslation(event.category || "")}
I'll check the i18n translations for possible subcategories, especially in the messages.

root@a53660941a77:/workspace# ls missinggold/messages
ar.json  en.json  index.ts  ku.json
I'll check the en.json file to define the necessary categories for translations.

root@a53660941a77:/workspace# rg "categories" -n missinggold/messages/en.json
2:  "categories.${event.category}": ""
7:    "categories": "Categories",
101:  "categories": {
302:  "categoriesPage": {
304:    "subtitle": "Discover amazing events across all categories. From music and technology to food and culture, find exactly
what interests you.",
355:    "categories": "Categories",
I'll check the structure around the "categories" object to understand it better.

root@a53660941a77:/workspace# sed -n '101,210p' missinggold/messages/en.json
  "categories": {
    "technologyInnovation": "Technology & Innovation",
    "businessNetworking": "Business & Networking",
    "musicConcerts": "Music & Concerts",
    "artsCulture": "Arts & Culture",
    "sportsFitness": "Sports & Fitness",
    "foodDrink": "Food & Drink",
    "learningDevelopment": "Learning & Development",
    "healthWellness": "Health & Wellness",
    "communitySocial": "Community & Social",
    "gamingEsports": "Gaming & Esports",
    "spiritualReligious": "Spiritual & Religious",
    "familyKids": "Family & Kids",
    "outdoorAdventure": "Outdoor & Adventure",
    "virtualEvents": "Virtual Events",
    "academicConferences": "Academic and Conferences"
  },
  "login": {
    "welcomeBack": "Welcome Back",
    "subtitle": "Sign in to your IraqEvents account",
    "continueWithGoogle": "Continue with Google",
    "orContinueWith": "Or continue with email",
    "emailAddress": "Email Address",
    "emailPlaceholder": "Enter your email",
    "password": "Password",
    "passwordPlaceholder": "Enter your password",
    "signingIn": "Signing in...",
    "signIn": "Sign In",
    "noAccount": "Don't have an account?",
    "createAccount": "Create one here",
    "invalidCredentials": "Invalid email or password",
    "googleSignInError": "Failed to sign in with Google"
  },
  "about": {
    "title": "About IraqEvents",
    "subtitle": "Connecting communities through amazing events",
    "stats": {
      "eventsCreated": "Events Created",
      "happyUsers": "Happy Users",
      "citiesCovered": "Cities Covered",
      "languagesSupported": "Languages Supported"
    },
    "features": {
      "eventDiscovery": {
        "title": "Event Discovery",
        "description": "Find amazing events across Iraq and Kurdistan with our advanced search and filtering system."
      },
      "easyEventCreation": {
        "title": "Easy Event Creation",
        "description": "Create and manage your events with our intuitive event management platform."
      },
      "multiLanguageSupport": {
        "title": "Multi-Language Support",
        "description": "Navigate in Arabic, English, or Sorani Kurdish to make the platform accessible to everyone."
      },
      "mobileFriendly": {
        "title": "Mobile Friendly",
        "description": "Access events and create your own from anywhere with our fully responsive design."
      },
      "flexibleTicketing": {
        "title": "Flexible Ticketing",
        "description": "Support for both free and paid events with secure payment processing."
      },
      "communityFocused": {
        "title": "Community Focused",
        "description": "Connect with event organizers and attendees to build stronger communities."
      }
    },
    "mission": {
      "title": "Our Mission",
      "p1": "We believe that events have the power to bring people together, create lasting memories, and strengthen communities
. Our mission is to make event discovery and creation accessible to everyone across Iraq and Kurdistan.",
      "p2": "Whether you're looking for cultural festivals, business conferences, music concerts, or community gatherings, IraqE
vents is your gateway to discovering what's happening in your city.",
      "p3": "For event organizers, we provide powerful tools to create, promote, and manage events with ease, helping you reach
the right audience and create successful experiences."
    },
    "whyChoose": {
      "title": "Why Choose IraqEvents?",
      "subtitle": "We've built the most comprehensive event platform for Iraq and Kurdistan, designed with our local communities
 in mind."
    },
    "team": {
      "title": "Meet Our Team",
      "subtitle": "We're a passionate team dedicated to bringing people together through events and building stronger communitie
s across Iraq and Kurdistan.",
      "items": {
        "devTeam": {
          "name": "Development Team",
          "role": "Platform Development",
          "description": "Building the future of event management in Iraq"
        },
        "communityTeam": {
          "name": "Community Team",
          "role": "User Support",
          "description": "Helping users create and discover amazing events"
        },
        "localPartners": {
          "name": "Local Partners",
          "role": "Regional Expansion",
          "description": "Expanding our reach across Iraq and Kurdistan"
        }
      }
    },
    "values": {
      "title": "Our Values",
      "subtitle": "These principles guide everything we do as we work to build the best event platform for our region.",
      "items": {
        "communityFirst": {
          "title": "Community First",
          "description": "We prioritize the needs of our local communities and event organizers."
        },
        "trustSafety": {
          "title": "Trust & Safety",
          "description": "We ensure secure transactions and protect user privacy at all times."
root@a53660941a77:/workspace# rg "categoryDescriptions" -n missinggold -g"*.ts*" -g"*.json"
missinggold/public/locales/ar/common.json
410:  "categoryDescriptions": {

missinggold/public/locales/en/common.json
382:  "categoryDescriptions": {

missinggold/public/locales/ku/common.json
404:  "categoryDescriptions": {

missinggold/messages/en.json
308:  "categoryDescriptions": {

missinggold/messages/ar.json
322:  "categoryDescriptions": {

missinggold/messages/ku.json
351:  "categoryDescriptions": {

missinggold/src/app/categories/page.tsx
13:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-
500 to-pink-500' },
14:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
15:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.b
usinessNetworking'), color: 'from-blue-500 to-cyan-500' },
16:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcer
ts'), color: 'from-pink-500 to-red-500' },
17:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'),
color: 'from-teal-500 to-blue-500' },
18:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitne
ss'), color: 'from-green-500 to-emerald-500' },
19:    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color:
'from-yellow-500 to-orange-500' },
20:    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions
.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
21:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWel
lness'), color: 'from-emerald-500 to-teal-500' },
22:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communi
tySocial'), color: 'from-orange-500 to-red-500' },
23:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },
24:    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.s
piritualReligious'), color: 'from-amber-500 to-yellow-500' },
25:    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'
), color: 'from-sky-500 to-blue-500' },
26:    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoo
rAdventure'), color: 'from-lime-500 to-green-500' },
27:    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEven
ts'), color: 'from-slate-500 to-gray-500' },
28:    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions
.academicConferences'), color: 'from-rose-500 to-red-500' }

missinggold/src/app/[locale]/categories/page.tsx
28:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-
500 to-pink-500' },
29:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
30:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.b
usinessNetworking'), color: 'from-blue-500 to-cyan-500' },
31:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcer
ts'), color: 'from-pink-500 to-red-500' },
32:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'),
color: 'from-teal-500 to-blue-500' },
33:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitne
ss'), color: 'from-green-500 to-emerald-500' },
34:    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color:
'from-yellow-500 to-orange-500' },
35:    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions
.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
36:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWel
lness'), color: 'from-emerald-500 to-teal-500' },
37:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communi
tySocial'), color: 'from-orange-500 to-red-500' },
38:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },
39:    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.s
piritualReligious'), color: 'from-amber-500 to-yellow-500' },
40:    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'
), color: 'from-sky-500 to-blue-500' },
41:    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoo
rAdventure'), color: 'from-lime-500 to-green-500' },
42:    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEven
ts'), color: 'from-slate-500 to-gray-500' },
43:    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions
.academicConferences'), color: 'from-rose-500 to-red-500' }
I should search for "subcategories" to check if they are defined elsewhere.

root@a53660941a77:/workspace# rg "subcategory" -n missinggold
missinggold/prisma/migrations/20250921112738_add_multi_venue_support/migration.sql
30:    "subcategory" TEXT,

missinggold/prisma/schema.prisma
139:  subcategory   String?

missinggold/src/app/api/venues/route.ts
70:        subcategory: venue.subcategory,
188:        subcategory: data.subcategory || '',
I'll search for "technologySubcategories" to check if there are any category definitions.

root@a53660941a77:/workspace# rg "technology" missinggold/src -n
missinggold/src/app/components/EventDetailsModal.tsx
36:    "Technology & Innovation": "categories.technologyInnovation",

missinggold/src/app/[locale]/events/page.tsx
63:    { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
296:      "Technology & Innovation": "categories.technologyInnovation",

missinggold/src/app/[locale]/categories/page.tsx
29:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },

missinggold/src/app/components/OptimizedNeonHomepage.tsx
92:      description: 'Join leading tech experts for the future of technology in Iraq',

missinggold/src/app/page-original.tsx
60:    { name: t('categories.technologyInnovation'), icon: "💻" },
193:      'technologyinnovation': '💻',
210:      'technology': '💻',
226:      'technologyinnovation': 'categories.technologyInnovation',
242:      'tech': 'categories.technologyInnovation',
243:      'technology': 'categories.technologyInnovation',
260:      'technology': 'tech',
298:          category: "technology",

missinggold/src/app/components/SimpleLanguageProvider.tsx
30:  'categories.technologyInnovation': 'Technology & Innovation',

missinggold/src/app/components/NeonHomepage.tsx
239:                  Join leading tech experts for the future of technology in Iraq

missinggold/src/app/categories/page.tsx
14:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },

missinggold/src/app/dashboard/EventForm.tsx
147:            <option value="technologyInnovation">{t('categories.technologyInnovation')}</option>
I'm looking for subcategory definitions in categoryDescriptions, potentially under "technologyInnovationSub" or similar terms.

root@a53660941a77:/workspace# rg "Subcategories" -n missinggold/messages/en.json
I’ll look for "technologyInnovationSubcategories" and see if there's any related "categoryDetails."

root@a53660941a77:/workspace# rg "technologyInnovation" -n missinggold/messages/en.json
102:    "technologyInnovation": "Technology & Innovation",
310:    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
I'll look through src/app/components/OptimizedNeonHomepage for any category definitions or arrays.

root@a53660941a77:/workspace# sed -n '70,200p' missinggold/src/app/components/OptimizedNeonHomepage.tsx
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156, href: '/restaurants' },
    { id: 'cafes', name: 'Cafes', icon: '☕', color: 'cafes', count: 92, href: '/cafes' },
    { id: 'tourism', name: 'Tourism', icon: '📸', color: 'tourism', count: 73, href: '/tourism' }
  ], []);
}

/**
 * Hook for featured events data
 */
function useFeaturedEvents(): FeaturedEvent[] {
  return useMemo(() => [
    {
      id: '1',
      title: 'Baghdad Cultural Night',
      description: 'Experience traditional Iraqi culture with music, dance, and art',
      icon: '🎭',
      date: 'Oct 15, 2024',
      category: 'events'
    },
    {
      id: '2',
      title: 'Tech Innovation Summit',
      description: 'Join leading tech experts for the future of technology in Iraq',
      icon: '🎪',
      date: 'Oct 28, 2024',
      category: 'events'
    }
  ], []);
}

// ==================== UI COMPONENTS ====================

/**
 * Story Avatar Component - Memoized for performance
 */
const StoryAvatar = memo(({ user }: { user: StoryUser }) => {
  const handleImageError = useCallback((e: React.SyntheticEvent<HTMLImageElement>) => {
    const target = e.currentTarget;
    target.src = `data:image/svg+xml;base64,${btoa(`
      <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="64" height="64" fill="#2D1B4E"/>
        <circle cx="32" cy="24" r="8" fill="#B24BF3"/>
        <path d="M16 48c0-8 7-16 16-16s16 8 16 16" fill="#B24BF3"/>
      </svg>
    `)}`;
  }, []);

  return (
    <div className="story-avatar events-glow">
      <img
        src={user.avatar}
        alt={user.name}
        loading="lazy"
        onError={handleImageError}
      />
      <div className="name">{user.name}</div>
    </div>
  );
});
StoryAvatar.displayName = 'StoryAvatar';

/**
 * Category Card Component - Memoized for performance
 */
const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
  return (
    <Link
      href={category.href}
      className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
      style={{
        textDecoration: 'none',
        animationDelay: `${index * 0.2}s`
      }}
    >
      <div
        className="icon"
        style={{
          fontSize: '3rem',
          filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
        }}
      >
        {category.icon}
      </div>
      <div
        className="label"
        style={{
          fontSize: '1.1rem',
          fontWeight: 'bold',
          color: `var(--${category.color}-color)`,
          textShadow: `0 0 5px var(--${category.color}-color)`
        }}
      >
        {category.name}
      </div>
      <div style={{
        fontSize: '0.9rem',
        color: 'var(--text-secondary)',
        marginTop: '4px'
      }}>
        {category.count}+ places
      </div>
    </Link>
  );
});
CategoryCard.displayName = 'CategoryCard';

/**
 * Event Card Component - Memoized for performance
 */
const EventCard = memo(({ event, featured = false }: { event: FeaturedEvent; featured?: boolean }) => {
  return (
    <div className={`neon-card events events-glow ${featured ? 'featured' : ''}`}>
      <div style={{ padding: '20px' }}>
        <div style={{
          width: '100%',
          height: '150px',
          background: 'linear-gradient(135deg, var(--events-color), var(--bg-secondary))',
          borderRadius: '8px',
          marginBottom: '16px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '3rem'
        }}>
          {event.icon}
        </div>
        <h4 style={{ color: 'var(--text-primary)', marginBottom: '8px', fontSize: '1.2rem' }}>
          {event.title}
        </h4>
        <p style={{ color: 'var(--text-secondary)', fontSize: '0.9rem', marginBottom: '12px' }}>
          {event.description}
I'm checking the top of the file to find where categories are defined.

root@a53660941a77:/workspace# sed -n '1,70p' missinggold/src/app/components/OptimizedNeonHomepage.tsx
"use client";

/**
 * Optimized Neon Homepage Component
 *
 * Performance Optimizations:
 * - Separated business logic from UI (Functional Core, Imperative Shell)
 * - Debounced window resize handlers
 * - Memoized components with React.memo
 * - useMemo for expensive computations
 * - useCallback for stable function references
 * - Lazy loading for images
 * - Intersection Observer for visibility-based rendering
 */

import { useState, useMemo, useCallback, memo } from 'react';
import Link from 'next/link';
import { useLanguage } from './LanguageProvider';
import { useTranslations } from '../hooks/useTranslations';
import { usePersistedState } from '../hooks/useOptimizedState';

// ==================== TYPES ====================

interface StoryUser {
  id: string;
  name: string;
  avatar: string;
  count: number;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: 'events' | 'hotels' | 'restaurants' | 'cafes' | 'tourism';
  count: number;
  href: string;
}

interface FeaturedEvent {
  id: string;
  title: string;
  description: string;
  icon: string;
  date: string;
  category: string;
}

// ==================== BUSINESS LOGIC ====================

/**
 * Hook for story users data
 * Memoized to prevent unnecessary re-computations
 */
function useStoryUsers(): StoryUser[] {
  return useMemo(() => [
    { id: '1', name: 'Ahmed M.', avatar: '/api/placeholder/64/64', count: 245 },
    { id: '2', name: 'Sara K.', avatar: '/api/placeholder/64/64', count: 89 },
    { id: '3', name: 'Omar H.', avatar: '/api/placeholder/64/64', count: 156 }
  ], []);
}

/**
 * Hook for categories data with proper typing and memoization
 */
function useCategories(): Category[] {
  return useMemo(() => [
    { id: 'events', name: 'Events', icon: '📅', color: 'events', count: 124, href: '/events' },
    { id: 'hotels', name: 'Hotels', icon: '🏨', color: 'hotels', count: 87, href: '/hotels' },
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156, href: '/restaurants' },
I'll search for "categories =" to find where the length is set to 9.

root@a53660941a77:/workspace# rg "nine" -n missinggold/src
I'm thinking of checking MultiVenue for 'gridSections' and related categories in another file.

root@a53660941a77:/workspace# rg "grid" missinggold/src/app -n
missinggold/src/app/components/MultiVenueHomepage.tsx
134:                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">

missinggold/src/app/components/EventDetailsModal.tsx
120:          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
181:            <div className="grid grid-cols-1 gap-4">

missinggold/src/app/about/page.tsx
117:          <div className="grid grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8">
133:          <div className="lg:grid lg:grid-cols-2 lg:gap-16 lg:items-center">
174:          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12">
201:          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">
236:          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-16">
342:          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">

missinggold/src/app/components/OptimizedNeonHomepage.tsx
333:        <div className="grid-layout categories">
368:          <div className="grid-layout events">
465:              display: 'grid',
466:              gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',

missinggold/src/app/components/NeonHomepage.tsx
119:          display: 'grid',
120:          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
183:            display: 'grid',
184:            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
274:            display: 'grid',
275:            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',

missinggold/src/app/components/SkeletonLoader.tsx
168:    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
289:          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

missinggold/src/app/dashboard/EventForm.tsx
107:      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
230:      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

missinggold/src/app/tourism/page.tsx
129:          display: 'grid',
130:          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
175:          display: 'grid',
176:          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
218:                  display: 'grid',
219:                  gridTemplateColumns: '1fr 1fr',
298:          display: 'grid',
299:          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',

missinggold/src/app/hotels/page.tsx
78:        display: 'grid',
79:        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',

missinggold/src/app/page-original.tsx
707:              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
751:              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">

missinggold/src/app/dashboard/content/page.tsx
78:          <div className="grid md:grid-cols-3 gap-4 mb-4">

missinggold/src/app/dashboard/EventList.tsx
43:    <div className="mt-4 grid gap-4">

missinggold/src/app/globals.css
1222:.grid-layout {
1223:  display: grid;
1230:.grid-layout {
1231:  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
1236:  .grid-layout.categories {
1237:    grid-template-columns: repeat(2, 1fr);
1240:  .grid-layout.events {
1241:    grid-template-columns: 1fr;
1247:  .grid-layout.categories {
1248:    grid-template-columns: repeat(3, 1fr);
1251:  .grid-layout.events {
1252:    grid-template-columns: repeat(2, 1fr);
1258:  .grid-layout.categories {
1259:    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
1262:  .grid-layout.events {
1263:    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));

missinggold/src/app/admin/monitor/MonitorClient.tsx
53:    <div className="grid grid-cols-1 gap-4">

missinggold/src/app/categories/page.tsx
45:        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">

missinggold/src/app/[locale]/events/page.tsx
380:            <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
449:          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
509:          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">

missinggold/src/app/[locale]/categories/page.tsx
60:        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">

missinggold/src/app/restaurants/page.tsx
91:        display: 'grid',
92:        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
134:                display: 'grid',
135:                gridTemplateColumns: '1fr 1fr',
213:          display: 'grid',
214:          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',

missinggold/src/app/[locale]/event/[publicId]/page.tsx
202:            <div className="grid md:grid-cols-2 gap-8 mb-8">

missinggold/src/app/cafes/page.tsx
113:          display: 'grid',
114:          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
156:                  display: 'grid',
157:                  gridTemplateColumns: '1fr 1fr',
236:          display: 'grid',
237:          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
I think I should look for the categories data in MultiVenue. Let me open MultiVenueHomepage.

root@a53660941a77:/workspace# sed -n '1,160p' missinggold/src/app/components/MultiVenueHomepage.tsx
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';

interface Venue {
  id: string;
  publicId: string;
  type: 'EVENT' | 'HOTEL' | 'RESTAURANT' | 'ACTIVITY' | 'SERVICE';
  title: string;
  description: string;
  location: string;
  city: string;
  category?: string;
  priceRange?: string;
  imageUrl?: string;
  featured: boolean;
  verified: boolean;
  cuisineType?: string;
  eventDate?: string;
  amenities?: string[];
}

export default function MultiVenueHomepage() {
  const [activeTab, setActiveTab] = useState<string>('all');
  const [venues, setVenues] = useState<Venue[]>([]);
  const [loading, setLoading] = useState(true);

  const tabs = [
    { id: 'all', label: 'All', icon: '🌟' },
    { id: 'EVENT', label: 'Events', icon: '🎉' },
    { id: 'HOTEL', label: 'Hotels', icon: '🏨' },
    { id: 'RESTAURANT', label: 'Restaurants', icon: '🍽️' },
    { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
  ];

  useEffect(() => {
    fetchVenues();
  }, [activeTab]);

  const fetchVenues = async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams();
      if (activeTab !== 'all') {
        params.set('type', activeTab);
      }
      params.set('locale', 'en'); // TODO: Get from context

      const response = await fetch(`/api/venues?${params}`);
      const data = await response.json();

      if (data.success) {
        setVenues(data.venues || []);
      }
    } catch (error) {
      console.error('Error fetching venues:', error);
    } finally {
      setLoading(false);
    }
  };

  const getVenueTypeIcon = (type: string) => {
    switch (type) {
      case 'EVENT': return '🎉';
      case 'HOTEL': return '🏨';
      case 'RESTAURANT': return '🍽️';
      case 'ACTIVITY': return '🎯';
      case 'SERVICE': return '🛎️';
      default: return '📍';
    }
  };

  const formatPrice = (priceRange?: string) => {
    if (!priceRange) return null;
    return priceRange;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Hero Section */}
      <section className="relative py-20 px-4 text-center">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            🏰 Discover Iraq & Kurdistan
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Events • Hotels • Restaurants • Activities - All in One Platform
          </p>

          {/* Tab Navigation */}
          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-6 py-3 rounded-full font-semibold transition-all duration-300 ${
                  activeTab === tab.id
                    ? 'bg-blue-600 text-white shadow-lg transform scale-105'
                    : 'bg-white text-gray-700 hover:bg-blue-50 shadow-md'
                }`}
              >
                {tab.icon} {tab.label}
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Venues Grid */}
      <section className="px-4 pb-20">
        <div className="max-w-7xl mx-auto">
          {loading ? (
            <div className="flex justify-center items-center py-20">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
          ) : (
            <>
              {venues.length === 0 ? (
                <div className="text-center py-20">
                  <div className="text-6xl mb-4">🏗️</div>
                  <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    Coming Soon!
                  </h3>
                  <p className="text-gray-600">
                    {activeTab === 'all'
                      ? 'Venues are being added to our platform'
                      : `${tabs.find(t => t.id === activeTab)?.label} will be available soon`
                    }
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                  {venues.map((venue) => (
                    <VenueCard key={venue.id} venue={venue} />
                  ))}
                </div>
              )}
            </>
          )}
        </div>
      </section>

      {/* CTA Section */}
      <section className="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16 px-4">
        <div className="max-w-4xl mx-auto text-center">
          <h2 className="text-3xl font-bold mb-4">
            Join the Platform
          </h2>
          <p className="text-xl mb-8 opacity-90">
            List your business and reach thousands of customers
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Link
              href="/register"
              className="bg-white text-blue-600 px-8 py-3 rounded-full font-semibold hover:bg-blue-50 transition-colors"
            >
              Sign Up Free
            </Link>
I'm looking into the NeonHomepage.tsx file to check for the categories and marketing docs.

root@a53660941a77:/workspace# rg "categories" missinggold/src/app/components/NeonHomepage.tsx -n
36:  const categories: Category[] = [
125:          {categories.map((category) => (
132:                animationDelay: `${categories.indexOf(category) * 0.2}s`
I'll take a look at the categories array.

root@a53660941a77:/workspace# sed -n '1,80p' missinggold/src/app/components/NeonHomepage.tsx
"use client";

import { useState } from 'react';
import Link from 'next/link';
import { useLanguage } from './LanguageProvider';
import { useTranslations } from '../hooks/useTranslations';

interface StoryUser {
  id: string;
  name: string;
  avatar: string;
  count: number;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: 'events' | 'hotels' | 'restaurants' | 'cafes' | 'tourism';
  count: number;
}

export default function NeonHomepage() {
  const { language, isRTL } = useLanguage();
  const { t } = useTranslations();
  const [selectedCity, setSelectedCity] = useState('Baghdad');

  // Story users (mock data)
  const storyUsers: StoryUser[] = [
    { id: '1', name: 'Ahmed M.', avatar: '/api/placeholder/64/64', count: 245 },
    { id: '2', name: 'Sara K.', avatar: '/api/placeholder/64/64', count: 89 },
    { id: '3', name: 'Omar H.', avatar: '/api/placeholder/64/64', count: 156 }
  ];

  // Categories with specific neon colors
  const categories: Category[] = [
    { id: 'events', name: 'Events', icon: '📅', color: 'events', count: 124 },
    { id: 'hotels', name: 'Hotels', icon: '🏨', color: 'hotels', count: 87 },
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156 },
    { id: 'cafes', name: 'Cafes', icon: '☕', color: 'cafes', count: 92 },
    { id: 'tourism', name: 'Tourism', icon: '📸', color: 'tourism', count: 73 }
  ];

  return (
    <div className="min-h-screen">
      {/* Stories Section */}
      <div className="story-section">
        <div className="story-container">
          {/* Add Story Button */}
          <div className="story-avatar add-story">
            <span>+</span>
            <div className="name">Add Story</div>
          </div>

          {/* User Stories */}
          {storyUsers.map((user) => (
            <div key={user.id} className="story-avatar events-glow">
              <img
                src={user.avatar}
                alt={user.name}
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.src = `data:image/svg+xml;base64,${btoa(`
                    <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <rect width="64" height="64" fill="#2D1B4E"/>
                      <circle cx="32" cy="24" r="8" fill="#B24BF3"/>
                      <path d="M16 48c0-8 7-16 16-16s16 8 16 16" fill="#B24BF3"/>
                    </svg>
                  `)}`;
                }}
              />
              <div className="name">{user.name}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Currently Exploring Section */}
      <div className="currently-exploring tourism-glow">
        <h2 className="neon-glow">Currently Exploring</h2>
Hmm, I see the user wants 9 categories, but there might be 15 in the translations.

root@a53660941a77:/workspace# sed -n '40,140p' missinggold/src/app/[locale]/events/page.tsx
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [locale, setLocale] = useState<string>("en");

  const { language, isRTL, setLanguage } = useLanguage();
  const { t } = useTranslations();

  // Get locale from params
  useEffect(() => {
    const getLocale = async () => {
      const resolvedParams = await params;
      setLocale(resolvedParams.locale);
      // Update language context to match the URL locale
      if (['en', 'ar', 'ku'].includes(resolvedParams.locale)) {
        setLanguage(resolvedParams.locale as 'en' | 'ar' | 'ku');
      }
    };
    getLocale();
  }, [params, setLanguage]);

  // Use translated categories
  const categories = [
    { name: t('common.allCategories'), icon: "🎉", key: 'all' },
    { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
    { name: t('categories.businessNetworking'), icon: "💼", key: 'businessNetworking' },
    { name: t('categories.musicConcerts'), icon: "🎵", key: 'musicConcerts' },
    { name: t('categories.artsCulture'), icon: "🎨", key: 'artsCulture' },
    { name: t('categories.sportsFitness'), icon: "⚽", key: 'sportsFitness' },
    { name: t('categories.foodDrink'), icon: "🍽️", key: 'foodDrink' },
    { name: t('categories.learningDevelopment'), icon: "📚", key: 'learningDevelopment' },
    { name: t('categories.healthWellness'), icon: "🏥", key: 'healthWellness' },
    { name: t('categories.communitySocial'), icon: "👥", key: 'communitySocial' },
    { name: t('categories.gamingEsports'), icon: "🎮", key: 'gamingEsports' },
    { name: t('categories.spiritualReligious'), icon: "🕌", key: 'spiritualReligious' },
    { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦", key: 'familyKids' },
    { name: t('categories.outdoorAdventure'), icon: "🏔️", key: 'outdoorAdventure' },
    { name: t('categories.virtualEvents'), icon: "📱", key: 'virtualEvents' },
    { name: t('categories.academicConferences'), icon: "🎓", key: 'academicConferences' }
  ];

  // Use translated cities
  const cities = [
    t('common.allCities'),
    t('cities.baghdad'),
    t('cities.basra'),
    t('cities.mosul'),
    t('cities.erbil'),
    t('cities.sulaymaniyah'),
    t('cities.duhok'),
    t('cities.kirkuk'),
    t('cities.anbar'),
    t('cities.najaf'),
    t('cities.karbala')
  ];

  // Use translated months (memoized)
  const months = React.useMemo(() => ([
    t('common.allMonths'),
    t('months.january'), t('months.february'), t('months.march'),
    t('months.april'), t('months.may'), t('months.june'),
    t('months.july'), t('months.august'), t('months.september'),
    t('months.october'), t('months.november'), t('months.december')
  ]), [language]);

  // Initialize filter states with translations when they're loaded
  useEffect(() => {
    if (t && selectedCategory === '') {
      setSelectedCategory(t('common.allCategories'));
      setSelectedCity(t('common.allCities'));
      setSelectedMonth(t('common.allMonths'));
    }
  }, [t, selectedCategory, selectedCity, selectedMonth]);

  // Fetch events
  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await fetch(`/api/events?type=public&lang=${locale}`);
        if (response.ok) {
          const eventsData = await response.json();
          setEvents(eventsData);
          setFilteredEvents(eventsData);
        } else {
          console.error('Failed to fetch events');
          // Set some demo events for now
          setEvents(demoEvents);
          setFilteredEvents(demoEvents);
        }
      } catch (error) {
        console.error('Error fetching events:', error);
        // Set some demo events for now
        setEvents(demoEvents);
        setFilteredEvents(demoEvents);
      } finally {
        setLoading(false);
      }
    };

    if (locale) {
      fetchEvents();
    }
I'll check if 'categoryDescriptions' in common.json has 'gridSections' with 9 items.

root@a53660941a77:/workspace# sed -n '382,470p' missinggold/public/locales/en/common.json
  "categoryDescriptions": {
    "all": "All Categories",
    "technologyInnovation": "Latest in tech, AI, and digital innovation",
    "businessNetworking": "Professional development and networking opportunities",
    "musicConcerts": "Live music performances and concerts",
    "artsCulture": "Art exhibitions, cultural events, and heritage",
    "sportsFitness": "Sports events, fitness activities, and wellness",
    "foodDrink": "Culinary experiences, food festivals, and tastings",
    "learningDevelopment": "Educational workshops and skill development",
    "healthWellness": "Health, wellness, and mental health events",
    "communitySocial": "Community gatherings and social events",
    "gamingEsports": "Gaming tournaments and esports competitions",
    "spiritualReligious": "Religious ceremonies and spiritual gatherings",
    "familyKids": "Family-friendly events and kids activities",
    "outdoorAdventure": "Outdoor activities and adventure sports",
    "virtualEvents": "Online events and virtual experiences",
    "academicConferences": "Academic conferences and research presentations"
  },
  "categoriesPage": {
    "title": "Event Categories",
    "subtitle": "Discover events that match your interests",
    "ctaTitle": "Ready to Create Your Event?",
    "ctaSubtitle": "Join thousands of event organizers using our platform"
  },
  "reset": {
    "emailSent": "Reset email sent successfully",
    "sending": "Sending...",
    "sendResetLink": "Send Reset Link"
  },
  "demo": {
    "events": {
      "aiSummit": {
        "title": "AI Innovation Summit",
        "description": "Join us for a comprehensive exploration of artificial intelligence and machine learning technologies tha
t are shaping the future.",
        "location": "Baghdad Tech Center, Baghdad",
        "category": "Technology & Innovation"
      },
      "musicFestival": {
        "title": "Kurdish Music Festival",
        "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary Kurdish artists.",
        "location": "Central Park, Erbil",
        "category": "Music & Concerts"
      },
      "businessWorkshop": {
        "title": "Business Leadership Workshop",
        "description": "Learn essential leadership skills and networking strategies for business growth in the Middle East marke
t.",
        "location": "Business District, Basra",
        "category": "Business & Networking"
      },
      "artExhibition": {
        "title": "Modern Art Exhibition",
        "description": "Discover contemporary Iraqi and international art in this groundbreaking exhibition featuring 50+ artist
s.",
        "location": "Culture Center, Mosul",
        "category": "Arts & Culture"
      }
    }
  }
}root@a53660941a77:/workspace#
I think I need to check if subcategories are defined under technologyInnovation.subcategories.

}root@a53660941a77:/workspace# rg "subcategories" -n missinggold/public/locales/en/common.json
I’ll check src/types to see if the file might be there.

root@a53660941a77:/workspace# ls missinggold/src/types
next-pwa.d.ts
I wonder if categories are defined in src/app/page.tsx. I'll check the main page.

root@a53660941a77:/workspace# ls missinggold/src/app
'[locale]'   api          components   favicon.ico   hotels        login               page.tsx        reset         utils
 about       cafes        dashboard    globals.css   layout.tsx    page-neon.tsx       providers.tsx   restaurants   venues
 admin       categories   events       hooks         loading.tsx   page-original.tsx   register        tourism
I'll review page.tsx since it's the main entry point.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/page.tsx                                                      ﻿
"use client";

import MultiVenueHomepage from "./components/MultiVenueHomepage";
import Navigation from "./components/Navigation";

/**
 * Home Page - Multi-Venue Platform
 *
 * Features:
 * - Events, Hotels, Restaurants, Activities, Services
 * - Tabbed navigation
 * - Venue listings
 */

export default function Home() {
  return (
    <>
      <Navigation />
      <MultiVenueHomepage />
    </>
  );
}
I think it's time to look at the navigation and double-check the categories.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/components/Navigation.tsx
"use client";

import { useSession, signOut } from "next-auth/react";
import Link from "next/link";
import { useState, useEffect } from "react";
import { useLanguage } from "./LanguageProvider";
import { useTranslations } from "../hooks/useTranslations";
import ResponsiveButton from "./ResponsiveButton";

export default function Navigation() {
  const { data: session } = useSession();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { language, setLanguage, isRTL } = useLanguage();
  const { t } = useTranslations();

  const showTopBanner = (process.env.NEXT_PUBLIC_SHOW_TOP_BANNER === 'true');

  // Auto-open mobile menu on initial load for mobile screens to avoid CSS conflicts
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const isMobile = window.innerWidth < 768; // md breakpoint
      if (isMobile) {
        setIsMenuOpen(true);
      }
    }
  }, []);

  return (
    <>
      {/* Top Notification Bar (hidden in production by default) */}
      {showTopBanner && (
        <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white py-2 text-center text-sm font-medium">
          🎉 {t('navigation.aiRecommendations')}
          <Link href="/register" className="underline ml-2 font-semibold hover:text-yellow-300">
            {t('navigation.tryItFree')} {isRTL ? '←' : '→'}
          </Link>
        </div>
      )}

      {/* Main Navigation */}
      <nav className="neon-nav events-glow sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <Link href={language === 'en' ? '/' : `/${language}`} className="group flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-var(--events-color) via-var(--tourism-color) to-var(--hotels-colo
r) rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300 events-glow">
                <span className="text-white font-bold text-lg">🇮🇶</span>
              </div>
              <div>
                <span className="text-2xl font-bold text-white neon-glow" style={{ color: 'var(--text-primary)', textShadow: '0
0 10px var(--events-color)' }}>
                  IraqGuide
                </span>
                <div className="text-xs font-medium -mt-1" style={{ color: 'var(--text-secondary)' }}>{t('navigation.eventPlatfo
rm')}</div>
              </div>
            </Link>

            {/* Desktop Menu */}
            <div className="hidden md:flex items-center gap-8">
              <Link href={language === 'en' ? '/' : `/${language}`} className="font-medium transition-colors relative group" sty
le={{ color: 'var(--text-primary)' }}>
                {t('navigation.home')}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/events' : `/${language}/events`} className="font-medium transition-colors relati
ve group" style={{ color: 'var(--text-primary)' }}>
                {t('navigation.events')}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/hotels' : `/${language}/hotels`} className="font-medium transition-colors relati
ve group" style={{ color: 'var(--text-primary)' }}>
                Hotels
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--hotels-color)', boxShadow: '0 0 5px var(--hotels-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/restaurants' : `/${language}/restaurants`} className="font-medium transition-col
ors relative group" style={{ color: 'var(--text-primary)' }}>
                Restaurants
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--restaurants-color)', boxShadow: '0 0 5px var(--restaurants-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/tourism' : `/${language}/tourism`} className="font-medium transition-colors rela
tive group" style={{ color: 'var(--text-primary)' }}>
                Tourism
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--tourism-color)', boxShadow: '0 0 5px var(--tourism-color)' }}></span>
              </Link>
            </div>

            {/* User Menu */}
            <div className={`flex items-center gap-3 ${isRTL ? 'flex-row-reverse' : ''}`}>
              {/* Language Switcher */}
              <div className="relative group hidden sm:block" data-testid="language-switcher">
                <button className="flex items-center gap-2 px-3 py-2 font-medium transition-colors rounded-full" style={{ color:
 'var(--text-primary)' }}>
                  <span className="text-lg">🌐</span>
                  <span className="text-sm" suppressHydrationWarning>
                    {language === 'en' ? 'English' : language === 'ar' ? 'العربية' : 'کوردی'}
                  </span>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7-7 7-7" />
                  </svg>
                </button>
                <div className={`absolute ${isRTL ? 'left-0' : 'right-0'} top-full mt-1 rounded-lg min-w-[160px] opacity-0 invis
ible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50`} style={{ background: 'var(--bg-secondary)',
border: '1px solid var(--events-color)' }}>
                  <button
                    onClick={() => setLanguage('en' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'en' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇺🇸 English
                  </button>
                  <button
                    onClick={() => setLanguage('ar' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'ar' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇮🇶 العربية
                  </button>
                  <button
                    onClick={() => setLanguage('ku' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'ku' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇮🇶 کوردی
                  </button>
                </div>
              </div>

{/* Create Event Link styled as text pill (not a button) */}
              <Link
                href={session ? (language === 'en' ? '/dashboard' : `/${language}/dashboard`) : (language === 'en' ? '/register'
 : `/${language}/register`)}
                className="neon-button tourism tourism-glow"
                style={{ fontSize: '0.9rem', padding: '8px 16px' }}
              >
                <span>+</span>
                {t('navigation.createEvent')}
              </Link>

              {session ? (
                <div className="flex items-center gap-4">
                  <div className="hidden lg:flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify
-center">
                      <span className="text-white text-sm font-semibold">
                        {session.user?.name?.charAt(0) || session.user?.email?.charAt(0) || 'U'}
                      </span>
                    </div>
                    <div className="flex flex-col">
                      <span className="text-sm font-medium text-gray-800">
                        {session.user?.name || 'User'}
                      </span>
                      <span className="text-xs text-gray-500">
                        {session.user?.email}
                      </span>
                    </div>
                  </div>
<Link
                    href={language === 'en' ? '/dashboard' : `/${language}/dashboard`}
                    className="inline-block px-3 py-1.5 rounded-full bg-gray-900 text-white text-sm font-semibold hover:bg-gray-
800 transition-colors"
                  >
                    {t('navigation.dashboard')}
                  </Link>
                  <button
                    onClick={() => signOut()}
                    className="text-gray-600 hover:text-red-600 font-medium transition-colors hidden md:block"
                  >
                    {t('navigation.logout')}
                  </button>
                </div>
              ) : (
                <div className="flex items-center gap-3">
<Link
                    href={language === 'en' ? '/login' : `/${language}/login`}
                    className="inline-block px-4 py-1.5 rounded-full bg-gray-900 text-white text-sm font-semibold hover:bg-gray-
800 transition-colors"
                  >
                    {t('navigation.login')}
                  </Link>
                </div>
              )}

              {/* Mobile Menu Button */}
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="md:hidden text-gray-700 hover:text-purple-600 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              </button>
            </div>
          </div>

          {/* Mobile Menu */}
          <div className={`md:hidden py-4 border-t border-gray-100 bg-white/95 backdrop-blur-md ${isMenuOpen ? 'block' : 'hidden
'}`}>
            <div className="flex flex-col gap-4">
              <Link href={language === 'en' ? '/' : `/${language}`} className="text-gray-700 hover:text-purple-600 font-medium t
ransition-colors">
                  {t('navigation.home')}
                </Link>
                <Link href={language === 'en' ? '/events' : `/${language}/events`} className="text-gray-700 hover:text-purple-60
0 font-medium transition-colors">
                  {t('navigation.events')}
                </Link>
                <Link href={language === 'en' ? '/categories' : `/${language}/categories`} className="text-gray-700 hover:text-p
urple-600 font-medium transition-colors">
                  {t('navigation.categories')}
                </Link>
                <Link href={language === 'en' ? '/about' : `/${language}/about`} className="text-gray-700 hover:text-purple-600
font-medium transition-colors">
                  {t('navigation.about')}
                </Link>
                {!session && (
                  <div className="flex gap-3 pt-2">
                    <Link href={language === 'en' ? '/login' : `/${language}/login`} className="bg-gradient-to-r from-purple-600
 to-blue-600 text-white px-4 py-2 rounded-full font-semibold flex items-center gap-2">
                      <span>🔑</span>
root@a53660941a77:/workspace# sed -n '200,400p' missinggold/src/app/components/Navigation.tsx
                      <span>🔑</span>
                      {t('navigation.login')}
                    </Link>
                  </div>
                )}

                {/* Mobile Language Switcher */}
                <div className="pt-4 border-t border-gray-100 mt-4">
                  <div className="text-sm text-gray-600 mb-2">{t('navigation.language')}</div>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setLanguage('en' as any)}
                      className={`px-3 py-1 text-sm rounded-full font-medium ${
                        language === 'en' ? 'bg-purple-100 text-purple-600' : 'text-gray-600 hover:bg-gray-100'
                      }`}
                    >
                      🇺🇸 EN
                    </button>
                  </div>
                </div>
              </div>
            </div>
        </div>
      </nav>
    </>
  );
}
I need to explore the repo and docs for the 9 categories the user needs.

root@a53660941a77:/workspace# rg "9" missinggold -g"*.md" -n
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md
7:Your current Eventra architecture is exceptionally well-positioned for multi-country expansion. The multilingual foundation, m
odern tech stack, and enterprise-grade security make it a **90% ready** platform for global scaling.
45:- 90% code reuse
234:Total Year 3: $69,000/month = $828,000/year
262:9. **Egypt** 🇪🇬 - Huge market, complex entry
320:- 99.9% uptime across all regions
321:- Translation accuracy >95%
322:- Mobile performance score >90
380:The multilingual foundation, enterprise security, and modern architecture mean you can expand to 5-10 countries with 90% cod
e reuse. This isn't starting over - this is scaling what you've already built masterfully.

missinggold/IMPLEMENTATION_GUIDE.md
465:### 9. Form Management

missinggold/STEP_2_COMPLETION_REPORT.md
6:**Date:** 2025-09-21T22:55:00Z

missinggold/FINAL_OPTIMIZATION_SUMMARY.md
6:**Performance Score**: **95/100** (Lighthouse)
34:4. ✅ **`src/app/components/SkeletonLoader.tsx`** (319 lines)
45:6. ✅ **`src/app/components/OptimizedNavigation.tsx`** (497 lines) 🆕
52:   - 9 custom performance hooks
62:9. ✅ **`IMPLEMENTATION_GUIDE.md`** (720 lines)
91:| **Performance** | 67 | **95** | +28 points ✅ |
92:| **Accessibility** | 72 | **94** | +22 points ✅ |
93:| **Best Practices** | 80 | **95** | +15 points ✅ |
94:| **SEO** | 67 | **98** | +31 points ✅ |
112:| **Window Resize** | 60 calls/sec | 6 calls/sec | **90% reduction** |
115:| **Font Load Time** | 890ms | 320ms | **64% faster** |
233:   - **Result**: 95% reduction in calls
238:   - **Result**: 90% reduction in calls
288:| **Lighthouse Performance** | >90 | 95 | ✅ EXCEEDED |
364:# ✅ Performance: >90
365:# ✅ Accessibility: >90
366:# ✅ Best Practices: >90
367:# ✅ SEO: >90
549:✅ **70-90% reduction** in UI lag
611:- Lighthouse: 95/100
642:- ✅ Performance Audit: PASSED (95/100)
650:**Confidence Level**: **VERY HIGH** (95%+)
660:**React**: 19.1.0

missinggold/TRANSLATION_ENFORCEMENT_GUIDE.md
83:  Files Scanned: 79
84:  Translation Keys Found: 292
85:  Total Translations: 942

missinggold/PERFORMANCE_OPTIMIZATION_REPORT.md
6:**Tech Stack**: Next.js 15, React 19, TypeScript, Prisma, Tailwind CSS
16:✅ **Performance**: 70-90% reduction in UI lag during window resize
394:## 9. Development Guidelines
426:✅ **70-90% reduction** in UI lag and freezing
441:**React Version**: 19.1.0

missinggold/PRACTICAL_MULTI_COUNTRY_GUIDE.md
13:**90% of your code stays exactly the same!** Only these things change per country:
135:## 💻 **WHAT DOESN'T CHANGE (90% of your code)**

missinggold/WARP.md
86:- **React**: Version 19.1.0

missinggold/OPTIMIZATION_SUMMARY.md
24:- **Result**: 90% improvement in resize performance
118:| **Resize Performance** | ~60 renders/sec | ~6 renders/sec | **90% improvement** |
128:**Overall Performance Score**: 95/100 (Excellent)
155:4. **`src/app/components/SkeletonLoader.tsx`** (319 lines)
218:✅ **70-90% reduction** in UI lag and window resize issues
413:- **Excellent performance** (95/100 score)
447:**React**: 19.1.0

missinggold/DEPLOYMENT_READY.md
22:✓ Compiled successfully in 9.8s

missinggold/COMPETITIVE_ANALYSIS_MIDDLE_EAST.md
150:✅ Enterprise security (9.5/10 rating)

missinggold/FILE_BY_FILE_OPTIMIZATION.md
6:**Tech Stack**: Next.js 15, React 19, TypeScript, Prisma
14:// Basic layout - 19 lines
46:// Optimized layout - 159 lines
118:| **Lighthouse SEO** | 67/100 | 98/100 | +31 points |
120:| **Font Load Time** | 890ms | 320ms | **64% faster** |
122:| **Accessibility** | 72/100 | 94/100 | +22 points |
143:# - Performance: >90
144:# - SEO: >95
145:# - Accessibility: >90
146:# - Best Practices: >95
328:| **debounce** | Search input | 60 calls/sec | 3 calls/sec | **95% reduction** |
329:| **throttle** | Scroll events | 100 calls/sec | 10 calls/sec | **90% reduction** |
332:| **memoize** | Computations | Every render | Once | **99% faster** |
436:  if (/[0-9]/.test(password)) score++;
437:  if (/[^a-zA-Z0-9]/.test(password)) score++;
444:  if (!/[0-9]/.test(password)) feedback.push('Add numbers');
445:  if (!/[^a-zA-Z0-9]/.test(password)) feedback.push('Add special characters');
520:| **Email Validation** | None | RFC compliant | **95% of invalid emails** |
739:# ✅ Performance: 90-100
740:# ✅ Accessibility: 90-100
741:# ✅ Best Practices: 90-100
742:# ✅ SEO: 90-100
804:| **Lighthouse Performance** | >90 | 95 | ✅ PASSED |
855:  performance: scores.performance.score >= 0.9,
856:  accessibility: scores.accessibility.score >= 0.9,
857:  bestPractices: scores['best-practices'].score >= 0.9,
858:  seo: scores.seo.score >= 0.9

missinggold/QUICK_REFERENCE.md
291:  return res.status(429).json({

missinggold/OPTIMIZATION_REPORT.md
187:- 🎯 Lighthouse Score: >95
235:- Security: 9/10
238:- Architecture: 9/10

missinggold/STEP_3_COMPLETION_REPORT.md
6:**Date:** 2025-09-21T23:10:00Z
70:- ✅ **Line 69:** `"An error occurred while creating the event."` → `t('eventForm.createEventError')`
71:- ✅ **Line 98:** `'Failed to upload image'` → `t('eventForm.uploadImageFailed')`

missinggold/MARKETING_REVENUE_STRATEGY.md
107:- Commission per booking: $13-19
243:#### **9. Dynamic Pricing Optimization**
746:Month 7-9 (Scale):
828:### **🚀 LAUNCH SEQUENCE (First 90 Days)**
877:#### **Days 61-90: Optimization & Scale**
924:        # 5. Marketing Campaigns (90 minutes → 15 minutes)
1026:- 99.9% uptime guarantee

missinggold/README.md
11:- 💎 **Modern Stack**: Next.js 15, React 19, TypeScript, Prisma

missinggold/NAVIGATION_LOCALE_FIX_MEMORY.md
3:## 📅 **Date**: 2025-09-21T14:17:35Z
49:## 🔧 **FIX APPLIED** - 2025-09-21T14:30:00Z
82:## 🚨 **ADDITIONAL ISSUES DISCOVERED** - 2025-09-21T14:26:03Z
105:## ✅ **LATEST TEST RESULTS** - 2025-09-21T14:45:00Z

missinggold/PRODUCTION_DEPLOYMENT.md
117:# 6th request should return 429
248:- ✅ Rate limiting returns proper 429 responses when exceeded

missinggold/UI_IMPROVEMENTS.md
128:9. `src/app/hooks/useOptimizedState.ts`

missinggold/DEPLOYMENT_VERIFICATION.md
6:**Platform**: Next.js 15 + React 19 + TypeScript
50:| **Lighthouse Performance** | >90 | 95 | ✅ |
51:| **Lighthouse Accessibility** | >90 | 94 | ✅ |
52:| **Lighthouse SEO** | >90 | 98 | ✅ |
53:| **Lighthouse Best Practices** | >90 | 95 | ✅ |
62:**Overall Score**: **95/100** (Excellent) ✅
204:### **9. Browser Compatibility** ✅
207:- ✅ Chrome 90+ (Desktop & Mobile)
210:- ✅ Edge 90+
302:# Performance: >90 ✅
303:# Accessibility: >90 ✅
304:# Best Practices: >90 ✅
305:# SEO: >90 ✅
387:| **Lighthouse Performance** | >90 | ✅ 95/100 |
504:- Lighthouse score: 95/100
545:**Confidence Level**: **HIGH** (95%+)
554:**React**: 19.1.0

missinggold/SECURITY_FIXES_SUMMARY.md
20:- Updated `src/app/api/reset/confirm/route.ts` (lines 17-19)
31:- Proper 429 responses with rate limit headers
144:- **Rate Limiting**: Monitor 429 response rates in logs
157:**After Hardening**: ✅ **9.5/10** - Enterprise-grade security

missinggold/LAUNCH_CERTIFICATION.md
6:**Security Assessment**: 9.5/10 Enterprise-Grade
18:**After Hardening**: ✅ 9.5/10 - Enterprise-grade security
94:*"The Eventra SaaS platform security hardening is complete. We've implemented enterprise-grade security measures including Re
dis-backed rate limiting, runtime secret validation, strict CSP policies, and standardized cryptographic functions. The applicat
ion now scores 9.5/10 on security assessment and is approved for immediate production deployment."*
101:3. **Real Rate Limiting** - Upstash Redis integration with proper 429 responses
162:*Security Level: Enterprise-Grade (9.5/10)*

missinggold/FIXES_APPLIED.md
63:- ✅ **Created** `public/favicon.ico` - Copied from icon-192x192.png
70:- icon-96x96.png
74:- icon-192x192.png

missinggold/TECHNICAL_ARCHITECTURE.md
5:**Stack**: Next.js 15.5.3, React 19.1.0, TypeScript 5, Prisma 6, SQLite
641:- **Lighthouse Score**: 95/100 (Performance)

missinggold/STEP_4_COMPLETION_REPORT.md
6:**Date:** 2025-09-21T23:35:00Z
105:- **Files Scanned:** 79
106:- **Translation Keys Found:** 292
107:- **Total Translations:** 942 (across 3 languages)
109:- **Coverage:** 87% complete (38 missing out of 292 keys)
I'll check SkeletonLoader.tsx and CategoryGrid, and search for gridData next.

root@a53660941a77:/workspace# rg "subCategories" missinggold -n
I’ll search the repo for 'subcategories' to check if any datasets are defined.

root@a53660941a77:/workspace# rg "sub categories" -n missinggold
I think the doc might include a category breakdown, so I'll take a look.

root@a53660941a77:/workspace# rg "category" missinggold/MARKETING_REVENUE_STRATEGY.md -n
I'll check the contents of STRATEGIC_PLATFORM_ANALYSIS.md to understand its categories.

root@a53660941a77:/workspace# rg "category" missinggold -g"*.md" -n
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md
289:- [ ] Local city/category data import

missinggold/IMPLEMENTATION_GUIDE.md
359:    return items.filter(item => item.category === filter);

missinggold/RTL_LOCALIZATION_FIXES.md
16:  - All category translations (Music & Concerts, Sports & Fitness, etc.)
77:2. Try filtering by category: "الموسيقى والحفلات" (Music & Concerts)

missinggold/PERFORMANCE_OPTIMIZATION_REPORT.md
181:- `CategoryGridSkeleton` - For category grids

missinggold/COMPETITIVE_ANALYSIS_MIDDLE_EAST.md
480:**Market reality**: You're not competing in a crowded space - you're creating a new category!

missinggold/OPTIMIZATION_REPORT.md
89:  @@index([category])
164:CREATE INDEX idx_events_category ON "Event"(category);

missinggold/DEPLOYMENT_VERIFICATION.md
141:- ✅ CategoryGridSkeleton (category grids)

missinggold/TECHNICAL_ARCHITECTURE.md
188:Event (id, publicId, date, category, city, coordinates)
453:const formData = { title, description, date, category, ... }
I’ll look in messages/en.json for subcategories like 'categoryDetails' or 'technologyInnovationGrid'.

root@a53660941a77:/workspace# rg "technology" missinggold/messages/en.json -n
102:    "technologyInnovation": "Technology & Innovation",
304:    "subtitle": "Discover amazing events across all categories. From music and technology to food and culture, find exactly
what interests you.",
310:    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
370:      "description": "Join us for a complete exploration of artificial intelligence technology"
I’ll take a look at the code near line 370 to evaluate it.

root@a53660941a77:/workspace# sed -n '300,430p' missinggold/messages/en.json
    "december": "December"
  },
  "categoriesPage": {
    "title": "Event Categories",
    "subtitle": "Discover amazing events across all categories. From music and technology to food and culture, find exactly what
 interests you.",
    "ctaTitle": "Cannot Find Your Category?",
    "ctaSubtitle": "Create your own event and start building your community today!"
  },
  "categoryDescriptions": {
    "all": "Discover all types of events happening around you",
    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
    "businessNetworking": "Networking events, professional meetups, and business conferences",
    "musicConcerts": "Live music, concerts, and musical performances",
    "artsCulture": "Art exhibitions, cultural events, and creative workshops",
    "sportsFitness": "Sports events, fitness classes, and athletic competitions",
    "foodDrink": "Culinary events, food festivals, and dining experiences",
    "learningDevelopment": "Educational workshops, skill development, and training sessions",
    "healthWellness": "Health seminars, wellness workshops, and medical events",
    "communitySocial": "Social gatherings, community events, and meetups",
    "gamingEsports": "Gaming tournaments, esports competitions, and gaming meetups",
    "spiritualReligious": "Spiritual gatherings, religious events, and faith-based meetings",
    "familyKids": "Family-friendly events, children's activities, and parenting workshops",
    "outdoorAdventure": "Outdoor activities, adventure sports, and nature experiences",
    "virtualEvents": "Online events, webinars, and virtual conferences",
    "academicConferences": "Academic conferences, research presentations, and scholarly meetings"
  },
  "hero": {
    "liveEventPlatform": "Live Event Platform",
    "registerNow": "Register Now",
    "getTickets": "Get Tickets",
    "joinSummit": "Join Summit",
    "exploreArt": "Explore Art",
    "eventStartsIn": "Event Starts In",
    "days": "DAYS",
    "hours": "HRS",
    "minutes": "MIN",
    "seconds": "SEC"
  },
  "register": {
    "joinIraqEvents": "Join IraqEvents",
    "createAccountSubtitle": "Create your account to start organizing amazing events",
    "continueWithGoogle": "Continue with Google",
    "orCreateAccount": "Or create account with email",
    "fullNameOptional": "Full Name (Optional)",
    "enterFullName": "Enter your full name",
    "enterEmail": "Enter your email",
    "createPassword": "Create a password (min. 6 characters)",
    "creatingAccount": "Creating account...",
    "createAccount": "Create Account",
    "alreadyHaveAccount": "Already have an account?",
    "signInHere": "Sign in here"
  },
  "navigation": {
    "home": "Home",
    "events": "Events",
    "categories": "Categories",
    "about": "About",
    "login": "Login",
    "logout": "Logout",
    "dashboard": "Dashboard",
    "createEvent": "Create Event",
    "eventPlatform": "Event Platform",
    "aiRecommendations": "AI-Powered Event Recommendations Now Live!",
    "tryItFree": "Try it free",
    "language": "Language"
  },
  "heroSlides": {
    "slide1": {
      "title": "Baghdad AI Innovation Summit",
      "subtitle": "The New Age of Technology",
      "description": "Join us for a complete exploration of artificial intelligence technology"
    },
    "slide2": {
      "title": "Kurdish Music Festival",
      "subtitle": "National Arts and Culture",
      "description": "Experience the rich musical heritage of Kurdistan"
    },
    "slide3": {
      "title": "Business Leadership Workshop",
      "subtitle": "Business Development",
      "description": "Learn essential leadership skills"
    },
    "slide4": {
      "title": "Modern Art Exhibition",
      "subtitle": "Art and Culture",
      "description": "See contemporary art from Iraq and Kurdistan"
    },
    "attendees": "Attendees",
    "sessions": "Sessions",
    "days": "Days",
    "artists": "Artists",
    "stages": "Stages",
    "hours": "Hours",
    "leaders": "Leaders",
    "companies": "Companies",
    "workshops": "Workshops",
    "artworks": "Artworks",
    "galleries": "Galleries",
    "joinSummit": "Join Summit",
    "exploreArt": "Explore Art"
  }
}
I'll search the entire repo for references to 'technologyInnovationSubcategories' and see what I find.

root@a53660941a77:/workspace# rg "Innovation" missinggold -g"*.json" -n
missinggold/public/data/events.json
5:    "title": "AI Innovation Summit",
9:    "category": "Technology & Innovation",
112:    "location": "Innovation Hub, Erbil",

missinggold/I18N_AUDIT_REPORT.json
128:      "hardcoded_text": "AI Innovation Summit",
236:      "hardcoded_text": "AI Innovation Summit",
263:      "hardcoded_text": "Technology & Innovation",
371:      "english_value": "AI Innovation Summit",

missinggold/public/locales/ar/common.json
124:    "technologyInnovation": "التكنولوجيا والابتكار",
412:    "technologyInnovation": "أحدث التقنيات والذكاء الاصطناعي والابتكار الرقمي",

missinggold/public/locales/en/common.json
124:    "technologyInnovation": "Technology & Innovation",
256:          "title": "Innovation",
346:      "title": "AI Innovation Summit Baghdad",
384:    "technologyInnovation": "Latest in tech, AI, and digital innovation",
414:        "title": "AI Innovation Summit",
417:        "category": "Technology & Innovation"

missinggold/public/locales/ku/common.json
118:    "technologyInnovation": "تەکنەلۆژیا و نوێکاری",
406:    "technologyInnovation": "نوێترین تەکنەلۆژیا و AI و داهێنانی دیجیتاڵی",

missinggold/messages/en.json
102:    "technologyInnovation": "Technology & Innovation",
221:          "title": "Innovation",
310:    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
368:      "title": "Baghdad AI Innovation Summit",

missinggold/messages/ar.json
104:    "technologyInnovation": "التكنولوجيا والابتكار",
324:    "technologyInnovation": "لقاءات تقنية، هاكاثونات، وعروض ابتكار",

missinggold/messages/ku.json
189:    "technologyInnovation": "تەکنەلۆژیا و نوێکاری",
353:    "technologyInnovation": "وتووێژی تەکنەلۆژیا و پێشانگای نوێکاری",
I'll list the files in public/data to check for the dataset.

root@a53660941a77:/workspace# ls missinggold/public
apple-touch-icon.png  favicon.ico  globe.svg  icons    manifest.json  next.svg  vercel.svg  workbox-f52fd911.js
data                  file.svg     icon.svg   locales  mockups        sw.js     window.svg
I'll take a look at the public/data directory now.

root@a53660941a77:/workspace# ls missinggold/public/data
events.json
I'm opening the file to see what's inside.

root@a53660941a77:/workspace# cat missinggold/public/data/events.json
[
  {
    "id": "1",
    "publicId": "ai-summit-2025",
    "title": "AI Innovation Summit",
    "description": "Explore AI and machine learning breakthroughs with talks, workshops, and networking.",
    "date": "2025-10-10T10:00:00Z",
    "location": "Baghdad Tech Center, Baghdad",
    "category": "Technology & Innovation",
    "price": 50,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Tech Events Iraq", "email": "tech@iraqevents.com" }
  },
  {
    "id": "2",
    "publicId": "music-festival-erbil",
    "title": "Kurdish Music Festival",
    "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary artists.",
    "date": "2025-10-15T18:00:00Z",
    "location": "Citadel Park, Erbil",
    "category": "Music & Concerts",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Kurdistan Arts Council", "email": "arts@kurdistan.org" }
  },
  {
    "id": "3",
    "publicId": "business-workshop-basra",
    "title": "Business Leadership Workshop",
    "description": "Learn essential leadership skills and networking strategies for growth in the Middle East.",
    "date": "2025-10-20T09:00:00Z",
    "location": "Business District, Basra",
    "category": "Business",
    "price": 75,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Business Development Iraq", "email": "business@iraq.com" }
  },
  {
    "id": "4",
    "publicId": "art-exhibition-mosul",
    "title": "Modern Art Exhibition",
    "description": "Contemporary Iraqi and international art featuring 50+ artists.",
    "date": "2025-11-01T14:00:00Z",
    "location": "Culture Center, Mosul",
    "category": "Arts & Culture",
    "price": 30,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
    "user": { "name": "Mosul Cultural Foundation", "email": "culture@mosul.org" }
  },
  {
    "id": "5",
    "publicId": "food-festival-baghdad",
    "title": "Iraqi Food Festival",
    "description": "Taste authentic Iraqi cuisine from various regions with live cooking demos.",
    "date": "2025-11-05T12:00:00Z",
    "location": "Al-Zawra Park, Baghdad",
    "category": "Food & Drink",
    "price": 15,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Baghdad Culinary Society", "email": "food@baghdad.com" }
  },
  {
    "id": "6",
    "publicId": "sports-tournament-sulaymaniyah",
    "title": "Football Championship",
    "description": "Regional football tournament featuring teams across Kurdistan and Iraq.",
    "date": "2025-11-10T16:00:00Z",
    "location": "Sulaymaniyah Stadium, Sulaymaniyah",
    "category": "Sports & Fitness",
    "price": 25,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Kurdistan Football League", "email": "sports@kurdistan.com" }
  },
  {
    "id": "7",
    "publicId": "health-expo-karbala",
    "title": "Health & Wellness Expo",
    "description": "Exhibitions and talks on wellness, nutrition, and preventive care.",
    "date": "2025-11-18T10:00:00Z",
    "location": "Convention Hall, Karbala",
    "category": "Health & Wellness",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
    "user": { "name": "Iraq Health Network", "email": "health@iraq.org" }
  },
  {
    "id": "8",
    "publicId": "community-day-najaf",
    "title": "Community Volunteering Day",
    "description": "Join local organizations for a day of volunteering and community service.",
    "date": "2025-11-22T09:00:00Z",
    "location": "Old City, Najaf",
    "category": "Community & Social",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Najaf Community Org", "email": "community@najaf.org" }
  },
  {
    "id": "9",
    "publicId": "startup-pitch-erbil",
    "title": "Startup Pitch Night",
    "description": "Early-stage startups pitch to mentors and investors. Open networking.",
    "date": "2025-11-25T19:00:00Z",
    "location": "Innovation Hub, Erbil",
    "category": "Business",
    "price": 10,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Erbil Startup Network", "email": "startups@erbil.io" }
  },
  {
    "id": "10",
    "publicId": "dance-night-duhok",
    "title": "Traditional Dance Night",
    "description": "An evening of Kurdish traditional dances and folk music.",
    "date": "2025-12-01T20:00:00Z",
    "location": "City Theatre, Duhok",
    "category": "Arts & Culture",
    "price": 5,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
    "user": { "name": "Duhok Cultural Center", "email": "culture@duhok.org" }
  }
]
I need to find subcategory data, maybe it's in src/app/hooks. Let's search.

root@a53660941a77:/workspace# rg "subCategory" missinggold/src -n
I think the subcategory data might be configured in a file—I'll search for "categorySections".

root@a53660941a77:/workspace# rg "categories:" missinggold/src -n
missinggold/src/app/components/NeonHomepage.tsx
36:  const categories: Category[] = [

missinggold/src/lib/countries.ts
16:  categories: Array<{
40:    categories: [
68:    categories: [
96:    categories: [
I'll look at the src/lib/countries.ts file to understand its contents.

root@a53660941a77:/workspace# sed -n '1,160p' missinggold/src/lib/countries.ts
// Multi-country configuration for Eventra
// Add new countries here with their specific settings

export interface CountryConfig {
  name: string;
  code: string;
  currency: string;
  currencySymbol: string;
  languages: string[];
  defaultLanguage: string;
  cities: string[];
  timezone: string;
  dateFormat: string;
  features: string[];
  paymentMethods: string[];
  categories: Array<{
    key: string;
    name: string;
    icon: string;
  }>;
}

export const COUNTRY_CONFIGS: Record<string, CountryConfig> = {
  // EXISTING: Iraq (your current setup)
  IQ: {
    name: 'Iraq',
    code: 'IQ',
    currency: 'IQD',
    currencySymbol: 'د.ع',
    languages: ['ar', 'ku', 'en'],
    defaultLanguage: 'ar',
    cities: [
      'Baghdad', 'Basra', 'Erbil', 'Sulaymaniyah',
      'Mosul', 'Duhok', 'Kirkuk', 'Anbar', 'Najaf', 'Karbala'
    ],
    timezone: 'Asia/Baghdad',
    dateFormat: 'DD/MM/YYYY',
    features: ['whatsapp_integration', 'cash_payments', 'multilingual'],
    paymentMethods: ['cash', 'bank_transfer'],
    categories: [
      { key: 'tech', name: 'Technology', icon: '💻' },
      { key: 'music', name: 'Music', icon: '🎵' },
      { key: 'business', name: 'Business', icon: '💼' },
      { key: 'art', name: 'Arts & Culture', icon: '🎨' },
      { key: 'sports', name: 'Sports', icon: '⚽' },
      { key: 'food', name: 'Food & Dining', icon: '🍽️' },
      { key: 'health', name: 'Health & Wellness', icon: '🏥' },
      { key: 'community', name: 'Community', icon: '👥' }
    ]
  },

  // NEW: UAE
  AE: {
    name: 'United Arab Emirates',
    code: 'AE',
    currency: 'AED',
    currencySymbol: 'د.إ',
    languages: ['ar', 'en'],
    defaultLanguage: 'ar',
    cities: [
      'Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman',
      'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain'
    ],
    timezone: 'Asia/Dubai',
    dateFormat: 'DD/MM/YYYY',
    features: ['credit_cards', 'luxury_events', 'international_speakers'],
    paymentMethods: ['credit_card', 'apple_pay', 'google_pay', 'cash'],
    categories: [
      { key: 'business', name: 'Business Networking', icon: '💼' },
      { key: 'luxury', name: 'Luxury Events', icon: '💎' },
      { key: 'tech', name: 'Technology', icon: '💻' },
      { key: 'desert', name: 'Desert Adventures', icon: '🏜️' },
      { key: 'finance', name: 'Finance & Investment', icon: '💰' },
      { key: 'art', name: 'Arts & Culture', icon: '🎨' },
      { key: 'food', name: 'Fine Dining', icon: '🍽️' },
      { key: 'wellness', name: 'Wellness & Spa', icon: '🧘' }
    ]
  },

  // NEW: Saudi Arabia (for future)
  SA: {
    name: 'Saudi Arabia',
    code: 'SA',
    currency: 'SAR',
    currencySymbol: '﷼',
    languages: ['ar', 'en'],
    defaultLanguage: 'ar',
    cities: [
      'Riyadh', 'Jeddah', 'Mecca', 'Medina', 'Dammam',
      'Khobar', 'Tabuk', 'Abha', 'Taif'
    ],
    timezone: 'Asia/Riyadh',
    dateFormat: 'DD/MM/YYYY',
    features: ['vision_2030', 'mega_events', 'cultural_events'],
    paymentMethods: ['credit_card', 'mada', 'apple_pay', 'stc_pay'],
    categories: [
      { key: 'business', name: 'Business', icon: '💼' },
      { key: 'culture', name: 'Cultural Events', icon: '🏛️' },
      { key: 'sports', name: 'Sports', icon: '⚽' },
      { key: 'tech', name: 'Technology', icon: '💻' },
      { key: 'entertainment', name: 'Entertainment', icon: '🎭' },
      { key: 'education', name: 'Education', icon: '📚' }
    ]
  }
};

// Helper functions
export const getCountryConfig = (countryCode: string): CountryConfig | null => {
  return COUNTRY_CONFIGS[countryCode.toUpperCase()] || null;
};

export const getAllCountries = (): CountryConfig[] => {
  return Object.values(COUNTRY_CONFIGS);
};

export const getCountryCities = (countryCode: string): string[] => {
  const config = getCountryConfig(countryCode);
  return config ? config.cities : [];
};

export const getCountryCategories = (countryCode: string) => {
  const config = getCountryConfig(countryCode);
  return config ? config.categories : [];
};root@a53660941a77:/workspace# rg "grid" missinggold/src/app/components -n | head
missinggold/src/app/components/MultiVenueHomepage.tsx:134:                <div className="grid grid-cols-1 md:grid-cols-2 lg:gri
d-cols-3 xl:grid-cols-4 gap-6">
missinggold/src/app/components/EventDetailsModal.tsx:120:          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
missinggold/src/app/components/EventDetailsModal.tsx:181:            <div className="grid grid-cols-1 gap-4">
missinggold/src/app/components/OptimizedNeonHomepage.tsx:333:        <div className="grid-layout categories">
missinggold/src/app/components/OptimizedNeonHomepage.tsx:368:          <div className="grid-layout events">
missinggold/src/app/components/OptimizedNeonHomepage.tsx:465:              display: 'grid',
missinggold/src/app/components/OptimizedNeonHomepage.tsx:466:              gridTemplateColumns: 'repeat(auto-fill, minmax(200px,
 1fr))',
missinggold/src/app/components/NeonHomepage.tsx:119:          display: 'grid',
missinggold/src/app/components/NeonHomepage.tsx:120:          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
missinggold/src/app/components/NeonHomepage.tsx:183:            display: 'grid',
I wonder if event filters include data categories—maybe tied to marketing or venue categories.

root@a53660941a77:/workspace# rg "category" -n missinggold/src/app/components -g"*.tsx"
missinggold/src/app/components/EventImage.tsx
13:  category?: string;
41:  category = 'general',
48:  // Use provided src or generate placeholder based on category/fallbackType
49:  const baseSrc = src || getPlaceholderImage(category || fallbackType, width, height);
50:  const imageSrc = imageError ? getPlaceholderImage(fallbackType || category, width, height) : baseSrc;

missinggold/src/app/components/MultiVenueHomepage.tsx
15:  category?: string;

missinggold/src/app/components/SkeletonLoader.tsx
164: * Category Grid Skeleton - For category cards

missinggold/src/app/components/EventDetailsModal.tsx
14:  category?: string;
33:function translateCategoryLabel(categoryName?: string): string {
34:  if (!categoryName) return '';
53:  const key = map[categoryName];
57:    return key ? (require('../hooks/useTranslations').useTranslations().t(key)) : categoryName;
59:    return categoryName;
144:            {event.category && (
148:                  <h3 className="font-semibold text-gray-900">{t('eventForm.category')}</h3>
151:                  {translateCategoryLabel(event.category)}

missinggold/src/app/components/OptimizedNeonHomepage.tsx
46:  category: string;
87:      category: 'events'
95:      category: 'events'
134:const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
137:      href={category.href}
138:      className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
148:          filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
151:        {category.icon}
158:          color: `var(--${category.color}-color)`,
159:          textShadow: `0 0 5px var(--${category.color}-color)`
162:        {category.name}
169:        {category.count}+ places
334:          {categories.map((category, index) => (
335:            <CategoryCard key={category.id} category={category} index={index} />

missinggold/src/app/components/NeonHomepage.tsx
125:          {categories.map((category) => (
127:              key={category.id}
128:              href={`/${category.id}`}
129:              className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
132:                animationDelay: `${categories.indexOf(category) * 0.2}s`
137:                filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
139:                {category.icon}
144:                color: `var(--${category.color}-color)`,
145:                textShadow: `0 0 5px var(--${category.color}-color)`
147:                {category.name}
154:                {category.count}+ places
I'll check src/app/providers for definitions related to categoryData.

root@a53660941a77:/workspace# rg "category" missinggold/src/app/hooks -n
I’ll peek into tourism/page.tsx to confirm if there are 9 categories listed.

root@a53660941a77:/workspace# rg "tourismCategories" -n missinggold/src/app/tourism/page.tsx
49:  const tourismCategories = [
304:          {tourismCategories.map((category, index) => (
I'll take a look at the data to understand it better.

root@a53660941a77:/workspace# sed -n '49,140p' missinggold/src/app/tourism/page.tsx
  const tourismCategories = [
    { name: 'Historical Sites', icon: '🏛️', count: 45, description: 'Ancient civilizations & monuments' },
    { name: 'Natural Wonders', icon: '🌄', count: 32, description: 'Mountains, rivers & landscapes' },
    { name: 'Cultural Experiences', icon: '🎭', count: 28, description: 'Local traditions & customs' },
    { name: 'Adventure Tours', icon: '🧗', count: 24, description: 'Outdoor activities & exploration' },
    { name: 'Religious Sites', icon: '🕌', count: 38, description: 'Sacred places & pilgrimage sites' },
    { name: 'City Tours', icon: '🏙️', count: 22, description: 'Urban exploration & city life' }
  ];

  const highlights = [
    {
      title: "Mesopotamian Heritage",
      description: "Walk through the cradle of civilization and discover 5,000 years of history",
      icon: "📜"
    },
    {
      title: "Kurdish Nature",
      description: "Experience pristine mountain landscapes and traditional mountain culture",
      icon: "🌲"
    },
    {
      title: "Tigris & Euphrates",
      description: "Explore the legendary rivers that shaped human civilization",
      icon: "🌊"
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(0, 240, 255, 0.1)',
          border: '2px solid var(--tourism-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--tourism-color)',
            textShadow: '0 0 10px var(--tourism-color)',
            marginBottom: '16px'
          }}>
            📸 Tourism
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Discover the wonders of Iraq & Kurdistan - Where history meets adventure
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button tourism">
          ← Back to Home
        </Link>
      </div>

      {/* Highlights Section */}
      <div style={{ marginBottom: '60px' }}>
        <h2 style={{
          textAlign: 'center',
          color: 'var(--tourism-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--tourism-color)'
        }}>
          Why Visit Iraq & Kurdistan?
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
          gap: '24px',
          maxWidth: '1000px',
          margin: '0 auto',
          marginBottom: '40px'
        }}>
          {highlights.map((highlight, index) => (
            <div key={index} className="neon-card tourism tourism-glow">
              <div style={{ padding: '24px', textAlign: 'center' }}>
                <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
                  {highlight.icon}
I need to find nine categories—maybe the restaurants page has restaurantCategories with those.

root@a53660941a77:/workspace# rg "categories =" -n missinggold/src/app/restaurants/page.tsx
I'll search the codebase for 'restaurantCategories' to gather information.

root@a53660941a77:/workspace# rg "restaurant" missinggold/src/app/restaurants/page.tsx -n
6:  const restaurants = [
60:          border: '2px solid var(--restaurants-color)',
67:            color: 'var(--restaurants-color)',
68:            textShadow: '0 0 10px var(--restaurants-color)',
84:        <Link href="/" className="neon-button restaurants">
97:        {restaurants.map((restaurant) => (
98:          <div key={restaurant.id} className="neon-card restaurants restaurants-glow">
104:                background: 'linear-gradient(135deg, var(--restaurants-color), var(--bg-secondary))',
112:                {restaurant.image}
120:                textShadow: '0 0 5px var(--restaurants-color)'
122:                {restaurant.name}
130:                {restaurant.description}
141:                    color: 'var(--restaurants-color)',
145:                    ⭐ {restaurant.rating}
153:                    📍 {restaurant.location}
158:                    color: 'var(--restaurants-color)',
162:                    🍴 {restaurant.cuisine}
170:                    💰 {restaurant.priceRange}
180:                <button className="neon-button restaurants" style={{
204:          color: 'var(--restaurants-color)',
207:          textShadow: '0 0 10px var(--restaurants-color)'
229:              className="category-icon restaurants restaurants-glow"
239:                color: 'var(--restaurants-color)',
262:        <div className="neon-card restaurants restaurants-glow" style={{
268:            color: 'var(--restaurants-color)',
271:            textShadow: '0 0 10px var(--restaurants-color)'
280:            Join Eventra and showcase your restaurant to thousands of food lovers
288:            <button className="neon-button restaurants">
I need to check the top of the file to find the restaurants data.

root@a53660941a77:/workspace# sed -n '1,80p' missinggold/src/app/restaurants/page.tsx
"use client";

import Link from 'next/link';

export default function RestaurantsPage() {
  const restaurants = [
    {
      id: '1',
      name: 'Al-Mansour Palace Restaurant',
      description: 'Authentic Iraqi cuisine in an elegant setting',
      rating: 4.7,
      priceRange: '$$$',
      image: '🍽️',
      cuisine: 'Traditional Iraqi',
      location: 'Baghdad Center'
    },
    {
      id: '2',
      name: 'Kurdistan Grill House',
      description: 'Famous for kebabs and Kurdish specialties',
      rating: 4.5,
      priceRange: '$$',
      image: '🥩',
      cuisine: 'Kurdish Grills',
      location: 'Erbil'
    },
    {
      id: '3',
      name: 'Mesopotamia Fine Dining',
      description: 'Modern Iraqi cuisine with a contemporary twist',
      rating: 4.8,
      priceRange: '$$$$',
      image: '🍷',
      cuisine: 'Modern Iraqi',
      location: 'Baghdad'
    },
    {
      id: '4',
      name: 'Basra Fish Market',
      description: 'Fresh seafood from the Persian Gulf',
      rating: 4.4,
      priceRange: '$$',
      image: '🐟',
      cuisine: 'Seafood',
      location: 'Basra'
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 107, 53, 0.1)',
          border: '2px solid var(--restaurants-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--restaurants-color)',
            textShadow: '0 0 10px var(--restaurants-color)',
            marginBottom: '16px'
          }}>
            🍽️ Restaurants
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Discover the finest dining experiences in Iraq & Kurdistan
          </p>
        </div>
      </div>
I need to locate where categories and subcategories are defined, possibly in scripts.

root@a53660941a77:/workspace# ls missinggold/scripts
add-missing-translations.js  generate-icons.js          monitor.ps1   validate-i18n.js
csv-to-events-json.ts        import-events-from-csv.ts  test-i18n.js  validate-translations.js
I think the user is referencing categories in design, possibly in SkeletonLoader. Let's check.

);
}

/**
 * Category Grid Skeleton - For category cards
 */
export function CategoryGridSkeleton({ count = 5 }: { count?: number }) {
  return (
    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
      {Array.from({ length: count }).map((_, index) => (
        <div
          key={index}
          className="neon-card p-6 text-center space-y-4"
          style={{
            animationDelay: `${index * 0.1}s`,
          }}
        >
          {/* Icon skeleton */}
          <div className="flex justify-center">
            <Skeleton variant="circular" width={64} height={64} animation="wave" />
          </div>

          {/* Label skeleton */}
          <Skeleton width="80%" animation="wave" className="mx-auto" />

          {/* Count skeleton */}
          <Skeleton width="60%" animation="wave" className="mx-auto" />
        </div>
      ))}
    </div>
  );
}

/**
 * Profile Skeleton - For user profiles
 */
export function ProfileSkeleton() {
  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center gap-6 p-6 rounded-lg bg-white/5">
        <Skeleton variant="circular" width={120} height={120} animation="wave" />
        <div className="flex-1 space-y-3">
          <Skeleton width="40%" height={32} animation="wave" />
          <Skeleton width="60%" animation="wave" />
          <div className="flex gap-4 mt-4">
            <Skeleton variant="rectangular" width={120} height={40} animation="wave" />
            <Skeleton variant="rectangular" width={120} height={40} animation="wave" />
          </div>
        </div>
      </div>

      {/* Content sections */}
      <div className="space-y-4">
        {Array.from({ length: 3 }).map((_, index) => (
          <div key={index} className="p-6 rounded-lg bg-white/5 space-y-3">
            <Skeleton width="30%" height={24} animation="wave" />
            <Skeleton width="100%" animation="wave" />
            <Skeleton width="90%" animation="wave" />
            <Skeleton width="70%" animation="wave" />
          </div>
        ))}
      </div>
    </div>
  );
}

/**
 * Navigation Skeleton - For navigation bars
 */
export function NavigationSkeleton() {
I'll search the repo for 'subcategories' to locate any relevant definitions or files.

root@a53660941a77:/workspace# rg "Subcategory" missinggold -i
missinggold/prisma/migrations/20250921112738_add_multi_venue_support/migration.sql
30:    "subcategory" TEXT,

missinggold/prisma/schema.prisma
139:  subcategory   String?

missinggold/src/app/api/venues/route.ts
70:        subcategory: venue.subcategory,
188:        subcategory: data.subcategory || '',
I think the subcategory data might be in the database. I’ll inspect the schema for enums.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/prisma/schema.prisma
// Prisma schema for Eventra MVP (User, Event)
// SQLite for local/dev

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  events    Event[]
  venues    Venue[]  // Multi-venue platform support
  resets    PasswordResetToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id            String   @id @default(cuid())
  // Base fields not localized
  date          DateTime
  category      String?
  imageUrl      String?
  whatsappGroup String?
  whatsappPhone String?
  contactMethod String?
  sourceUrl     String?
  publicId      String   @unique
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  // New city code (display via translations file)
  city          String?
  // Geocoded coordinates (optional)
  latitude      Float?
  longitude     Float?
  // Localized content via translations
  translations  EventTranslation[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Locale {
  en
  ar
  ku
}

model EventTranslation {
  id          String  @id @default(cuid())
  locale      Locale
  title       String
  description String
  location    String
  event       Event   @relation(fields: [eventId], references: [id])
  eventId     String

  @@unique([eventId, locale])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Venue types for multi-platform support
enum VenueType {
  EVENT
  HOTEL
  RESTAURANT
  ACTIVITY
  SERVICE
}

enum VenueStatus {
  ACTIVE
  PENDING
  SUSPENDED
  CLOSED
}

// Multi-venue platform model
model Venue {
  id            String       @id @default(cuid())
  // Core venue info
  type          VenueType
  status        VenueStatus  @default(PENDING)
  publicId      String       @unique

  // Pricing and availability
  priceRange    String?      // e.g., "$25-50", "$$", "Free"
  availability  String?      // JSON string for complex availability

  // Business info
  businessEmail String?
  businessPhone String?
  website       String?
  socialLinks   String?      // JSON array of social media links

  // Location and contact
  address       String?
  city          String?
  latitude      Float?
  longitude     Float?

  // Images and media
  imageUrl      String?
  galleryUrls   String?      // JSON array of additional images
  videoUrl      String?

  // Booking and contact
  bookingUrl    String?
  whatsappPhone String?
  contactMethod String?

  // For events: date/time info
  eventDate     DateTime?

  // For hotels: amenities and features
  amenities     String?      // JSON array of amenities
  features      String?      // JSON array of features

  // For restaurants: cuisine and dietary info
  cuisineType   String?
  dietaryOptions String?     // JSON array (vegan, halal, etc.)

  // SEO and discovery
  tags          String?      // JSON array of tags
  category      String?      // main category
  subcategory   String?

  // Platform management
  featured      Boolean      @default(false)
  verified      Boolean      @default(false)

  // Relations
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  translations  VenueTranslation[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Venue translations for multi-language support
model VenueTranslation {
  id          String  @id @default(cuid())
  locale      Locale

  // Core content
  title       String
  description String
  location    String?

  // Additional localized content
  amenities   String? // JSON array of localized amenities
  features    String? // JSON array of localized features

  // Relations
  venue       Venue   @relation(fields: [venueId], references: [id])
  venueId     String

  @@unique([venueId, locale])
}

// Simple CMS-style content overrides per locale and key
model Content {
  id        String   @id @default(cuid())
  key       String
  locale    Locale
  data      String   // JSON or plain text content
  updatedAt DateTime @updatedAt

  @@unique([key, locale])
}
I’ll look in src/app/utils to see if there’s any dataset there.

root@a53660941a77:/workspace# ls missinggold/src/app/utils
pwa.ts
I’m looking into categoryDetails and wondering if it’s part of translation or a component.

root@a53660941a77:/workspace# rg "category" missinggold/messages/ar.json -n | head
2:  "categories.${event.category}": ""
59:    "category": "الفئة",
86:    "category": "الفئة",
322:  "categoryDescriptions": {
I'm wondering if there's a marketing doc, perhaps in public/mockups. Let's check!

root@a53660941a77:/workspace# ls missinggold/public/mockups
explore.html
I'll check to see if the HTML contains any categories.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/public/mockups/explore.html
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Hub • Events First + Two-Row Categories</title>
  <style>
    :root{--text:#e5e7eb;--muted:#9ca3af}
    html,body{margin:0;padding:0;background:linear-gradient(180deg,#0b1020,#101a33);color:var(--text);font-family:"Noto Naskh Ar
abic",system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}
    .wrap{max-width:420px;margin:0 auto}
    .bar{display:flex;justify-content:space-between;align-items:center;padding:14px 16px}
    select{background:#0d1530;color:#fff;border:1px solid rgba(255,255,255,.08);padding:10px;border-radius:12px;direction:rtl;te
xt-align:right;font-family:inherit}
    .lang button{background:rgba(34,211,238,.15);border:1px solid rgba(34,211,238,.4);color:#a5f3fc;border-radius:999px;padding:
6px 10px;font-size:12px;margin-inline-start:6px}
    .section{padding:10px 16px}
    .card{background:linear-gradient(180deg,#0b1220,#0e1730);border:1px solid rgba(255,255,255,.06);border-radius:16px;box-shado
w:0 10px 30px rgba(0,0,0,.35)}
    .events{padding:14px}
    .row{display:flex;align-items:center;gap:12px;flex-wrap:wrap}
    .title{font-weight:900}
    .chips{display:flex;gap:8px;margin-top:10px;overflow:auto}
    .chip{background:rgba(167,139,250,.15);border:1px solid rgba(167,139,250,.4);color:#ddd;border-radius:999px;padding:8px 10px
;font-size:12px;white-space:nowrap}
    .chip.accent{background:rgba(34,211,238,.2);border-color:rgba(34,211,238,.5)}
    .tiles{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:14px}
    .tile{border-radius:14px;padding:14px;background:linear-gradient(160deg,rgba(167,139,250,.10),rgba(34,211,238,.10));border:1
px solid rgba(255,255,255,.06);text-decoration:none;color:inherit;display:flex;align-items:center;gap:8px}
    .ic{font-size:20px}
    .tt{font-weight:800;font-size:14px}
    .foot{opacity:.7;text-align:center;font-size:12px;padding:10px 0 20px}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="bar">
      <div>🌆 <select id="city"><option>هەولێر</option><option>بەغدا</option><option>سلێمانی</option><option>مووسڵ</option><opti
on>کەرکووک</option></select></div>
      <div class="lang"><button id="ar">العربية</button><button id="ku">کوردی</button></div>
    </div>

    <!-- Events: separate, time-based controls -->
    <div class="section">
      <div class="card events">
        <div class="row">
          <div class="title" id="ev">الفعاليات</div>
        </div>
        <div class="chips" style="margin-top:12px">
          <div class="chip accent" id="today">اليوم</div>
          <div class="chip" id="week">هذا الأسبوع</div>
          <div class="chip" id="next">الأسبوع القادم</div>
          <div class="chip" id="month">حسب الشهر</div>
        </div>
        <div class="chips" style="margin-top:8px" id="months">
          <div class="chip">يناير</div><div class="chip">فبراير</div><div class="chip">مارس</div><div class="chip">أبريل</div>
        </div>
      </div>
    </div>

    <!-- Two-row categories: compact tiles with small icons -->
    <div class="section">
      <div class="card">
        <div class="tiles">
          <a class="tile" href="#"><div class="ic">🏨</div><div class="tt" id="h">الفنادق</div></a>
          <a class="tile" href="#"><div class="ic">🍽️</div><div class="tt" id="r">المطاعم</div></a>
          <a class="tile" href="#"><div class="ic">☕</div><div class="tt" id="c">المقاهي</div></a>
          <a class="tile" href="#"><div class="ic">🗺️</div><div class="tt" id="t">الأماكن السياحية</div></a>
        </div>
      </div>
    </div>

    <div class="foot">نموذج: الفعاليات منفصلة مع فلاتر زمنية + شبكتان للفئات الثابتة</div>
  </div>

  <script>
    const D={ar:{ev:"الفعاليات",today:"اليوم",week:"هذا الأسبوع",next:"الأسبوع القادم",month:"حسب الشهر",months:["يناير","فبراير
","مارس","أبريل"],h:"الفنادق",r:"المطاعم",c:"المقاهي",t:"الأماكن السياحية"},
             ku:{ev:"بۆنەکان",today:"ئەمڕۆ",week:"ئەم هەفتە",next:"هەفتەی داهاتوو",month:"بەپێی مانگ",months:["کانونی دووەم","شو
بات","ئازار","نیسان"],h:"هۆتێلەکان",r:"چێشتخانەکان",c:"قه‌وەخانه‌کان",t:"شوێنە گەشتیاریەکان"}};
    function set(l){
      document.getElementById('ev').textContent=D[l].ev;
      document.getElementById('today').textContent=D[l].today;
      document.getElementById('week').textContent=D[l].week;
      document.getElementById('next').textContent=D[l].next;
      document.getElementById('month').textContent=D[l].month;
      document.getElementById('months').innerHTML='';
      D[l].months.forEach(m=>{const x=document.createElement('div');x.className='chip';x.textContent=m;months.appendChild(x)});
      document.getElementById('h').textContent=D[l].h;
      document.getElementById('r').textContent=D[l].r;
      document.getElementById('c').textContent=D[l].c;
      document.getElementById('t').textContent=D[l].t;
    }
    document.getElementById('ar').onclick=()=>set('ar');
    document.getElementById('ku').onclick=()=>set('ku');
    set('ar');
  </script>
</body>
</html>
The mockup has 4 categories, but the user mentioned 9. I'll search further.

root@a53660941a77:/workspace# rg "grid" missinggold -g"*.md" -n
missinggold/IMPLEMENTATION_GUIDE.md
182:    <div className="grid grid-cols-3 gap-4">

missinggold/PERFORMANCE_OPTIMIZATION_REPORT.md
181:- `CategoryGridSkeleton` - For category grids

missinggold/QUICK_REFERENCE.md
125:// Card grids

missinggold/UI_IMPROVEMENTS.md
62:- ✅ Responsive grid layouts
125:   - Added responsive grid classes

missinggold/DEPLOYMENT_VERIFICATION.md
141:- ✅ CategoryGridSkeleton (category grids)
I'll look for "Technology & Innovation" in the repo to check if it's in the README.

root@a53660941a77:/workspace# rg "Technology & Innovation" -n missinggold
missinggold/public/data/events.json
9:    "category": "Technology & Innovation",

missinggold/public/locales/en/common.json
124:    "technologyInnovation": "Technology & Innovation",
417:        "category": "Technology & Innovation"

missinggold/messages/en.json
102:    "technologyInnovation": "Technology & Innovation",

missinggold/I18N_AUDIT_REPORT.json
263:      "hardcoded_text": "Technology & Innovation",

missinggold/scripts/import-events-from-csv.ts
79:  if (hit(["tech","technology","developer","program","coding","ai","ml","data","innovation"])) return { key: 'tech', display:
 'Technology & Innovation' };

missinggold/scripts/csv-to-events-json.ts
59:  if (hit(['tech','technology','developer','program','coding','ai','ml','data','innovation'])) return { key: 'tech', display:
 'Technology & Innovation' };

missinggold/src/app/components/EventDetailsModal.tsx
36:    "Technology & Innovation": "categories.technologyInnovation",

missinggold/src/app/components/SimpleLanguageProvider.tsx
30:  'categories.technologyInnovation': 'Technology & Innovation',

missinggold/src/app/[locale]/events/page.tsx
296:      "Technology & Innovation": "categories.technologyInnovation",
324:      "Technology & Innovation": "tech",
I'll check if the import-events-from-csv.ts script handles category and sub-category mapping.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/scripts/import-events-from-csv.ts
/*
  Import events from a CSV URL or local file into the Prisma database.

  Usage examples:
    npx tsx scripts/import-events-from-csv.ts --url "https://docs.google.com/spreadsheets/d/FILE_ID/export?format=csv"
    npx tsx scripts/import-events-from-csv.ts --file "./data/events.csv"

  Notes:
  - Attempts best-effort mapping of common headers: title, description, date, time, location, city, category,
    whatsappGroup, whatsappPhone, contactMethod, imageUrl, sourceUrl.
  - If imageUrl is missing, assigns a relevant Unsplash image based on category.
  - Attempts to geocode the location (best effort).
  - Creates EN translation as source, then auto-translates to AR and KU if translator is configured.
*/

import { PrismaClient } from "@prisma/client";
import { createReadStream } from "fs";
import { promisify } from "util";
import { readFile } from "fs/promises";
import path from "path";
import { parse as parseCsv } from "csv-parse/sync";
import { translateTriple } from "../src/lib/translate";
import { geocodeAddress } from "../src/lib/geocode";

const prisma = new PrismaClient();

function log(msg: string) {
  process.stdout.write(`[import] ${msg}\n`);
}

function normalizeHeader(h: string): string {
  return (h || "")
    .toLowerCase()
    .replace(/\s+/g, "_")
    .replace(/[^a-z0-9_]/g, "")
    .trim();
}

function pick(row: Record<string, any>, candidates: string[]): string {
  for (const c of candidates) {
    const norm = normalizeHeader(c);
    for (const key in row) {
      if (normalizeHeader(key) === norm) {
        const v = row[key];
        if (v !== undefined && v !== null && String(v).trim() !== "") return String(v).trim();
      }
    }
  }
  return "";
}

function parseDateTime(row: Record<string, any>): string | null {
  const dt = pick(row, ["datetime", "date_time", "date_and_time"]);
  const d = pick(row, ["date", "event_date"]);
  const t = pick(row, ["time", "event_time"]);
  let candidate = "";
  if (dt) candidate = dt;
  else if (d && t) candidate = `${d} ${t}`;
  else if (d) candidate = d;

  if (!candidate) return null;

  const parsed = new Date(candidate);
  if (isNaN(parsed.getTime())) return null;
  return parsed.toISOString();
}

function classifyCategory(rawTitle: string, rawCategory: string): {
  key: 'tech'|'music'|'business'|'art'|'food'|'sports'|'health'|'community'|'general',
  display: string
} {
  const text = `${rawTitle} ${rawCategory}`.toLowerCase();
  const hit = (words: string[]) => words.some(w => text.includes(w));

  if (hit(["music","concert","festival","dj","band","song"])) return { key: 'music', display: 'Music & Concerts' };
  if (hit(["sport","football","soccer","basketball","match","marathon","fitness"])) return { key: 'sports', display: 'Sports & F
itness' };
  if (hit(["food","restaurant","cafe","dinner","kitchen","cook","culinary","taste"])) return { key: 'food', display: 'Food & Dri
nk' };
  if (hit(["business","startup","marketing","finance","sales","leadership","workshop"])) return { key: 'business', display: 'Bus
iness' };
  if (hit(["tech","technology","developer","program","coding","ai","ml","data","innovation"])) return { key: 'tech', display: 'T
echnology & Innovation' };
  if (hit(["art","gallery","exhibit","painting","sculpture","museum","culture"])) return { key: 'art', display: 'Arts & Culture'
 };
  if (hit(["health","medical","clinic","wellness","fitness","yoga","mental"])) return { key: 'health', display: 'Health & Wellne
ss' };
  if (hit(["community","volunteer","meetup","social","charity","youth","family"])) return { key: 'community', display: 'Communit
y & Social' };

  return { key: 'general', display: 'Community & Social' };
}

function placeholderImage(type: string = 'general', width = 1200, height = 630) {
  const base: Record<string, string> = {
    tech: `https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=${width}&h=${height}&fit=crop&crop=center&auto=format&
q=80`,
    music: `https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=${width}&h=${height}&fit=crop&crop=center&auto=format
&q=80`,
    business: `https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=${width}&h=${height}&fit=crop&crop=center&auto=for
mat&q=80`,
    art: `https://images.unsplash.com/photo-1549490349-8643362247b5?w=${width}&h=${height}&fit=crop&crop=center&auto=format&q=80
`,
    food: `https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=${width}&h=${height}&fit=crop&crop=center&auto=format&
q=80`,
    sports: `https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=${width}&h=${height}&fit=crop&crop=center&auto=forma
t&q=80`,
    health: `https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=${width}&h=${height}&fit=crop&crop=center&auto=format&q
=80`,
    community: `https://images.unsplash.com/photo-1529156069898-49953e39b3ac?w=${width}&h=${height}&fit=crop&crop=center&auto=fo
rmat&q=80`,
    general: `https://images.unsplash.com/photo-1492684223066-81342ee5ff30?w=${width}&h=${height}&fit=crop&crop=center&auto=form
at&q=80`,
  };
  return base[type] || base.general;
}

function pickCity(row: Record<string, any>): string {
  return (
    pick(row, ["city","governorate","governorate_name","المحافظة","المدينة"]) ||
    ""
  );
}

async function fetchCsv(url: string): Promise<string> {
  const res = await fetch(url);
  if (!res.ok) throw new Error(`Failed to fetch CSV: ${res.status} ${res.statusText}`);
  return await res.text();
}

function parseCsvText(text: string): Record<string, any>[] {
  const records = parseCsv(text, {
    columns: true,
    skip_empty_lines: true,
    bom: true,
    relax_quotes: true,
    relax_column_count: true,
    trim: true
  });
  return records as Record<string, any>[];
}

async function main() {
  const args = process.argv.slice(2);
  let csvSource = "";
  let isUrl = false;

  for (let i = 0; i < args.length; i++) {
    if (args[i] === "--url" && args[i+1]) { csvSource = args[i+1]; isUrl = true; i++; }
    else if (args[i] === "--file" && args[i+1]) { csvSource = args[i+1]; isUrl = false; i++; }
  }

  if (!csvSource) {
    log("Please provide --url <csv_url> or --file <path>.");
    process.exit(1);
  }

  // Load CSV text
  let csvText = "";
  if (isUrl) {
    log(`Fetching CSV from URL: ${csvSource}`);
    csvText = await fetchCsv(csvSource);
  } else {
    const absolute = path.isAbsolute(csvSource) ? csvSource : path.join(process.cwd(), csvSource);
    log(`Reading CSV from file: ${absolute}`);
    csvText = await readFile(absolute, "utf8");
  }

  const rows = parseCsvText(csvText);
  log(`Parsed ${rows.length} rows.`);

  let createdCount = 0;
  for (const row of rows) {
    try {
      const title = pick(row, ["title","name","event","event_title","العنوان","اسم_الفعالية"]);
      const description = pick(row, ["description","desc","about","details","الوصف"]);
      const location = pick(row, ["location","venue","address","الموقع","العنوان"]);
      const city = pickCity(row);
      const categoryRaw = pick(row, ["category","type","الفئة","التصنيف"]);
      const whatsappGroup = pick(row, ["whatsappgroup","whatsapp_group","whatsapp","رابط_الواتساب"]);
      const whatsappPhone = pick(row, ["whatsappphone","whatsapp_phone","phone","رقم_الهاتف"]);
      const contactMethod = pick(row, ["contact","contact_method","التواصل"]);
      const sourceUrl = pick(row, ["source","source_url","link","الرابط"]);
      const imageUrlInput = pick(row, ["image","image_url","cover","الصورة"]);
      const iso = parseDateTime(row);

      if (!title || !iso) {
        log(`Skipping row: missing required fields (title/date).`);
        continue;
      }

      const cat = classifyCategory(title, categoryRaw);
      const imageUrl = imageUrlInput || placeholderImage(cat.key);

      // Best-effort geocoding
      let latitude: number | undefined = undefined;
      let longitude: number | undefined = undefined;
      try {
        if (location) {
          const geo = await geocodeAddress(location);
          if (geo) { latitude = geo.lat; longitude = geo.lon; }
        }
      } catch {}

      const created = await prisma.event.create({
        data: {
          date: new Date(iso),
          category: cat.display,
          imageUrl,
          whatsappGroup: whatsappGroup || undefined,
          whatsappPhone: whatsappPhone || undefined,
          contactMethod: contactMethod || undefined,
          sourceUrl: sourceUrl || undefined,
          city: city || undefined,
          latitude,
          longitude,
I'll check for 'OptimizedNavigation' in the code. The user requested nine categories.

root@a53660941a77:/workspace# ls missinggold/src/app/components | head
CityScroller.tsx
ClientLayout.tsx
DynamicHTML.tsx
ErrorBoundary.tsx
EventDetailsModal.tsx
EventImage.tsx
ImagePlaceholder.tsx
LanguageProvider.tsx
LazyImage.tsx
LoadingScreen.tsx
I should go ahead and list all the necessary components for this task.

root@a53660941a77:/workspace# ls missinggold/src/app/components
CityScroller.tsx       EventImage.tsx        MultiVenueHomepage.tsx     PWAInstallPrompt.tsx        SkeletonLoader.tsx
ClientLayout.tsx       ImagePlaceholder.tsx  Navigation.tsx             ResponsiveButton.tsx
DynamicHTML.tsx        LanguageProvider.tsx  NeonHomepage.tsx           SearchSuggest.tsx
ErrorBoundary.tsx      LazyImage.tsx         OptimizedNavigation.tsx    SessionProviderWrapper.tsx
EventDetailsModal.tsx  LoadingScreen.tsx     OptimizedNeonHomepage.tsx  SimpleLanguageProvider.tsx
I need to take a look at OptimizedNavigation and the nine categories.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/components/OptimizedNavigation.tsx
"use client";

/**
 * Optimized Navigation Component
 *
 * BEFORE Issues:
 * - No memoization (re-renders on every parent update)
 * - Inline styles causing recalculation
 * - Window resize handler without debouncing
 * - Language switcher not optimized
 *
 * AFTER Optimizations:
 * - React.memo with custom comparison
 * - useMemo for computed values
 * - useCallback for stable event handlers
 * - Debounced resize detection
 * - CSS modules for better performance
 * - Proper TypeScript types
 */

import { useSession, signOut } from "next-auth/react";
import Link from "next/link";
import { useState, useEffect, useCallback, useMemo, memo } from "react";
import type { FC, MouseEvent } from "react";
import { useLanguage } from "./LanguageProvider";
import { useTranslations } from "../hooks/useTranslations";
import { useMediaQuery } from "../hooks/useOptimizedState";

// Types for better TypeScript compliance
interface NavLinkProps {
  href: string;
  label: string;
  color: string;
  isActive?: boolean;
}

interface LanguageOption {
  code: 'en' | 'ar' | 'ku';
  label: string;
  flag: string;
}

// Memoized NavLink component to prevent unnecessary re-renders
const NavLink = memo<NavLinkProps>(({ href, label, color, isActive = false }) => {
  return (
    <Link
      href={href}
      className={`nav-link font-medium transition-colors relative group ${
        isActive ? 'active' : ''
      }`}
      style={{ color: 'var(--text-primary)' }}
    >
      {label}
      <span
        className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300"
        style={{
          backgroundColor: `var(--${color}-color)`,
          boxShadow: `0 0 5px var(--${color}-color)`,
        }}
      />
    </Link>
  );
});
NavLink.displayName = 'NavLink';

// Memoized Language Button
const LanguageButton = memo<{
  option: LanguageOption;
  isActive: boolean;
  onClick: () => void;
}>(({ option, isActive, onClick }) => {
  return (
    <button
      onClick={onClick}
      className="w-full px-4 py-2 text-left transition-colors rounded-lg hover:bg-white/10"
      style={{
        color: isActive ? 'var(--events-color)' : 'var(--text-primary)',
      }}
      aria-label={`Switch to ${option.label}`}
    >
      {option.flag} {option.label}
    </button>
  );
});
LanguageButton.displayName = 'LanguageButton';

// Main Navigation Component
const OptimizedNavigation: FC = () => {
  const { data: session } = useSession();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isLangMenuOpen, setIsLangMenuOpen] = useState(false);
  const { language, setLanguage, isRTL } = useLanguage();
  const { t } = useTranslations();

  // Use optimized media query hook instead of manual resize listener
  const isMobile = useMediaQuery('(max-width: 768px)');
  const isDesktop = useMediaQuery('(min-width: 1024px)');

  // Environment check
  const showTopBanner = useMemo(
    () => process.env.NEXT_PUBLIC_SHOW_TOP_BANNER === 'true',
    []
  );

  // Language options
  const languageOptions = useMemo<LanguageOption[]>(
    () => [
      { code: 'en', label: 'English', flag: '🇺🇸' },
      { code: 'ar', label: 'العربية', flag: '🇮🇶' },
      { code: 'ku', label: 'کوردی', flag: '🇮🇶' },
    ],
    []
  );

  // Current language display
  const currentLanguageDisplay = useMemo(() => {
    const option = languageOptions.find((opt) => opt.code === language);
    return option
      ? `${option.flag} ${option.label}`
      : '🌐 Language';
  }, [language, languageOptions]);

  // Navigation links with memoization
  const navLinks = useMemo(() => {
    const basePrefix = language === 'en' ? '' : `/${language}`;
    return [
      { href: `${basePrefix}/`, label: t('navigation.home'), color: 'events' },
      { href: `${basePrefix}/events`, label: t('navigation.events'), color: 'events' },
      { href: `${basePrefix}/hotels`, label: 'Hotels', color: 'hotels' },
      { href: `${basePrefix}/restaurants`, label: 'Restaurants', color: 'restaurants' },
      { href: `${basePrefix}/tourism`, label: 'Tourism', color: 'tourism' },
    ];
  }, [language, t]);

  // Memoized user initial
  const userInitial = useMemo(() => {
    if (!session?.user) return 'U';
    return (
      session.user.name?.charAt(0) ||
      session.user.email?.charAt(0) ||
      'U'
    ).toUpperCase();
  }, [session]);

  // Stable callback for menu toggle
  const toggleMenu = useCallback(() => {
    setIsMenuOpen((prev) => !prev);
  }, []);

  // Stable callback for language menu toggle
  const toggleLangMenu = useCallback(() => {
    setIsLangMenuOpen((prev) => !prev);
  }, []);

  // Stable callback for language change
  const handleLanguageChange = useCallback(
    (code: 'en' | 'ar' | 'ku') => {
      setLanguage(code as any);
      setIsLangMenuOpen(false);
    },
    [setLanguage]
  );

  // Stable callback for sign out
  const handleSignOut = useCallback(() => {
    signOut();
  }, []);

  // Close mobile menu when switching to desktop
  useEffect(() => {
    if (!isMobile && isMenuOpen) {
      setIsMenuOpen(false);
    }
  }, [isMobile, isMenuOpen]);

  // Close language menu on outside click
  useEffect(() => {
    const handleClickOutside = () => {
      if (isLangMenuOpen) setIsLangMenuOpen(false);
    };

    if (isLangMenuOpen) {
      document.addEventListener('click', handleClickOutside);
      return () => document.removeEventListener('click', handleClickOutside);
    }
  }, [isLangMenuOpen]);

  return (
    <>
      {/* Top Banner */}
      {showTopBanner && (
        <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white py-2 text-center text-sm font-medium">
          🎉 {t('navigation.aiRecommendations')}{' '}
          <Link
            href="/register"
            className="underline ml-2 font-semibold hover:text-yellow-300 transition-colors"
          >
            {t('navigation.tryItFree')} {isRTL ? '←' : '→'}
          </Link>
        </div>
I should check public/locales/en/common.json for further category details, like 'categoryGrid'.

root@a53660941a77:/workspace# rg "grid" missinggold/public/locales/en/common.json -n
I'll check the messages/en.json file for something like 'categoryDetails' and related info.

root@a53660941a77:/workspace# rg "category" missinggold/messages/en.json -n | head -n 20
2:  "categories.${event.category}": ""
57:    "category": "Category",
84:    "category": "Category",
85:    "selectCategory": "Select category",
308:  "categoryDescriptions": {
I'm looking through the repo for anything related to 'subcategories' or similar terms.

root@a53660941a77:/workspace# rg "subcategories" missinggold -n
I’ll search for 'categoryHighlights' in the app to see if it’s defined.

root@a53660941a77:/workspace# rg "category" missinggold/src/app/[locale]/events/page.tsx -n
18:  category?: string;
152:      category: t('demo.events.aiSummit.category'),
165:      category: t('demo.events.musicFestival.category'),
178:      category: t('demo.events.businessWorkshop.category'),
191:      category: t('demo.events.artExhibition.category'),
204:      category: "Food & Drink",
217:      category: "Sports & Fitness",
240:      filtered = filtered.filter(event => event.category === selectedCategory);
288:  const getCategoryIcon = (categoryName: string) => {
289:    const category = categories.find(cat => cat.name === categoryName);
290:    return category ? category.icon : "🎉";
293:  const translateCategory = (categoryName: string): string => {
294:    // Map English category names to translation keys
295:    const categoryMap: { [key: string]: string } = {
314:    const translationKey = categoryMap[categoryName];
315:    return translationKey ? t(translationKey) : categoryName;
318:  const getEventImageCategory = (category: string) => {
329:    return mapping[category] || "community";
463:                    category={getEventImageCategory(event.category || "")}
469:                      {getCategoryIcon(event.category || "")} {translateCategory(event.category || "")}
508:          <h2 className="text-2xl font-bold text-gray-900 mb-6">{t('events.exploreByCategory') || 'Explore by category'}</h2
>
I need to take a look at the mapping in this file.

root@a53660941a77:/workspace# sed -n '280,340p' missinggold/src/app/[locale]/events/page.tsx
  };

  const handleViewDetails = (event: Event, e: React.MouseEvent) => {
    e.preventDefault();
    setSelectedEvent(event);
    setIsModalOpen(true);
  };

  const getCategoryIcon = (categoryName: string) => {
    const category = categories.find(cat => cat.name === categoryName);
    return category ? category.icon : "🎉";
  };

  const translateCategory = (categoryName: string): string => {
    // Map English category names to translation keys
    const categoryMap: { [key: string]: string } = {
      "Technology & Innovation": "categories.technologyInnovation",
      "Business & Networking": "categories.businessNetworking",
      "Business": "categories.businessNetworking", // Handle variations
      "Music & Concerts": "categories.musicConcerts",
      "Arts & Culture": "categories.artsCulture",
      "Sports & Fitness": "categories.sportsFitness",
      "Food & Drink": "categories.foodDrink",
      "Learning & Development": "categories.learningDevelopment",
      "Health & Wellness": "categories.healthWellness",
      "Community & Social": "categories.communitySocial",
      "Gaming & Esports": "categories.gamingEsports",
      "Spiritual & Religious": "categories.spiritualReligious",
      "Family & Kids": "categories.familyKids",
      "Outdoor & Adventure": "categories.outdoorAdventure",
      "Virtual Events": "categories.virtualEvents",
      "Academic and Conferences": "categories.academicConferences"
    };

    const translationKey = categoryMap[categoryName];
    return translationKey ? t(translationKey) : categoryName;
  };

  const getEventImageCategory = (category: string) => {
    const mapping: { [key: string]: string } = {
      "Music & Concerts": "music",
      "Sports & Fitness": "sports",
      "Food & Drink": "food",
      "Business": "business",
      "Technology & Innovation": "tech",
      "Arts & Culture": "art",
      "Health & Wellness": "health",
      "Community & Social": "community"
    };
    return mapping[category] || "community";
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">{t('homepage.loading')}</h2>
          <p className="text-gray-600">{t('events.subtitle')}</p>
        </div>
      </div>
I think the user wants categories with subcategories. I'll check src/lib/seedData for const categories.

root@a53660941a77:/workspace# rg "const categories" -n missinggold/src
missinggold/src/app/components/OptimizedNeonHomepage.tsx
240:  const categories = useCategories();

missinggold/src/app/components/NeonHomepage.tsx
36:  const categories: Category[] = [

missinggold/src/app/page-original.tsx
58:  const categories = [

missinggold/src/app/categories/page.tsx
10:  const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');
12:  const categories = [

missinggold/src/app/[locale]/events/page.tsx
61:  const categories = [

missinggold/src/app/[locale]/categories/page.tsx
16:  const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');
27:  const categories = [
I'm checking the categories in page-original.tsx, possibly around line 12. Let's see.

root@a53660941a77:/workspace# sed -n '58,120p' missinggold/src/app/page-original.tsx
  const categories = [
    { name: t('common.allCategories'), icon: "🎉" },
    { name: t('categories.technologyInnovation'), icon: "💻" },
    { name: t('categories.businessNetworking'), icon: "💼" },
    { name: t('categories.musicConcerts'), icon: "🎵" },
    { name: t('categories.artsCulture'), icon: "🎨" },
    { name: t('categories.sportsFitness'), icon: "⚽" },
    { name: t('categories.foodDrink'), icon: "🍽️" },
    { name: t('categories.learningDevelopment'), icon: "📚" },
    { name: t('categories.healthWellness'), icon: "🏥" },
    { name: t('categories.communitySocial'), icon: "👥" },
    { name: t('categories.gamingEsports'), icon: "🎮" },
    { name: t('categories.spiritualReligious'), icon: "🕌" },
    { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦" },
    { name: t('categories.outdoorAdventure'), icon: "🏔️" },
    { name: t('categories.virtualEvents'), icon: "📱" },
    { name: t('categories.academicConferences'), icon: "🎓" }
  ];

  const heroSlides = [
    {
      id: 1,
      title: t('heroSlides.slide1.title'),
      subtitle: t('heroSlides.slide1.subtitle'),
      description: t('heroSlides.slide1.description'),
      gradient: "from-purple-900 via-blue-900 to-cyan-900",
      buttonText: t('hero.registerNow'),
      buttonColor: "from-yellow-400 via-orange-500 to-red-500",
      stats: [{ label: t('heroSlides.attendees'), value: "5K+", color: "text-yellow-400" }, { label: t('heroSlides.sessions'), v
alue: "100+", color: "text-cyan-400" }, { label: t('heroSlides.days'), value: "3", color: "text-purple-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "tech"
    },
    {
      id: 2,
      title: t('heroSlides.slide2.title'),
      subtitle: t('heroSlides.slide2.subtitle'),
      description: t('heroSlides.slide2.description'),
      gradient: "from-pink-900 via-purple-900 to-indigo-900",
      buttonText: t('hero.getTickets'),
      buttonColor: "from-pink-500 via-purple-500 to-indigo-500",
      stats: [{ label: t('heroSlides.artists'), value: "50+", color: "text-pink-400" }, { label: t('heroSlides.stages'), value:
"5", color: "text-purple-400" }, { label: t('heroSlides.hours'), value: "72", color: "text-indigo-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "music"
    },
    {
      id: 3,
      title: t('heroSlides.slide3.title'),
      subtitle: t('heroSlides.slide3.subtitle'),
      description: t('heroSlides.slide3.description'),
      gradient: "from-emerald-900 via-teal-900 to-cyan-900",
      buttonText: t('heroSlides.joinSummit'),
      buttonColor: "from-emerald-500 via-teal-500 to-cyan-500",
      stats: [{ label: t('heroSlides.leaders'), value: "200+", color: "text-emerald-400" }, { label: t('heroSlides.companies'),
value: "150+", color: "text-teal-400" }, { label: t('heroSlides.workshops'), value: "25", color: "text-cyan-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "business"
    },
    {
      id: 4,
      title: t('heroSlides.slide4.title'),
      subtitle: t('heroSlides.slide4.subtitle'),
      description: t('heroSlides.slide4.description'),
      gradient: "from-orange-900 via-red-900 to-pink-900",
      buttonText: t('heroSlides.exploreArt'),
I’m considering if documentation exists for nine categories or a similar mapping in the codebase.

root@a53660941a77:/workspace# rg "Explore" -n missinggold/README.md
I'll check the whole README to understand the categories better.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/README.md
# Missinggold - Event Management Platform

A comprehensive event management and venue platform for Iraq & Kurdistan, featuring hotels, restaurants, activities, and enterta
inment venues.

## Features

- 🎯 **Multi-language Support**: English, Arabic, and Kurdish
- 🏨 **Venue Management**: Hotels, restaurants, cafes, and tourism activities
- 📱 **Progressive Web App**: Offline-capable mobile experience
- 🔐 **Authentication**: Secure user authentication with NextAuth.js
- 💎 **Modern Stack**: Next.js 15, React 19, TypeScript, Prisma
- 🎨 **Beautiful UI**: Tailwind CSS with responsive design
- 🌍 **RTL Support**: Full right-to-left language support

## Quick Start

### Prerequisites

- Node.js 18+
- PostgreSQL database
- Prisma CLI

### Installation

```bash
# Clone the repository
git clone https://github.com/absulysuly/missinggold.git
cd missinggold

# Install dependencies
npm ci

# Set up environment variables
cp .env.example .env.local
# Edit .env.local with your database URL and other secrets

# Set up the database
npm run db:deploy
npm run db:seed

# Start development server
npm run dev
```

Visit [http://localhost:3000](http://localhost:3000) to see the application.

## Environment Variables

Create a `.env.local` file in the root directory with the following variables:

```bash
# Database
DATABASE_URL="postgresql://user:password@localhost:5432/missinggold"

# Authentication
NEXTAUTH_SECRET="your-nextauth-secret-here"
NEXTAUTH_URL="http://localhost:3000"

# Rate Limiting (Upstash Redis)
UPSTASH_REDIS_REST_URL="your-upstash-url"
UPSTASH_REDIS_REST_TOKEN="your-upstash-token"

# Email (Resend)
RESEND_API_KEY="your-resend-api-key"

# Analytics (Optional)
SENTRY_DSN="your-sentry-dsn"
```

## Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint
- `npm run type-check` - Run TypeScript checking
- `npm run db:migrate` - Run database migrations
- `npm run db:seed` - Seed database with initial data

## Deployment

See [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed production deployment instructions.

## Project Structure

```
├── src/
│   ├── app/              # Next.js app router pages
│   ├── components/       # Reusable React components
│   ├── lib/              # Utility libraries
│   └── types/            # TypeScript type definitions
├── prisma/              # Database schema and migrations
├── public/              # Static assets
├── messages/            # i18n translation files
└── scripts/             # Build and maintenance scripts
```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Security

If you discover any security issues, please email [security@example.com](mailto:security@example.com) instead of using the issue
 tracker.

**Note**: After deployment, rotate all secrets that were removed during repository extraction.
I might need to check the SAFE config or search in SearchSuggest for subcategories.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/components/SearchSuggest.tsx
"use client";

import React, { useEffect, useMemo, useRef, useState } from "react";
import Link from "next/link";
import { useLanguage } from "./LanguageProvider";

export default function SearchSuggest({
  value,
  onChange,
  placeholder,
  className
}: {
  value: string;
  onChange: (v: string) => void;
  placeholder?: string;
  className?: string;
}) {
  const { language, isRTL } = useLanguage();
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [items, setItems] = useState<{ label: string; subtitle?: string; publicId?: string }[]>([]);
  const timer = useRef<ReturnType<typeof setTimeout> | null>(null);
  const boxRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    const handler = (e: MouseEvent) => {
      if (!boxRef.current?.contains(e.target as Node)) setOpen(false);
    };
    document.addEventListener('mousedown', handler);
    return () => document.removeEventListener('mousedown', handler);
  }, []);

  const query = useMemo(() => value.trim(), [value]);

  useEffect(() => {
    if (timer.current) clearTimeout(timer.current);
    if (!query) {
      setItems([]);
      setOpen(false);
      return;
    }
    setLoading(true);
    timer.current = setTimeout(async () => {
      try {
        const res = await fetch(`/api/search/suggest?query=${encodeURIComponent(query)}&lang=${language}`);
        const json = await res.json();
        setItems(json?.suggestions || []);
        setOpen(true);
      } catch {
        setItems([]);
        setOpen(false);
      } finally {
        setLoading(false);
      }
    }, 250); // debounce
  }, [query, language]);

  return (
    <div ref={boxRef} className={`relative ${className || ''}`}>
      <input
        type="text"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder}
        className="w-full px-6 py-4 rounded-full text-lg border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-bl
ue-200 outline-none"
        onFocus={() => { if (items.length) setOpen(true); }}
      />
      {open && (
        <div className={`absolute ${isRTL ? 'right-0' : 'left-0'} mt-2 w-full bg-white border border-gray-200 rounded-xl shadow-
lg z-50 max-h-80 overflow-auto`}>
          {loading && (
            <div className="px-4 py-3 text-gray-500 text-sm">Searching…</div>
          )}
          {!loading && items.length === 0 && (
            <div className="px-4 py-3 text-gray-500 text-sm">No results</div>
          )}
          {!loading && items.map((it, idx) => (
            <Link
              key={idx}
              href={`/${language}/event/${it.publicId}`}
              className="block px-4 py-3 hover:bg-gray-50 border-b last:border-0"
              onClick={() => setOpen(false)}
            >
              <div className="font-medium text-gray-800">{it.label}</div>
              {it.subtitle && <div className="text-xs text-gray-500">{it.subtitle}</div>}
            </Link>
          ))}
        </div>
      )}
    </div>
  );
}
I'm considering looking into common.json for category data like 'categoryGrid' or 'explore'.

root@a53660941a77:/workspace# sed -n '200,320p' missinggold/public/locales/en/common.json
        "title": "Flexible Ticketing",
        "description": "Support for both free and paid events with secure payment processing."
      },
      "communityFocused": {
        "title": "Community Focused",
        "description": "Connect with event organizers and attendees to build stronger communities."
      }
    },
    "mission": {
      "title": "Our Mission",
      "p1": "We believe that events have the power to bring people together, create lasting memories, and strengthen communities
. Our mission is to make event discovery and creation accessible to everyone across Iraq and Kurdistan.",
      "p2": "Whether you're looking for cultural festivals, business conferences, music concerts, or community gatherings, IraqE
vents is your gateway to discovering what's happening in your city.",
      "p3": "For event organizers, we provide powerful tools to create, promote, and manage events with ease, helping you reach
the right audience and create successful experiences."
    },
    "whyChoose": {
      "title": "Why Choose IraqEvents?",
      "subtitle": "We've built the most comprehensive event platform for Iraq and Kurdistan, designed with our local communities
 in mind."
    },
    "team": {
      "title": "Meet Our Team",
      "subtitle": "We're a passionate team dedicated to bringing people together through events and building stronger communitie
s across Iraq and Kurdistan.",
      "items": {
        "devTeam": {
          "name": "Development Team",
          "role": "Platform Development",
          "description": "Building the future of event management in Iraq"
        },
        "communityTeam": {
          "name": "Community Team",
          "role": "User Support",
          "description": "Helping users create and discover amazing events"
        },
        "localPartners": {
          "name": "Local Partners",
          "role": "Regional Expansion",
          "description": "Expanding our reach across Iraq and Kurdistan"
        }
      }
    },
    "values": {
      "title": "Our Values",
      "subtitle": "These principles guide everything we do as we work to build the best event platform for our region.",
      "items": {
        "communityFirst": {
          "title": "Community First",
          "description": "We prioritize the needs of our local communities and event organizers."
        },
        "trustSafety": {
          "title": "Trust & Safety",
          "description": "We ensure secure transactions and protect user privacy at all times."
        },
        "excellence": {
          "title": "Excellence",
          "description": "We strive for the highest quality in everything we build and deliver."
        },
        "innovation": {
          "title": "Innovation",
          "description": "We continuously improve our platform with cutting-edge technology."
        },
        "culturalDiversity": {
          "title": "Cultural Diversity",
          "description": "We celebrate and support the rich cultural diversity of Iraq and Kurdistan."
        },
        "accessibility": {
          "title": "Accessibility",
          "description": "We make events accessible to everyone, regardless of ability or background."
        }
      }
    },
    "cta": {
      "title": "Join the IraqEvents Community",
      "subtitle": "Start discovering and creating amazing events today"
    },
    "contact": {
      "title": "Get in Touch",
      "subtitle": "We're here to help with any questions or support you need",
      "emailSupport": "Email Support",
      "liveChat": "Live Chat",
      "liveChatAvailability": "Available 9 AM - 6 PM (Baghdad Time)",
      "whatsapp": "WhatsApp"
    }
  },
  "common": {
    "loading": "Loading...",
    "error": "Error",
    "tryAgain": "Try Again",
    "cancel": "Cancel",
    "save": "Save",
    "delete": "Delete",
    "edit": "Edit",
    "view": "View",
    "close": "Close",
    "next": "Next",
    "previous": "Previous",
    "search": "Search",
    "filter": "Filter",
    "allCategories": "All Categories",
    "allCities": "All Cities",
    "allMonths": "All Months",
    "allPrices": "All Prices",
    "free": "Free",
    "paid": "Paid",
    "under25": "Under $25",
    "price25to50": "$25 - $50",
    "price50to100": "$50 - $100",
    "over100": "Over $100",
    "notSpecified": "Not Specified",
    "contactInformation": "Contact Information",
    "joinWhatsAppGroup": "Join WhatsApp Group",
    "price": "Price",
    "imageUnavailable": "Image Unavailable",
    "unknownError": "An unknown error occurred",
    "backToEvents": "Back to Events",
    "anonymous": "Anonymous",
    "general": "General"
  },
  "cities": {
    "baghdad": "Baghdad",
    "basra": "Basra",
    "mosul": "Mosul",
    "erbil": "Erbil",
It might be in src/app/[locale]/categories/page.tsx, checking for useContentOverride.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/[locale]/categories/page.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import { useTranslations } from "../../hooks/useTranslations";
import { useContentOverride } from "../../hooks/useContent";
import { useLanguage } from "../../components/LanguageProvider";

interface CategoriesPageProps {
  params: Promise<{ locale: string }>;
}

export default function CategoriesPage({ params }: CategoriesPageProps) {
  const { t } = useTranslations();
  const { language, isRTL } = useLanguage();
  const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');

  // Update language context based on URL locale
  React.useEffect(() => {
    const updateLocale = async () => {
      const resolvedParams = await params;
      // This ensures the language context matches the URL
    };
    updateLocale();
  }, [params]);

  const categories = [
    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-500
 to-pink-500' },
    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptions.
technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.busi
nessNetworking'), color: 'from-blue-500 to-cyan-500' },
    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcerts'
), color: 'from-pink-500 to-red-500' },
    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'), col
or: 'from-teal-500 to-blue-500' },
    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitness'
), color: 'from-green-500 to-emerald-500' },
    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color: 'fr
om-yellow-500 to-orange-500' },
    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions.le
arningDevelopment'), color: 'from-violet-500 to-purple-500' },
    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWellne
ss'), color: 'from-emerald-500 to-teal-500' },
    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communityS
ocial'), color: 'from-orange-500 to-red-500' },
    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEsports'
), color: 'from-red-500 to-pink-500' },
    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.spir
itualReligious'), color: 'from-amber-500 to-yellow-500' },
    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'),
color: 'from-sky-500 to-blue-500' },
    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoorAd
venture'), color: 'from-lime-500 to-green-500' },
    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEvents'
), color: 'from-slate-500 to-gray-500' },
    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions.ac
ademicConferences'), color: 'from-rose-500 to-red-500' }
  ];

  return (
    <div className={`min-h-screen bg-gray-50 py-8 ${isRTL ? 'text-right' : 'text-left'}`}>
      {/* Hero Section */}
      <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 py-16">
        <div className="max-w-7xl mx-auto px-4 text-center">
          <h1 className="text-5xl font-bold text-white mb-6">{t('categoriesPage.title')}</h1>
          <p className="text-xl text-white/90 max-w-3xl mx-auto">
            {categoriesSubtitle?.value || t('categoriesPage.subtitle')}
          </p>
        </div>
      </div>

      {/* Categories Grid */}
      <div className="max-w-7xl mx-auto px-4 py-16">
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {categories.map((category, index) => (
            <div
              key={category.name}
              className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-1
05 group"
            >
              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-6 g
roup-hover:scale-110 transition-transform duration-300`}>
                <span className="text-3xl">{category.icon}</span>
              </div>

              <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-purple-600 transition-colors">
                {category.name}
              </h3>

              <p className="text-gray-600 leading-relaxed mb-6">
                {category.description}
              </p>

              <Link
                href={language === 'en' ? `/events?category=${encodeURIComponent(category.key)}` : `/${language}/events?category
=${encodeURIComponent(category.key)}`}
                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-full
font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
              >
                <span>{t('homepage.exploreEvents')}</span>
                <span>{isRTL ? '←' : '→'}</span>
              </Link>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 py-16">
        <div className="max-w-4xl mx-auto px-4 text-center">
          <h2 className="text-4xl font-bold text-white mb-6">
            {t('categoriesPage.ctaTitle')}
          </h2>
          <p className="text-xl text-white/90 mb-8">
            {t('categoriesPage.ctaSubtitle')}
          </p>
          <Link
            href={language === 'en' ? '/register' : `/${language}/register`}
            className="bg-white text-orange-600 px-8 py-4 rounded-full font-bold text-lg hover:shadow-xl transition-all duration
-300 transform hover:scale-105 inline-flex items-center gap-3"
          >
            <span className="text-2xl">🎆</span>
            {t('events.createYourEvent')}
          </Link>
        </div>
      </div>
    </div>
  );
}root@a53660941a77:/workspace# rg "Category" missinggold/MARKETING_REVENUE_STRATEGY.md -n
I'm curious if the CityScroller component holds clues about the categories mentioned.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/components/CityScroller.tsx
"use client";

import React, { useEffect, useMemo, useRef, useState } from "react";
import { trackCityScrollerImpression, trackCityScrollerSelect, trackCityScrollerSnap } from "../../lib/analytics";

interface Props {
  items: string[];
  selected?: string;
  onSelect: (value: string) => void;
}

export default function CityScroller({ items, selected, onSelect }: Props) {
  const containerRef = useRef<HTMLDivElement | null>(null);
  const [activeIndex, setActiveIndex] = useState(0);
  const [prevIndex, setPrevIndex] = useState<number | null>(null);

  // Map city to id-like slug
  const ids = useMemo(() => items.map((c) => slugify(c)), [items]);

  useEffect(() => {
    // Initial impression: visible items
    const visible = getVisibleIds();
    if (visible.length > 0) {
      trackCityScrollerImpression({ city_list: visible });
    }
    // Observe visibility to emit impressions on change
    const el = containerRef.current;
    if (!el) return;

    const onScroll = debounce(() => {
      const visibleNow = getVisibleIds();
      trackCityScrollerImpression({ city_list: visibleNow });
      // Determine snapped index
      const idx = nearestSnapIndex();
      if (idx !== activeIndex) {
        trackCityScrollerSnap({ city_id: ids[idx], previous_city_id: prevIndex !== null ? ids[prevIndex] : null });
        setPrevIndex(activeIndex);
        setActiveIndex(idx);
      }
    }, 200);

    el.addEventListener('scroll', onScroll, { passive: true });
    return () => el.removeEventListener('scroll', onScroll as any);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [items, ids, activeIndex, prevIndex]);

  function getVisibleIds(): string[] {
    const el = containerRef.current;
    if (!el) return [];
    const rect = el.getBoundingClientRect();
    const children = Array.from(el.children) as HTMLElement[];
    const visible: string[] = [];
    children.forEach((child, idx) => {
      const r = child.getBoundingClientRect();
      const visibleWidth = Math.min(r.right, rect.right) - Math.max(r.left, rect.left);
      if (visibleWidth > Math.min(120, r.width * 0.6)) {
        visible.push(ids[idx]);
      }
    });
    return visible;
  }

  function nearestSnapIndex(): number {
    const el = containerRef.current;
    if (!el) return 0;
    const children = Array.from(el.children) as HTMLElement[];
    let bestIdx = 0;
    let minDist = Number.MAX_VALUE;
    const center = el.scrollLeft + el.clientWidth / 2;
    children.forEach((child, idx) => {
      const offset = (child as HTMLElement).offsetLeft + child.clientWidth / 2;
      const dist = Math.abs(offset - center);
      if (dist < minDist) {
        minDist = dist;
        bestIdx = idx;
      }
    });
    return bestIdx;
  }

  function onKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {
    const el = containerRef.current;
    if (!el) return;
    if (e.key === 'ArrowRight') {
      e.preventDefault();
      const idx = Math.min(activeIndex + 1, items.length - 1);
      scrollToIndex(idx);
    } else if (e.key === 'ArrowLeft') {
      e.preventDefault();
      const idx = Math.max(activeIndex - 1, 0);
      scrollToIndex(idx);
    }
  }

  function scrollToIndex(idx: number) {
    const el = containerRef.current;
    if (!el) return;
    const child = el.children[idx] as HTMLElement | undefined;
    if (child) {
      child.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
    }
  }

  return (
    <div className="max-w-7xl mx-auto px-4">
      <div
        ref={containerRef}
        className="relative overflow-x-auto whitespace-nowrap snap-x snap-mandatory flex gap-3 md:gap-4 py-2 md:py-3 rounded-2xl
 bg-white/70 backdrop-blur border border-black/10 shadow-sm"
        style={{ height: '56px' }}
        role="listbox"
        aria-label="City scroller"
        tabIndex={0}
        onKeyDown={onKeyDown}
      >
        {items.map((city, index) => {
          const isActive = (selected ? city === selected : index === activeIndex);
          return (
            <button
              key={city}
              role="option"
              aria-selected={isActive}
              className={`snap-center inline-flex items-center justify-center px-4 md:px-5 h-12 md:h-14 rounded-xl font-semibold
 text-sm md:text-base transition-all duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 ${
                isActive
                  ? 'bg-indigo-600 text-white shadow-md scale-[1.05] underline decoration-2 underline-offset-4'
                  : 'bg-white text-gray-800 border border-black/10 hover:bg-gray-50'
              }`}
              onClick={() => {
                onSelect(city);
                const idx = index;
                trackCityScrollerSelect({ city_id: ids[idx], user_id: null, entry_source: 'home_scroller' });
                setPrevIndex(activeIndex);
                setActiveIndex(idx);
              }}
            >
              <span className="truncate" title={city}>{city}</span>
            </button>
          );
        })}
      </div>
    </div>
  );
}

function debounce<F extends (...args: any[]) => void>(fn: F, wait: number) {
  let t: any;
  return (...args: Parameters<F>) => {
    clearTimeout(t);
    t = setTimeout(() => fn(...args), wait);
  };
}

function slugify(s: string): string {
  return s
    .toString()
    .normalize('NFKD')
    .replace(/[\u0300-\u036F]/g, '')
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)+/g, '');
}root@a53660941a77:/workspace#
I think the user might want categories and subcategories for marketing. I'll check further.

}root@a53660941a77:/workspace# sed -n '430,700p' missinggold/messages/en.json
The file ended sooner than expected. I'll check if there are other messages in ar.json or index.ts.

root@a53660941a77:/workspace# cat missinggold/messages/index.ts
// Centralized translation loaders for HMR-friendly dynamic imports
// and a single source for loading messages.

export const SUPPORTED_LOCALES = ['en', 'ar', 'ku'] as const;
export type Locale = typeof SUPPORTED_LOCALES[number];

export const loaders = {
  en: () => import('./en.json'),
  ar: () => import('./ar.json'),
  ku: () => import('./ku.json')
} as const;

export async function loadMessages(locale: Locale) {
  const mod = await loaders[locale]();
  return mod.default;
}
I’ll check src/app/hooks/useContent to see if it has categories and subcategories.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/hooks/useContent.ts
"use client";

import { useEffect, useState } from "react";
import { useLanguage } from "../components/LanguageProvider";

export function useContentOverride(key: string) {
  const { language } = useLanguage();
  const [value, setValue] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    let active = true;
    async function run() {
      setLoading(true);
      try {
        const res = await fetch(`/api/content?key=${encodeURIComponent(key)}&locale=${encodeURIComponent(language)}`);
        const json = await res.json();
        if (!active) return;
        setValue(json?.content?.data ?? null);
      } catch {
        if (!active) return;
        setValue(null);
      } finally {
        if (!active) return;
        setLoading(false);
      }
    }
    run();
    return () => { active = false; };
  }, [key, language]);

  return { value, loading };
}root@a53660941a77:/workspace#
The user seems to want a full directory list, focusing on categories and subcategories.

}root@a53660941a77:/workspace# cat missinggold/safe-config.js
/**
 * Content Security Policy configuration for Eventra SaaS
 * Using next-safe-middleware for better security
 */
module.exports = {
  defaultSrc: ["'self'"],

  // Scripts: Only allow self-hosted and specific CDNs
  scriptSrc: [
    "'self'",
    // Allow Vercel analytics and insights
    "https://va.vercel-scripts.com",
    // Allow service worker
    "'wasm-unsafe-eval'", // Required for some Next.js features
  ],

  // Styles: Self-hosted and Google Fonts
  styleSrc: [
    "'self'",
    "'unsafe-inline'", // Required for Tailwind CSS
    "https://fonts.googleapis.com",
  ],

  // Images: Self, data URIs, and Unsplash for event images
  imgSrc: [
    "'self'",
    "data:",
    "blob:",
    "https://images.unsplash.com",
    "https://via.placeholder.com", // For fallback images
  ],

  // Fonts: Self and Google Fonts
  fontSrc: [
    "'self'",
    "https://fonts.gstatic.com",
  ],

  // Connections: API calls and external services
  connectSrc: [
    "'self'",
    // Allow Sentry for error reporting (when configured)
    "https://sentry.io",
    "https://*.sentry.io",
    // Allow Vercel analytics
    "https://vitals.vercel-insights.com",
    // Allow Upstash Redis for rate limiting
    "https://*.upstash.io",
  ],

  // Media: Self-hosted content
  mediaSrc: ["'self'"],

  // Objects: Disable for security
  objectSrc: ["'none'"],

  // Base URI: Only self
  baseUri: ["'self'"],

  // Forms: Only submit to self
  formAction: ["'self'"],

  // Frames: Completely disable
  frameAncestors: ["'none'"],
  frameSrc: ["'none'"],

  // Worker: Allow service worker
  workerSrc: ["'self'", "blob:"],

  // Upgrade insecure requests in production
  upgradeInsecureRequests: process.env.NODE_ENV === 'production',
};root@a53660941a77:/workspace#
I’ll explore the script csv-to-events-json for relevant categories and check related docs.

};root@a53660941a77:/workspace# rg "nine" missinggold -i
missinggold/public/locales/ar/common.json
154:    "googleSignInError": "فشل في تسجيل الدخول باستخدام جوجل",
171:    "googleSignInError": "فشل في تسجيل الدخول باستخدام جوجل"

missinggold/public/locales/en/common.json
154:    "googleSignInError": "Failed to sign in with Google",
171:    "googleSignInError": "Failed to sign in with Google"

missinggold/public/locales/ku/common.json
148:    "googleSignInError": "شکستی چوونە ژوورەوە بە گووگڵ",
165:    "googleSignInError": "شکستی چوونە ژوورەوە بە گووگڵ"

missinggold/messages/en.json
132:    "googleSignInError": "Failed to sign in with Google"

missinggold/messages/ar.json
135:    "googleSignInError": "فشل في تسجيل الدخول باستخدام جوجل"

missinggold/messages/ku.json
220:    "googleSignInError": "شکست له چوونه ژوورهوه به گووگڵ"

missinggold/STEP_2_COMPLETION_REPORT.md
51:- ✅ `register.googleSignInError` - Previously hardcoded

missinggold/I18N_AUDIT_REPORT.json
48:      "suggested_translation_key": "register.googleSignInError",
66:      "suggested_translation_key": "login.googleSignInError",
327:      "key": "register.googleSignInError",

missinggold/STEP_3_COMPLETION_REPORT.md
58:- ✅ **Line 56:** `"Failed to sign in with Google"` → `t('register.googleSignInError')`

missinggold/src/app/login/LoginForm.tsx
52:      setError(t('login.googleSignInError'));

missinggold/src/app/register/RegisterForm.tsx
56:      setError(t('register.googleSignInError'));
I'll try searching for "Category" with a capital C. Let's see if that works.

root@a53660941a77:/workspace# rg "Categories" -n missinggold -i
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md
133:-- UAE-specific event categories
134:INSERT INTO categories (country, name_en, name_ar) VALUES
155:- Local cultural event categories
179:    features: ['credit_cards', 'luxury_categories']

missinggold/public/mockups/explore.html
6:  <title>Hub • Events First + Two-Row Categories</title>
54:    <!-- Two-row categories: compact tiles with small icons -->

missinggold/public/manifest.json
13:  "categories": ["events", "social", "lifestyle", "community"],

missinggold/FILE_BY_FILE_OPTIMIZATION.md
845:  --only-categories=performance,accessibility,best-practices,seo \
853:const scores = report.categories;

missinggold/QUICK_REFERENCE.md
134:// Categories

missinggold/public/locales/ar/common.json
3:  "categories.${event.category}": "",
7:    "categories": "الأقسام",
49:    "exploreCategories": "استكشف الأقسام",
50:    "exploreCategoriesSubtitle": "ابحث عن فعاليات تتناسب مع اهتماماتك وشغفك",
122:  "categories": {
296:    "allCategories": "جميع الفئات",
428:  "categoriesPage": {

missinggold/public/locales/en/common.json
3:  "categories.${event.category}": "",
7:    "categories": "Categories",
49:    "exploreCategories": "Explore Categories",
50:    "exploreCategoriesSubtitle": "Find events that match your interests and passions",
122:  "categories": {
296:    "allCategories": "All Categories",
383:    "all": "All Categories",
400:  "categoriesPage": {
401:    "title": "Event Categories",

missinggold/public/locales/ku/common.json
3:  "categories.${event.category}": "",
7:    "categories": "پۆلەکان",
43:    "exploreCategories": "پۆلەکان بگەڕێ",
44:    "exploreCategoriesSubtitle": "بۆنە بدۆزەرەوە کە بە حەزی تۆوە دگرە",
116:  "categories": {
293:    "allCategories": "هەموو پۆلەکان",
422:  "categoriesPage": {

missinggold/public/sw.js
Error: Output for session 'shell' contained a line exceeding the max of 4096 bytes (observed at least 7467 bytes).

The byte sequence which exceeded the limit started with: b'\x1b[0m\x1b[32m1\x1b[0m:if(!s'

The exec session has been deleted. Please start a new session.

Tip - rerun the command and extract only what you need, e.g.:
  * grep -nE 'PATTERN' FILE | cut -c1-200
  * grep -o 'PATTERN' FILE
  * jq -r '.json.path' FILE
  * grep -a PATTERN FILE
I need to reopen the session now.

I'll rerun the command with more specific limitations this time.

rg "Categories" -n missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md
root@a53660941a77:/workspace# rg "Categories" -n missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md
I need to check the 'categories' object in common.json and understand its structure.

root@a53660941a77:/workspace# sed -n '116,160p' missinggold/public/locales/en/common.json
    "creating": "Creating...",
    "createEvent": "Create Event",
    "imageUploadError": "Failed to upload image. Please try again.",
    "createEventError": "An error occurred while creating the event.",
    "uploadImageFailed": "Failed to upload image"
  },
  "categories": {
    "${event.category}": "",
    "technologyInnovation": "Technology & Innovation",
    "businessNetworking": "Business & Networking",
    "musicConcerts": "Music & Concerts",
    "artsCulture": "Arts & Culture",
    "sportsFitness": "Sports & Fitness",
    "foodDrink": "Food & Drink",
    "learningDevelopment": "Learning & Development",
    "healthWellness": "Health & Wellness",
    "communitySocial": "Community & Social",
    "gamingEsports": "Gaming & Esports",
    "spiritualReligious": "Spiritual & Religious",
    "familyKids": "Family & Kids",
    "outdoorAdventure": "Outdoor & Adventure",
    "virtualEvents": "Virtual Events",
    "academicConferences": "Academic and Conferences"
  },
  "login": {
    "welcomeBack": "Welcome Back",
    "subtitle": "Sign in to your IraqEvents account",
    "continueWithGoogle": "Continue with Google",
    "orContinueWith": "Or continue with email",
    "emailAddress": "Email Address",
    "emailPlaceholder": "Enter your email",
    "password": "Password",
    "passwordPlaceholder": "Enter your password",
    "signingIn": "Signing in...",
    "signIn": "Sign In",
    "noAccount": "Don't have an account?",
    "createAccount": "Create one here",
    "invalidCredentials": "Invalid email or password",
    "googleSignInError": "Failed to sign in with Google",
    "forgotPassword": "Forgot password?"
  },
  "register": {
    "joinIraqEvents": "Join IraqEvents",
    "createAccountSubtitle": "Create your account to start discovering and creating amazing events",
    "continueWithGoogle": "Continue with Google",
User mentioned 9 categories, which might relate to OptimizedNeonHomepage, but that only had 5.

root@a53660941a77:/workspace# rg "1." missinggold -g"*.md" -n | head
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:24:- **i18n System**: Built with `next-intl` - industry standard
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:33:### **Option 1: Single Platform, Multiple Countries** ⭐ **RECOMMENDED**
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:79:eventra-iraq.com      (Partner 1)
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:95:### **Phase 1: UAE Expansion (Pilot)** - *2-3 weeks*
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:97:#### Week 1: Localization Setup
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:99:// 1. Add UAE-specific translations
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:152:### **Phase 3: Jordan, Lebanon, Morocco** - *1.5 weeks each*
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:161:### **1. Country Configuration System**
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:228:UAE (Month 6):      $15,000/month (3x Iraq due to higher GDP)
missinggold/MULTI_COUNTRY_SCALING_STRATEGY.md:229:Saudi (Month 12):   $25,000/month (5x Iraq, largest market)
I’m considering opening MARKETING_REVENUE_STRATEGY to check if it holds useful data.

root@a53660941a77:/workspace# sed -n '1,160p' missinggold/MARKETING_REVENUE_STRATEGY.md
# 🚀 EVENTRA: COMPREHENSIVE MARKETING & REVENUE STRATEGY
## Iraq Launch → Global Expansion Roadmap

---

## 🎯 **EXECUTIVE SUMMARY**

**Mission**: Launch Eventra as the dominant event platform in Iraq, then rapidly scale across the Middle East using AI-powered a
utomation and intelligent localization.

**Strategy**: Start with Iraq's underserved Kurdish and Arabic markets, build automated revenue streams, then replicate the mode
l across 20+ countries with minimal manual intervention.

**Goal**: $10M ARR by Year 2, $50M ARR by Year 3, across 10+ countries.

---

## 🌍 **INTELLIGENT LOCALIZATION STRATEGY**

### **🧠 AI-POWERED GEO-LANGUAGE DETECTION**

#### **Smart Language Selection System**
```javascript
// Auto-detect user's optimal language
const detectOptimalLanguage = (userLocation, browserLang, userHistory) => {
  // Priority order:
  1. User's saved preference (highest priority)
  2. Geo-location + cultural mapping
  3. Browser language detection
  4. Fallback to region default

  // Iraq Example:
  Baghdad → Arabic (default)
  Erbil/Sulaymaniyah → Kurdish (default)
  Tourist areas → English option prominent
}
```

#### **Geo-Cultural Intelligence Map**
```
IRAQ LOCALIZATION:
🏙️ Baghdad: Arabic (primary), English (business)
🏔️ Erbil: Kurdish (primary), Arabic (secondary), English (business)
🏛️ Sulaymaniyah: Kurdish (primary), Arabic (secondary)
🌍 Tourist hotspots: English prominent with local language

UAE LOCALIZATION:
🏙️ Dubai: English (primary), Arabic (secondary)
🏛️ Abu Dhabi: Arabic (primary), English (business)
🏖️ Tourist areas: English (primary), Arabic (cultural events)

TURKEY LOCALIZATION:
🏙️ Istanbul: Turkish (primary), English (business), Kurdish (southeast)
🏔️ Southeast regions: Kurdish (primary), Turkish (secondary)
```

### **🎨 CULTURAL ADAPTATION ENGINE**

#### **Content Customization by Region**
```
EVENT CATEGORIES (Auto-adapted by location):

IRAQ:
- Kurdish Cultural Events (Newroz, traditional festivals)
- Islamic Religious Events (Ramadan, Eid celebrations)
- Business Conferences (oil, tech, trade)
- Family Events (wedding halls, gatherings)
- Educational Seminars (universities, training)

UAE:
- International Business Events (trade shows, conferences)
- Cultural Festivals (multicultural celebrations)
- Sports Events (Formula 1, football)
- Luxury Events (galas, exhibitions)
- Tech & Innovation (startup events, AI conferences)

TURKEY:
- Cultural Heritage Events (historical celebrations)
- Business Conferences (manufacturing, tourism)
- Kurdish Cultural Events (southeast regions)
- International Events (connecting Europe-Asia)
```

---

## 💰 **EXHAUSTIVE REVENUE STREAM ARCHITECTURE**

### **🏆 PRIMARY REVENUE STREAMS (High-Volume)**

#### **1. Event Ticketing Commission (40% of revenue)**
```
PRICING MODEL:
- Free events: $0 commission (build user base)
- Paid events: 2.5% commission (competitive vs Eventbrite's 3-5%)
- Premium events: 3.5% commission (high-value events)
- Corporate events: 4.5% commission (enterprise pricing)

VOLUME PROJECTIONS (Iraq Year 1):
- 1,000 events/month × $50 average ticket × 2.5% = $1,250/month
- Growing to 10,000 events/month × $75 average = $18,750/month
- Annual potential: $150K-$225K from Iraq alone
```

#### **2. Hotel Booking Integration (25% of revenue)**
```
PARTNERSHIP MODEL:
- Commission: 8-12% from hotel bookings
- Average booking: $80/night × 2 nights = $160
- Commission per booking: $13-19
- Cross-sell rate: 15% of event attendees

AUTOMATION:
- AI suggests hotels near event venues
- Dynamic pricing based on event dates
- Package deals (event ticket + hotel)
- Instant booking through API integration

PROJECTED REVENUE:
- 100 hotel bookings/month × $15 commission = $1,500/month
- Growing to 1,000 bookings/month = $15,000/month
- Annual potential: $120K-$180K from Iraq alone
```

#### **3. Travel Package Commissions (15% of revenue)**
```
SERVICES:
- Flight bookings (5-8% commission)
- Car rentals (10-15% commission)
- Tour packages (15-20% commission)
- Complete travel itineraries

AI AUTOMATION:
- Auto-generate travel packages based on events
- Cross-country event recommendations
- Dynamic pricing optimization
- Partnership with regional airlines

REVENUE EXAMPLE:
- Flight booking: $400 × 5% = $20 commission
- Car rental: $100 × 12% = $12 commission
- Tour package: $200 × 18% = $36 commission
- Total per package: $68 commission
- 50 packages/month = $3,400/month
```

### **🎯 SECONDARY REVENUE STREAMS (High-Margin)**

#### **4. Premium Event Listings (10% of revenue)**
```
PREMIUM FEATURES:
- Featured placement: $20-50/event
- Homepage banner: $100-200/event
- Social media promotion: $30-80/event
- Email marketing inclusion: $25-60/event

AUTOMATION:
- Self-service premium upgrade portal
- AI-optimized placement based on user behavior
- Automated social media posting
- Performance analytics dashboard

MONTHLY POTENTIAL:
The document's large, but I'll check if "9" or QUICK_REFERENCE.md mentions categories.

root@a53660941a77:/workspace# sed -n '100,160p' missinggold/QUICK_REFERENCE.md
```

### Media Query

```typescript
const isMobile = useMediaQuery('(max-width: 768px)');
```

---

## 🎭 Loading States

### Skeleton Loaders

```typescript
// While loading
if (loading) return <CardSkeleton count={6} />;

// Custom skeleton
<Skeleton width="60%" height={32} animation="wave" />
```

### Common Patterns

```typescript
// Card grids
<CardSkeleton count={6} />

// Lists
<ListSkeleton count={5} />

// Tables
<TableSkeleton rows={5} columns={4} />

// Categories
<CategoryGridSkeleton count={5} />
```

---

## 🛡️ Error Handling

### Basic Error Boundary

```typescript
<ErrorBoundary>
  <YourComponent />
</ErrorBoundary>
```

### With Custom Fallback

```typescript
<ErrorBoundary
  fallback={<CustomError />}
  onError={(error) => logToSentry(error)}
>
  <YourComponent />
</ErrorBoundary>
```
I’ll search for references to grids or categories across the repo, starting with priorities.

root@a53660941a77:/workspace# rg "sub categories" -i missinggold
I'll search for ‘subcategories’ in docs, ignoring any hyphens in terms like 'STEP' or 'OPT.'

root@a53660941a77:/workspace# rg "sub-category" -i missinggold
I'll search for 'category' in common.json to check if there are additional context fields.

root@a53660941a77:/workspace# rg "category" missinggold/public/locales/en/common.json -n
3:  "categories.${event.category}": "",
75:    "category": "Category",
102:    "category": "Category",
103:    "selectCategory": "Select category",
123:    "${event.category}": "",
382:  "categoryDescriptions": {
417:        "category": "Technology & Innovation"
423:        "category": "Music & Concerts"
429:        "category": "Business & Networking"
435:        "category": "Arts & Culture"
I think I should check page-neon.tsx for additional categories beyond the 5 found.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/page-neon.tsx
"use client";

export const dynamic = 'force-dynamic';
import NeonHomepage from "./components/NeonHomepage";

export default function Home() {
  return <NeonHomepage />;
}root@a53660941a77:/workspace#
I'll check MultiVenueHomepage for category data and look through the tabs array.

}root@a53660941a77:/workspace# rg "category" missinggold/src/app/components/MultiVenueHomepage.tsx -n
15:  category?: string;
I'll look inside src/app/admin to see if there are 9 categories listed.

root@a53660941a77:/workspace# ls missinggold/src/app/admin
monitor
I'll take a look at the monitor and check its current status.

root@a53660941a77:/workspace# ls missinggold/src/app/admin/monitor
MonitorClient.tsx  page.tsx
I'm looking at MonitorClient to review its categories. Let's see what's there.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/admin/monitor/MonitorClient.tsx
"use client";

import { useEffect, useState } from "react";

type Health = {
  status?: string;
  checks?: {
    env?: {
      databaseUrlSet?: boolean;
      nextAuthSecretSet?: boolean;
      googleAuthConfigured?: boolean;
    };
    database?: { status?: string; message?: string };
  };
};

export default function MonitorClient() {
  const [health, setHealth] = useState<Health | null>(null);
  const [eventCount, setEventCount] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<string | null>(null);

  async function load() {
    try {
      setError(null);
      const [healthRes, eventsRes] = await Promise.all([
        fetch("/api/health", { cache: "no-store" }),
        fetch("/api/events?type=public", { cache: "no-store" }),
      ]);

      const healthJson: Health = await healthRes.json();
      setHealth(healthJson);

      const eventsJson: any[] = await eventsRes.json();
      setEventCount(Array.isArray(eventsJson) ? eventsJson.length : 0);
      setLastUpdated(new Date().toLocaleTimeString());
    } catch (e: any) {
      setError(e?.message || String(e));
    }
  }

  useEffect(() => {
    load();
    const id = setInterval(load, 10000);
    return () => clearInterval(id);
  }, []);

  const dbOk = health?.checks?.database?.status === "ok";
  const envDb = health?.checks?.env?.databaseUrlSet;
  const envSecret = health?.checks?.env?.nextAuthSecretSet;

  return (
    <div className="grid grid-cols-1 gap-4">
      <div className="rounded border p-4">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-medium">Health</h2>
          <span className={`text-xs px-2 py-1 rounded ${dbOk ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"}`}>
            {dbOk ? "OK" : "ERROR"}
          </span>
        </div>
        <div className="mt-3 text-sm">
          <div>DB connectivity: <strong>{dbOk ? "ok" : (health?.checks?.database?.message || "error")}</strong></div>
          <div>Env: DATABASE_URL=<strong>{envDb ? "set" : "missing"}</strong>, NEXTAUTH_SECRET=<strong>{envSecret ? "set" : "mis
sing"}</strong></div>
        </div>
      </div>

      <div className="rounded border p-4">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-medium">Events</h2>
          <span className="text-xs px-2 py-1 rounded bg-blue-100 text-blue-700">Public</span>
        </div>
        <div className="mt-3 text-3xl font-semibold">{eventCount ?? "-"}</div>
        <div className="text-xs text-gray-500 mt-1">Count of items from /api/events?type=public</div>
      </div>

      {error && (
        <div className="rounded border border-red-300 bg-red-50 text-red-800 p-3 text-sm">Error: {error}</div>
      )}

      <div className="text-xs text-gray-500">Last updated: {lastUpdated ?? "loading..."}</div>
    </div>
  );
}root@a53660941a77:/workspace#
The user mentioned 9 categories; I'll search for grids, subcategories in the JSON files.

}root@a53660941a77:/workspace# rg "grid" missinggold -g"*.json"
I think the categories might be in src/app/components/OptimizedNeonHomepage. I'll check further.

root@a53660941a77:/workspace# rg "Category" missinggold/src/app/components/OptimizedNeonHomepage.tsx -n
31:interface Category {
66:function useCategories(): Category[] {
132: * Category Card Component - Memoized for performance
134:const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
174:CategoryCard.displayName = 'CategoryCard';
335:            <CategoryCard key={category.id} category={category} index={index} />
I’ll search for “category” to see if any extra structure is defined in other languages.

root@a53660941a77:/workspace# rg "category" missinggold/messages/ku.json -n
2:  "categories.${event.category}": ""
144:    "category": "پۆل",
171:    "category": "پۆل",
351:  "categoryDescriptions": {
I’ll check the UI flows for the 9 categories, maybe the data comes from there.

root@a53660941a77:/workspace# rg "sub" -n missinggold/src/app/page-original.tsx
81:      subtitle: t('heroSlides.slide1.subtitle'),
93:      subtitle: t('heroSlides.slide2.subtitle'),
105:      subtitle: t('heroSlides.slide3.subtitle'),
117:      subtitle: t('heroSlides.slide4.subtitle'),
461:                    {slide.subtitle}
I’m considering how to define 9 categories from repo data, maybe using translation keys or data files.

root@a53660941a77:/workspace# rg "Category" missinggold/src -n | head
missinggold/src/app/dashboard/EventForm.tsx:16:  const [category, setCategory] = useState("");
missinggold/src/app/dashboard/EventForm.tsx:64:        setWhatsappGroup(""); setWhatsappPhone(""); setContactMethod(""); setCate
gory("");
missinggold/src/app/dashboard/EventForm.tsx:136:        {/* Category */}
missinggold/src/app/dashboard/EventForm.tsx:143:            onChange={e => setCategory(e.target.value)}
missinggold/src/app/dashboard/EventForm.tsx:146:            <option value="">{t('eventForm.selectCategory')}</option>
missinggold/src/app/globals.css:221:/* Neon Theme - Category Color System */
missinggold/src/app/globals.css:223:  /* Category Colors */
missinggold/src/app/globals.css:257:  /* Category Colors */
missinggold/src/app/globals.css:301:/* Category-Specific Glow Classes */
missinggold/src/app/globals.css:685:/* Category-Specific Glow Classes */
I'll peek at globals.css to see if category colors are defined there.

root@a53660941a77:/workspace# sed -n '221,340p' missinggold/src/app/globals.css
/* Neon Theme - Category Color System */
:root {
  /* Category Colors */
  --events-color: #B24BF3;
  --hotels-color: #FF2E97;
  --restaurants-color: #FF6B35;
  --cafes-color: #FFED4E;
  --tourism-color: #00F0FF;

  /* Background Colors */
  --bg-primary: #0D0019;
  --bg-secondary: #1A0033;
  --bg-card: #2D1B4E;
  --bg-pattern: #3D2766;

  /* Text Colors */
  --text-primary: #FFFFFF;
  --text-secondary: #E0D4F7;
  --text-tertiary: #B4A5D6;
}

/* Background Pattern */
body {
  background: var(--bg-primary);
  background-image:
    repeating-linear-gradient(
      45deg,
      transparent,
      transparent 35px,
      rgba(61, 39, 102, 0.2) 35px,
      rgba(61, 39, 102, 0.2) 36px
    );
}

/* ===== NEON THEME - CATEGORY COLOR SYSTEM ===== */
:root {
  /* Category Colors */
  --events-color: #B24BF3;
  --hotels-color: #FF2E97;
  --restaurants-color: #FF6B35;
  --cafes-color: #FFED4E;
  --tourism-color: #00F0FF;

  /* Background Colors */
  --bg-primary: #0D0019;
  --bg-secondary: #1A0033;
  --bg-card: #2D1B4E;
  --bg-pattern: #3D2766;

  /* Text Colors */
  --text-primary: #FFFFFF;
  --text-secondary: #E0D4F7;
  --text-tertiary: #B4A5D6;

  /* System Colors */
  --success-color: #00FF88;
  --warning-color: #FFED4E;
  --error-color: #FF2E97;
  --info-color: #00F0FF;
}

/* Background Pattern */
body {
  background: var(--bg-primary);
  background-image:
    repeating-linear-gradient(
      45deg,
      transparent,
      transparent 35px,
      rgba(61, 39, 102, 0.2) 35px,
      rgba(61, 39, 102, 0.2) 36px
    );
  color: var(--text-primary);
}

/* ===== NEON GLOW EFFECTS ===== */
.neon-glow {
  text-shadow: 0 0 5px currentColor, 0 0 10px currentColor, 0 0 15px currentColor;
}

/* Category-Specific Glow Classes */
.events-glow {
  box-shadow:
    0 0 5px var(--events-color),
    0 0 10px var(--events-color),
    0 0 20px var(--events-color),
    0 0 40px var(--events-color),
    0 0 80px var(--events-color);
}

.hotels-glow {
  box-shadow:
    0 0 5px var(--hotels-color),
    0 0 10px var(--hotels-color),
    0 0 20px var(--hotels-color),
    0 0 40px var(--hotels-color),
    0 0 80px var(--hotels-color);
}

.restaurants-glow {
  box-shadow:
    0 0 5px var(--restaurants-color),
    0 0 10px var(--restaurants-color),
    0 0 20px var(--restaurants-color),
    0 0 40px var(--restaurants-color),
    0 0 80px var(--restaurants-color);
}

.cafes-glow {
  box-shadow:
    0 0 5px var(--cafes-color),
    0 0 10px var(--cafes-color),
    0 0 20px var(--cafes-color),
    0 0 40px var(--cafes-color),
    0 0 80px var(--cafes-color);
}

.tourism-glow {
  box-shadow:
    0 0 5px var(--tourism-color),
I see the user mentioned 9 categories. Let's search for more color definitions.

root@a53660941a77:/workspace# rg "--[a-z]+-color" missinggold/src/app/globals.css -n
rg: unrecognized flag --[a-z]+-color
Looks like I need to refine the search for color variables in globals.css.

root@a53660941a77:/workspace# rg "--[a-zA-Z-]+-color" missinggold/src/app/globals.css
rg: unrecognized flag --[a-zA-Z-]+-color
I should consider using '--.*-color' with grep to search effectively.

root@a53660941a77:/workspace# grep -n "--" missinggold/src/app/globals.css | head
grep -n -- "--" missinggold/src/app/globals.css | head
Looks like the output may be too large. Trying rg "--" instead of grep.

rg "--" -n missinggold/src/app/globals.css | head
rg "category-icon" -n missinggold/src/app/globals.css | head
I think the command was executed, but there might be no matches. Let's try without the pipe.

rg "category-icon" -n missinggold/src/app/globals.css
I'm double-checking translation files for the 9 grid categories, possibly linked to events or UI sections.

sed -n '1,200p' missinggold/src/app/components/SimpleLanguageProvider.tsx
Hmm, no output from the command. I should verify the file path with ls.

ls missinggold/src/app/components/SimpleLanguageProvider.tsx
The prompt doesn't show root@...#, so I’ll check if commands are executing.


^C
root@a53660941a77:/workspace# sed -n '1,120p' missinggold/src/app/components/SimpleLanguageProvider.tsx
'use client';

import React, { createContext, useContext } from 'react';

// Simple translation data
const translations: Record<string, string> = {
  // Navigation
  'navigation.home': 'Home',
  'navigation.events': 'Events',
  'navigation.register': 'Register',
  'navigation.login': 'Login',

  // Common
  'common.allCities': 'All Cities',
  'common.allCategories': 'All Categories',

  // Cities
  'cities.baghdad': 'Baghdad',
  'cities.basra': 'Basra',
  'cities.mosul': 'Mosul',
  'cities.erbil': 'Erbil',
  'cities.sulaymaniyah': 'Sulaymaniyah',
  'cities.duhok': 'Duhok',
  'cities.kirkuk': 'Kirkuk',
  'cities.anbar': 'Anbar',
  'cities.najaf': 'Najaf',
  'cities.karbala': 'Karbala',

  // Categories
  'categories.technologyInnovation': 'Technology & Innovation',
  'categories.businessNetworking': 'Business & Networking',
  'categories.musicConcerts': 'Music & Concerts',
  'categories.artsCulture': 'Arts & Culture',
  'categories.sportsFitness': 'Sports & Fitness',
  'categories.foodDrink': 'Food & Drink',
  'categories.learningDevelopment': 'Learning & Development',
  'categories.healthWellness': 'Health & Wellness',
  'categories.communitySocial': 'Community & Social',
  'categories.gamingEsports': 'Gaming & Esports',
  'categories.spiritualReligious': 'Spiritual & Religious',
  'categories.familyKids': 'Family & Kids',
  'categories.outdoorAdventure': 'Outdoor & Adventure',
  'categories.virtualEvents': 'Virtual Events',
  'categories.academicConferences': 'Academic & Conferences',

  // Hero slides
  'heroSlides.slide1.title': 'Iraq Tech Summit 2024',
  'heroSlides.slide1.subtitle': 'Shaping the Future of Technology',
  'heroSlides.slide1.description': 'Join industry leaders and innovators',
  'heroSlides.slide2.title': 'Baghdad Music Festival',
  'heroSlides.slide2.subtitle': 'Three Days of Amazing Music',
  'heroSlides.slide2.description': 'Experience the best of Iraqi and international music',
  'heroSlides.slide3.title': 'Kurdistan Business Summit',
  'heroSlides.slide3.subtitle': 'Building Tomorrow Together',
  'heroSlides.slide3.description': 'Network with business leaders and entrepreneurs',
  'heroSlides.slide4.title': 'Mesopotamian Arts Exhibition',
  'heroSlides.slide4.subtitle': 'Ancient Heritage, Modern Expression',
  'heroSlides.slide4.description': 'Discover the rich artistic traditions of Iraq',

  // Hero actions
  'hero.registerNow': 'Register Now',
  'hero.getTickets': 'Get Tickets',
  'heroSlides.joinSummit': 'Join Summit',
  'heroSlides.exploreArt': 'Explore Art',

  // Hero stats
  'heroSlides.attendees': 'Attendees',
  'heroSlides.sessions': 'Sessions',
  'heroSlides.days': 'Days',
  'heroSlides.artists': 'Artists',
  'heroSlides.stages': 'Stages',
  'heroSlides.hours': 'Hours',
  'heroSlides.leaders': 'Leaders',
  'heroSlides.companies': 'Companies',
  'heroSlides.workshops': 'Workshops',
  'heroSlides.artworks': 'Artworks',
  'heroSlides.galleries': 'Galleries',
};

const SimpleLanguageContext = createContext({
  language: 'en',
  setLanguage: (lang: string) => {},
  t: (key: string) => translations[key] || key,
  isRTL: false,
});

export function SimpleLanguageProvider({ children }: { children: React.ReactNode }) {
  return (
    <SimpleLanguageContext.Provider value={{
      language: 'en',
      setLanguage: () => {},
      t: (key) => translations[key] || key,
      isRTL: false,
    }}>
      {children}
    </SimpleLanguageContext.Provider>
  );
}

export const useSimpleLanguage = () => useContext(SimpleLanguageContext);

// Also export as useLanguage for backward compatibility
export const useLanguage = () => {
  const context = useContext(SimpleLanguageContext);
  return {
    language: context.language,
    isRTL: context.isRTL,
    setLanguage: context.setLanguage
  };
};
This provider includes categories but lacks subcategories—I'll search for gamingEsports to investigate further.

root@a53660941a77:/workspace# rg "gamingEsports" -n missinggold
missinggold/public/locales/ar/common.json
133:    "gamingEsports": "الألعاب والرياضات الإلكترونية",
421:    "gamingEsports": "بطولات الألعاب ومسابقات الرياضة الإلكترونية",

missinggold/public/locales/en/common.json
133:    "gamingEsports": "Gaming & Esports",
393:    "gamingEsports": "Gaming tournaments and esports competitions",

missinggold/public/locales/ku/common.json
127:    "gamingEsports": "یارییەکان و یاری ئەلێکترۆنییەکان",
415:    "gamingEsports": "پاڵەوانێتی یاری و پێشبڕکێی یاریە ئەلیکترۆنییەکان",

missinggold/messages/en.json
111:    "gamingEsports": "Gaming & Esports",
319:    "gamingEsports": "Gaming tournaments, esports competitions, and gaming meetups",

missinggold/messages/ar.json
113:    "gamingEsports": "الألعاب والرياضات الإلكترونية",
333:    "gamingEsports": "بطولات الألعاب، مسابقات رياضات إلكترونية، ولقاءات اللعب",

missinggold/messages/ku.json
198:    "gamingEsports": "یارییهکان و یاریه ئەلێکترۆنییهکان",
362:    "gamingEsports": "پاڵەنییەکانی یاریی، پێشبڕکێی یاریی ئەلێکترۆنی، و کۆبوونەوەی یاریخازان",

missinggold/scripts/add-missing-translations.js
69:    "gamingEsports": {

missinggold/src/app/components/EventDetailsModal.tsx
46:    "Gaming & Esports": "categories.gamingEsports",

missinggold/src/app/components/SimpleLanguageProvider.tsx
39:  'categories.gamingEsports': 'Gaming & Esports',

missinggold/src/app/page-original.tsx
69:    { name: t('categories.gamingEsports'), icon: "🎮" },
235:      'gamingesports': 'categories.gamingEsports',

missinggold/src/app/categories/page.tsx
23:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },

missinggold/src/app/[locale]/events/page.tsx
72:    { name: t('categories.gamingEsports'), icon: "🎮", key: 'gamingEsports' },
306:      "Gaming & Esports": "categories.gamingEsports",

missinggold/src/app/[locale]/categories/page.tsx
38:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },

missinggold/src/app/dashboard/EventForm.tsx
156:            <option value="gamingEsports">{t('categories.gamingEsports')}</option>
I'll check if the repo has docs like STRATEGIC_PLATFORM_ANALYSIS to verify categories.

root@a53660941a77:/workspace# rg "category" missinggold/STRATEGIC_PLATFORM_ANALYSIS.md -n
I'll check if there's an IMPLEMENTATION_GUIDE with relevant categories. Let's see!

root@a53660941a77:/workspace# rg "category" missinggold/IMPLEMENTATION_GUIDE.md -n
359:    return items.filter(item => item.category === filter);
I'll check common.json for a possible homepage object with categories.

root@a53660941a77:/workspace# rg "homepage" -n missinggold/public/locales/en/common.json
36:  "homepage": {
Let me take a closer look at the situation before proceeding.

root@a53660941a77:/workspace# sed -n '36,120p' missinggold/public/locales/en/common.json
  "homepage": {
    "heroTitle": "Discover Amazing Events in Iraq & Kurdistan",
    "heroSubtitle": "Join thousands of people exploring the best events happening across Iraq and Kurdistan. From tech meetups t
o cultural festivals.",
    "getStarted": "Get Started",
    "exploreEvents": "Explore Events",
    "featuredEvents": "Featured Events",
    "upcomingEvents": "Upcoming Events",
    "allEvents": "All Events",
    "viewAllEvents": "View All Events",
    "noEventsFound": "No events found",
    "loading": "Loading events...",
    "exploreCities": "Explore Cities",
    "exploreCitiesSubtitle": "Discover amazing events in cities across the region",
    "exploreCategories": "Explore Categories",
    "exploreCategoriesSubtitle": "Find events that match your interests and passions",
    "findPerfectEvent": "Find Your Perfect Event",
    "featuredCarousel": "Featured event carousel will appear here"
  },
  "events": {
    "title": "Discover Amazing Events",
    "subtitle": "Find and join incredible events happening across Iraq and Kurdistan. From tech summits to cultural festivals, t
here's something for everyone.",
    "searchPlaceholder": "Search events by title, description, or location...",
    "foundEvents": "Found {count} event{count, plural, one {} other {s}}",
    "noEventsFound": "No Events Found",
    "noEventsMessage": "Try adjusting your search criteria or filters",
    "clearAllFilters": "Clear All Filters",
    "viewDetails": "View Details",
    "free": "FREE",
    "soldOut": "SOLD OUT",
    "byOrganizer": "by {name}",
    "createEventCta": "Don't See Your Event?",
    "createEventSubtitle": "Create and promote your own events on IraqEvents platform",
    "createYourEvent": "Create Your Event",
    "viewPublicPage": "View Public Page",
    "exploreByCategory": "Explore by Category",
    "eventImage": "Event Image",
    "location": "Location",
    "eventDetails": "Event Details",
    "dateTime": "Date & Time",
    "category": "Category",
    "price": "Price",
    "aboutEvent": "About Event",
    "noDescription": "No description available",
    "registerForEvent": "Register for Event",
    "shareEvent": "Share Event",
    "organizer": "Organizer",
    "anonymousOrganizer": "Anonymous Organizer",
    "noContactInfo": "No contact information available"
  },
  "dashboard": {
    "welcomeBack": "Welcome back, {name}!",
    "subtitle": "Manage your events and create new experiences for your community.",
    "browseEvents": "Browse Events",
    "createEvent": "Create Event",
    "cancel": "Cancel",
    "createNewEvent": "Create New Event",
    "myEvents": "My Events",
    "noEvents": "No events yet. Create one!",
    "loadingEvents": "Loading events..."
  },
  "eventForm": {
    "eventName": "Event Name",
    "eventNameRequired": "Event Name *",
    "eventNamePlaceholder": "Enter event name",
    "dateTime": "Date & Time",
    "dateTimeRequired": "Date & Time *",
    "category": "Category",
    "selectCategory": "Select category",
    "location": "Location/Address",
    "locationPlaceholder": "Enter event location or address",
    "description": "Event Description",
    "descriptionPlaceholder": "Describe your event, what attendees can expect, schedule, etc.",
    "eventImage": "Event Image",
    "selectImage": "Click to select image",
    "whatsappGroup": "WhatsApp Group Link",
    "whatsappPlaceholder": "https://chat.whatsapp.com/...",
    "whatsappPhone": "WhatsApp Phone Number",
    "whatsappPhonePlaceholder": "+964 XXX XXX XXXX",
    "contactMethod": "Contact Method",
    "contactPlaceholder": "Email, phone, or other contact method for attendees",
    "creating": "Creating...",
    "createEvent": "Create Event",
    "imageUploadError": "Failed to upload image. Please try again.",
    "createEventError": "An error occurred while creating the event.",
    "uploadImageFailed": "Failed to upload image"
I'm thinking about grouping 9 potential categories—maybe event types, venues, or marketing sections.

I’ll clarify the actual number of categories and align with the user’s request.

root@a53660941a77:/workspace# sed -n '1,160p' missinggold/src/app/cafes/page.tsx
"use client";

import Link from 'next/link';

export default function CafesPage() {
  const cafes = [
    {
      id: '1',
      name: 'Baghdad Coffee House',
      description: 'Traditional Iraqi coffee in a cozy atmosphere',
      rating: 4.6,
      priceRange: '$$',
      image: '☕',
      specialty: 'Turkish Coffee',
      location: 'Baghdad Old City'
    },
    {
      id: '2',
      name: 'Kurdish Mountain Cafe',
      description: 'Authentic Kurdish tea and sweets with mountain views',
      rating: 4.8,
      priceRange: '$',
      image: '🫖',
      specialty: 'Kurdish Tea',
      location: 'Erbil Hills'
    },
    {
      id: '3',
      name: 'Tigris River Cafe',
      description: 'Riverside cafe with fresh pastries and specialty drinks',
      rating: 4.5,
      priceRange: '$$',
      image: '🧁',
      specialty: 'Pastries & Desserts',
      location: 'Baghdad Riverside'
    },
    {
      id: '4',
      name: 'Modern Brew Co.',
      description: 'Contemporary cafe with international coffee blends',
      rating: 4.7,
      priceRange: '$$$',
      image: '🥤',
      specialty: 'Specialty Coffee',
      location: 'Erbil Center'
    }
  ];

  const cafeTypes = [
    { name: 'Traditional Coffee Houses', icon: '☕', count: 32, description: 'Authentic Iraqi coffee culture' },
    { name: 'Tea Gardens', icon: '🍵', count: 28, description: 'Kurdish tea traditions' },
    { name: 'Modern Cafes', icon: '🥤', count: 24, description: 'International coffee & vibes' },
    { name: 'Shisha Lounges', icon: '💨', count: 18, description: 'Relaxing hookah experience' },
    { name: 'Bakery Cafes', icon: '🥐', count: 22, description: 'Fresh pastries & coffee' },
    { name: 'Rooftop Cafes', icon: '🌆', count: 15, description: 'City views & coffee' }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 237, 78, 0.1)',
          border: '2px solid var(--cafes-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--cafes-color)',
            textShadow: '0 0 10px var(--cafes-color)',
            marginBottom: '16px'
          }}>
            ☕ Cafes
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Experience the rich coffee culture of Iraq & Kurdistan
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button cafes">
          ← Back to Home
        </Link>
      </div>

      {/* Featured Cafes Grid */}
      <div style={{
        marginBottom: '60px'
      }}>
        <h2 style={{
          textAlign: 'center',
          color: 'var(--cafes-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--cafes-color)'
        }}>
          Featured Cafes
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
          gap: '24px',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          {cafes.map((cafe) => (
            <div key={cafe.id} className="neon-card cafes cafes-glow">
              <div style={{ padding: '24px' }}>
                {/* Cafe Image/Icon */}
                <div style={{
                  width: '100%',
                  height: '200px',
                  background: 'linear-gradient(135deg, var(--cafes-color), var(--bg-secondary))',
                  borderRadius: '12px',
                  marginBottom: '20px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '4rem'
                }}>
                  {cafe.image}
                </div>

                {/* Cafe Info */}
                <h3 style={{
                  color: 'var(--text-primary)',
                  fontSize: '1.5rem',
                  marginBottom: '8px',
                  textShadow: '0 0 5px var(--cafes-color)'
                }}>
                  {cafe.name}
                </h3>

                <p style={{
                  color: 'var(--text-secondary)',
                  marginBottom: '16px',
                  lineHeight: '1.6'
                }}>
                  {cafe.description}
                </p>

                <div style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr',
                  gap: '12px',
                  marginBottom: '16px'
                }}>
The tourism page has six categories, so I'll check if hotels is similar.

root@a53660941a77:/workspace# sed -n '1,160p' missinggold/src/app/hotels/page.tsx
"use client";

import Link from 'next/link';

export default function HotelsPage() {
  const hotels = [
    {
      id: '1',
      name: 'Baghdad Palace Hotel',
      description: 'Luxury accommodation in the heart of Baghdad',
      rating: 4.8,
      price: '$120/night',
      image: '🏰',
      location: 'Central Baghdad'
    },
    {
      id: '2',
      name: 'Erbil Grand Hotel',
      description: 'Modern hotel with stunning city views',
      rating: 4.6,
      price: '$95/night',
      image: '🏨',
      location: 'Erbil Center'
    },
    {
      id: '3',
      name: 'Basra Riverside Hotel',
      description: 'Peaceful riverside accommodation',
      rating: 4.4,
      price: '$80/night',
      image: '🌊',
      location: 'Basra Waterfront'
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 46, 151, 0.1)',
          border: '2px solid var(--hotels-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--hotels-color)',
            textShadow: '0 0 10px var(--hotels-color)',
            marginBottom: '16px'
          }}>
            🏨 Hotels
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Find the perfect place to stay in Iraq & Kurdistan
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button hotels">
          ← Back to Home
        </Link>
      </div>

      {/* Hotels Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
        gap: '24px',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {hotels.map((hotel) => (
          <div key={hotel.id} className="neon-card hotels hotels-glow">
            <div style={{ padding: '24px' }}>
              {/* Hotel Image/Icon */}
              <div style={{
                width: '100%',
                height: '200px',
                background: 'linear-gradient(135deg, var(--hotels-color), var(--bg-secondary))',
                borderRadius: '12px',
                marginBottom: '20px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '4rem'
              }}>
                {hotel.image}
              </div>

              {/* Hotel Info */}
              <h3 style={{
                color: 'var(--text-primary)',
                fontSize: '1.5rem',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--hotels-color)'
              }}>
                {hotel.name}
              </h3>

              <p style={{
                color: 'var(--text-secondary)',
                marginBottom: '16px',
                lineHeight: '1.6'
              }}>
                {hotel.description}
              </p>

              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginBottom: '16px'
              }}>
                <span style={{
                  color: 'var(--hotels-color)',
                  fontSize: '1.1rem',
                  fontWeight: 'bold'
                }}>
                  ⭐ {hotel.rating}
                </span>
                <span style={{
                  color: 'var(--text-tertiary)',
                  fontSize: '0.9rem'
                }}>
                  📍 {hotel.location}
                </span>
              </div>

              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{
                  color: 'var(--hotels-color)',
                  fontSize: '1.3rem',
                  fontWeight: 'bold',
                  textShadow: '0 0 5px var(--hotels-color)'
                }}>
                  {hotel.price}
                </span>
                <button className="neon-button hotels">
                  Book Now
                </button>
              </div>
            </div>
          </div>
        ))}
I'll continue checking to confirm whether the hotels page lists categories or sub-categories.

root@a53660941a77:/workspace# sed -n '160,320p' missinggold/src/app/hotels/page.tsx
        ))}
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card hotels hotels-glow" style={{
          maxWidth: '600px',
          margin: '0 auto',
          padding: '32px'
        }}>
          <h2 style={{
            color: 'var(--hotels-color)',
            fontSize: '2rem',
            marginBottom: '16px',
            textShadow: '0 0 10px var(--hotels-color)'
          }}>
            Can&apos;t find what you&apos;re looking for?
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            marginBottom: '24px',
            fontSize: '1.1rem'
          }}>
            Contact us to find more hotel options in your preferred location
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button hotels">
              Contact Us
            </button>
            <button className="neon-button tourism">
              Browse All Categories
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}root@a53660941a77:/workspace#
I need to check if restaurants have categories like cafes and tourism pages do.

}root@a53660941a77:/workspace# rg "const .*Categories" missinggold/src/app/restaurants/page.tsx -n
I'll check if restaurantCategories has a count attribute by searching for 'count:'.

root@a53660941a77:/workspace# rg "count" missinggold/src/app/restaurants/page.tsx -n
220:            { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
221:            { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
222:            { name: 'Middle Eastern', icon: '🧆', count: 15 },
223:            { name: 'Seafood', icon: '🦐', count: 12 },
224:            { name: 'International', icon: '🍝', count: 20 },
225:            { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
249:                {cuisine.count} places
I'll show part of the content now.

root@a53660941a77:/workspace# sed -n '200,260p' missinggold/src/app/restaurants/page.tsx
        marginTop: '60px',
        textAlign: 'center'
      }}>
        <h2 style={{
          color: 'var(--restaurants-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--restaurants-color)'
        }}>
          Browse by Cuisine
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '20px',
          maxWidth: '800px',
          margin: '0 auto'
        }}>
          {[
            { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
            { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
            { name: 'Middle Eastern', icon: '🧆', count: 15 },
            { name: 'Seafood', icon: '🦐', count: 12 },
            { name: 'International', icon: '🍝', count: 20 },
            { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
          ].map((cuisine, index) => (
            <div
              key={index}
              className="category-icon restaurants restaurants-glow"
              style={{
                cursor: 'pointer',
                animationDelay: `${index * 0.1}s`
              }}
            >
              <div style={{ fontSize: '2.5rem', marginBottom: '8px' }}>
                {cuisine.icon}
              </div>
              <div style={{
                color: 'var(--restaurants-color)',
                fontWeight: '600',
                marginBottom: '4px'
              }}>
                {cuisine.name}
              </div>
              <div style={{
                color: 'var(--text-tertiary)',
                fontSize: '0.9rem'
              }}>
                {cuisine.count} places
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
I'm noting categories for each vertical like events, hotels, restaurants, cafes, and tourism. Let’s check for sub-categories under events and potential pages for venues.

root@a53660941a77:/workspace# ls missinggold/src/app/venues
page.tsx
Let me take a look at the file now.

root@a53660941a77:/workspace# sed -n '1,200p' missinggold/src/app/venues/page.tsx
import MultiVenueHomepage from '../components/MultiVenueHomepage';

export default function VenuesPage() {
  return <MultiVenueHomepage />;
}

export const metadata = {
  title: 'Discover Iraq & Kurdistan - Events, Hotels, Restaurants & Activities',
  description: 'Complete platform for discovering events, booking hotels, finding restaurants, and exploring activities in Iraq
and Kurdistan Region.',
  keywords: 'Iraq, Kurdistan, events, hotels, restaurants, activities, travel, booking',
  openGraph: {
    title: 'Discover Iraq & Kurdistan - Complete Travel Platform',
    description: 'Events, Hotels, Restaurants & Activities all in one place',
    images: ['/og-venues.jpg'],
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Discover Iraq & Kurdistan - Complete Travel Platform',
    description: 'Events, Hotels, Restaurants & Activities all in one place',
  },
};root@a53660941a77:/workspace#
I'll search the repo for 'Activities' to confirm if it's part of the structure.

};root@a53660941a77:/workspace# rg "Activities" -n missinggold/src
missinggold/src/app/components/MultiVenueHomepage.tsx
35:    { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
89:            Events • Hotels • Restaurants • Activities - All in One Platform

missinggold/src/app/venues/page.tsx
8:  title: 'Discover Iraq & Kurdistan - Events, Hotels, Restaurants & Activities',
13:    description: 'Events, Hotels, Restaurants & Activities all in one place',
19:    description: 'Events, Hotels, Restaurants & Activities all in one place',

missinggold/src/app/page.tsx
10: * - Events, Hotels, Restaurants, Activities, Services
I'm considering various approaches for identifying the 9 main categories based on the code. Maybe I can propose categories from the marketing doc or check code like MARKETING_REVENUE_STRATEGY. I could also analyze files like common.json for key features or benefits. It seems the user wants categories for data collection, possibly based on user flows. I'll attempt to list the categories as best I can from available resources.

I'm thinking of treating the first 9 event categories as the main ones, aligning with potential "9 grids". The user might be referencing an earlier design with these initial categories. I'll list each one and then figure out subcategories, possibly drawing from data like restaurants, cafes, or tourism. Event descriptions could hint at subcategories, but it's not a perfect match. I'll explore event data for possible subcategory clues.

I can infer subcategories from the mapping of keywords to categories in the scripts. For example, keywords like "developer" or "AI" could define subcategories for Technology & Innovation. I'll reference these in the code to propose subcategory names like "AI/ML events" or "Hackathons." Additionally, marketing docs might provide clearer subcategories, such as "Kurdish Cultural Events" for Arts & Culture.

I can define subcategories by referencing the bullet lists in MARKETING_REVENUE_STRATEGY.md. I'll use line numbers, possibly with nl or sed, to cite specific entries like "Kurdish Cultural Events" under relevant categories.

root@a53660941a77:/workspace# nl -ba missinggold/MARKETING_REVENUE_STRATEGY.md | sed -n '40,120p'
    40  🏙️ Baghdad: Arabic (primary), English (business)
    41  🏔️ Erbil: Kurdish (primary), Arabic (secondary), English (business)
    42  🏛️ Sulaymaniyah: Kurdish (primary), Arabic (secondary)
    43  🌍 Tourist hotspots: English prominent with local language
    44
    45  UAE LOCALIZATION:
    46  🏙️ Dubai: English (primary), Arabic (secondary)
    47  🏛️ Abu Dhabi: Arabic (primary), English (business)
    48  🏖️ Tourist areas: English (primary), Arabic (cultural events)
    49
    50  TURKEY LOCALIZATION:
    51  🏙️ Istanbul: Turkish (primary), English (business), Kurdish (southeast)
    52  🏔️ Southeast regions: Kurdish (primary), Turkish (secondary)
    53  ```
    54
    55  ### **🎨 CULTURAL ADAPTATION ENGINE**
    56
    57  #### **Content Customization by Region**
    58  ```
    59  EVENT CATEGORIES (Auto-adapted by location):
    60
    61  IRAQ:
    62  - Kurdish Cultural Events (Newroz, traditional festivals)
    63  - Islamic Religious Events (Ramadan, Eid celebrations)
    64  - Business Conferences (oil, tech, trade)
    65  - Family Events (wedding halls, gatherings)
    66  - Educational Seminars (universities, training)
    67
    68  UAE:
    69  - International Business Events (trade shows, conferences)
    70  - Cultural Festivals (multicultural celebrations)
    71  - Sports Events (Formula 1, football)
    72  - Luxury Events (galas, exhibitions)
    73  - Tech & Innovation (startup events, AI conferences)
    74
    75  TURKEY:
    76  - Cultural Heritage Events (historical celebrations)
    77  - Business Conferences (manufacturing, tourism)
    78  - Kurdish Cultural Events (southeast regions)
    79  - International Events (connecting Europe-Asia)
    80  ```
    81
    82  ---
    83
    84  ## 💰 **EXHAUSTIVE REVENUE STREAM ARCHITECTURE**
    85
    86  ### **🏆 PRIMARY REVENUE STREAMS (High-Volume)**
    87
    88  #### **1. Event Ticketing Commission (40% of revenue)**
    89  ```
    90  PRICING MODEL:
    91  - Free events: $0 commission (build user base)
    92  - Paid events: 2.5% commission (competitive vs Eventbrite's 3-5%)
    93  - Premium events: 3.5% commission (high-value events)
    94  - Corporate events: 4.5% commission (enterprise pricing)
    95
    96  VOLUME PROJECTIONS (Iraq Year 1):
    97  - 1,000 events/month × $50 average ticket × 2.5% = $1,250/month
    98  - Growing to 10,000 events/month × $75 average = $18,750/month
    99  - Annual potential: $150K-$225K from Iraq alone
   100  ```
   101
   102  #### **2. Hotel Booking Integration (25% of revenue)**
   103  ```
   104  PARTNERSHIP MODEL:
   105  - Commission: 8-12% from hotel bookings
   106  - Average booking: $80/night × 2 nights = $160
   107  - Commission per booking: $13-19
   108  - Cross-sell rate: 15% of event attendees
   109
   110  AUTOMATION:
   111  - AI suggests hotels near event venues
   112  - Dynamic pricing based on event dates
   113  - Package deals (event ticket + hotel)
   114  - Instant booking through API integration
   115
   116  PROJECTED REVENUE:
   117  - 100 hotel bookings/month × $15 commission = $1,500/month
   118  - Growing to 1,000 bookings/month = $15,000/month
   119  - Annual potential: $120K-$180K from Iraq alone
   120  ```
I'm thinking of treating some bullet lists as subcategories, but the user wants nine main ones. Maybe the nine categories are like 'Events,' with subcategories like 'Technology' or 'Business.' I'll need to check the repo data to get the subcategories.

I'll look for references like "hackathon" to locate subcategories like 'Technology & Innovation.'

root@a53660941a77:/workspace# rg "hackathon" -n missinggold
missinggold/messages/en.json
310:    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
I’ll treat specific phrases as subcategories, like "tech talks, hackathons" for technology. I'll get line numbers.

root@a53660941a77:/workspace# nl -ba missinggold/messages/en.json | sed -n '300,360p'
   300      "december": "December"
   301    },
   302    "categoriesPage": {
   303      "title": "Event Categories",
   304      "subtitle": "Discover amazing events across all categories. From music and technology to food and culture, find exac
tly what interests you.",
   305      "ctaTitle": "Cannot Find Your Category?",
   306      "ctaSubtitle": "Create your own event and start building your community today!"
   307    },
   308    "categoryDescriptions": {
   309      "all": "Discover all types of events happening around you",
   310      "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
   311      "businessNetworking": "Networking events, professional meetups, and business conferences",
   312      "musicConcerts": "Live music, concerts, and musical performances",
   313      "artsCulture": "Art exhibitions, cultural events, and creative workshops",
   314      "sportsFitness": "Sports events, fitness classes, and athletic competitions",
   315      "foodDrink": "Culinary events, food festivals, and dining experiences",
   316      "learningDevelopment": "Educational workshops, skill development, and training sessions",
   317      "healthWellness": "Health seminars, wellness workshops, and medical events",
   318      "communitySocial": "Social gatherings, community events, and meetups",
   319      "gamingEsports": "Gaming tournaments, esports competitions, and gaming meetups",
   320      "spiritualReligious": "Spiritual gatherings, religious events, and faith-based meetings",
   321      "familyKids": "Family-friendly events, children's activities, and parenting workshops",
   322      "outdoorAdventure": "Outdoor activities, adventure sports, and nature experiences",
   323      "virtualEvents": "Online events, webinars, and virtual conferences",
   324      "academicConferences": "Academic conferences, research presentations, and scholarly meetings"
   325    },
   326    "hero": {
   327      "liveEventPlatform": "Live Event Platform",
   328      "registerNow": "Register Now",
   329      "getTickets": "Get Tickets",
   330      "joinSummit": "Join Summit",
   331      "exploreArt": "Explore Art",
   332      "eventStartsIn": "Event Starts In",
   333      "days": "DAYS",
   334      "hours": "HRS",
   335      "minutes": "MIN",
   336      "seconds": "SEC"
   337    },
   338    "register": {
   339      "joinIraqEvents": "Join IraqEvents",
   340      "createAccountSubtitle": "Create your account to start organizing amazing events",
   341      "continueWithGoogle": "Continue with Google",
   342      "orCreateAccount": "Or create account with email",
   343      "fullNameOptional": "Full Name (Optional)",
   344      "enterFullName": "Enter your full name",
   345      "enterEmail": "Enter your email",
   346      "createPassword": "Create a password (min. 6 characters)",
   347      "creatingAccount": "Creating account...",
   348      "createAccount": "Create Account",
   349      "alreadyHaveAccount": "Already have an account?",
   350      "signInHere": "Sign in here"
   351    },
   352    "navigation": {
   353      "home": "Home",
   354      "events": "Events",
   355      "categories": "Categories",
   356      "about": "About",
   357      "login": "Login",
   358      "logout": "Logout",
   359      "dashboard": "Dashboard",
   360      "createEvent": "Create Event",
I'll focus on the primary 9 categories but mention the extra ones for marketing clarity.

root@a53660941a77:/workspace# nl -ba missinggold/src/app/restaurants/page.tsx | sed -n '200,270p'
   200          marginTop: '60px',
   201          textAlign: 'center'
   202        }}>
   203          <h2 style={{
   204            color: 'var(--restaurants-color)',
   205            fontSize: '2.5rem',
   206            marginBottom: '32px',
   207            textShadow: '0 0 10px var(--restaurants-color)'
   208          }}>
   209            Browse by Cuisine
   210          </h2>
   211
   212          <div style={{
   213            display: 'grid',
   214            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
   215            gap: '20px',
   216            maxWidth: '800px',
   217            margin: '0 auto'
   218          }}>
   219            {[
   220              { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
   221              { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
   222              { name: 'Middle Eastern', icon: '🧆', count: 15 },
   223              { name: 'Seafood', icon: '🦐', count: 12 },
   224              { name: 'International', icon: '🍝', count: 20 },
   225              { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
   226            ].map((cuisine, index) => (
   227              <div
   228                key={index}
   229                className="category-icon restaurants restaurants-glow"
   230                style={{
   231                  cursor: 'pointer',
   232                  animationDelay: `${index * 0.1}s`
   233                }}
   234              >
   235                <div style={{ fontSize: '2.5rem', marginBottom: '8px' }}>
   236                  {cuisine.icon}
   237                </div>
   238                <div style={{
   239                  color: 'var(--restaurants-color)',
   240                  fontWeight: '600',
   241                  marginBottom: '4px'
   242                }}>
   243                  {cuisine.name}
   244                </div>
   245                <div style={{
   246                  color: 'var(--text-tertiary)',
   247                  fontSize: '0.9rem'
   248                }}>
   249                  {cuisine.count} places
   250                </div>
   251              </div>
   252            ))}
   253          </div>
   254        </div>
   255
   256        {/* Call to Action */}
   257        <div style={{
   258          textAlign: 'center',
   259          marginTop: '60px',
   260          padding: '40px 20px'
   261        }}>
   262          <div className="neon-card restaurants restaurants-glow" style={{
   263            maxWidth: '600px',
   264            margin: '0 auto',
   265            padding: '32px'
   266          }}>
   267            <h2 style={{
   268              color: 'var(--restaurants-color)',
   269              fontSize: '2rem',
   270              marginBottom: '16px',
root@a53660941a77:/workspace# nl -ba missinggold/src/app/cafes/page.tsx | sed -n '32,120p'
    32        priceRange: '$$',
    33        image: '🧁',
    34        specialty: 'Pastries & Desserts',
    35        location: 'Baghdad Riverside'
    36      },
    37      {
    38        id: '4',
    39        name: 'Modern Brew Co.',
    40        description: 'Contemporary cafe with international coffee blends',
    41        rating: 4.7,
    42        priceRange: '$$$',
    43        image: '🥤',
    44        specialty: 'Specialty Coffee',
    45        location: 'Erbil Center'
    46      }
    47    ];
    48
    49    const cafeTypes = [
    50      { name: 'Traditional Coffee Houses', icon: '☕', count: 32, description: 'Authentic Iraqi coffee culture' },
    51      { name: 'Tea Gardens', icon: '🍵', count: 28, description: 'Kurdish tea traditions' },
    52      { name: 'Modern Cafes', icon: '🥤', count: 24, description: 'International coffee & vibes' },
    53      { name: 'Shisha Lounges', icon: '💨', count: 18, description: 'Relaxing hookah experience' },
    54      { name: 'Bakery Cafes', icon: '🥐', count: 22, description: 'Fresh pastries & coffee' },
    55      { name: 'Rooftop Cafes', icon: '🌆', count: 15, description: 'City views & coffee' }
    56    ];
    57
    58    return (
    59      <div className="min-h-screen" style={{ padding: '20px' }}>
    60        {/* Header */}
    61        <div style={{
    62          textAlign: 'center',
    63          marginBottom: '40px',
    64          padding: '40px 20px'
    65        }}>
    66          <div style={{
    67            display: 'inline-block',
    68            background: 'rgba(255, 237, 78, 0.1)',
    69            border: '2px solid var(--cafes-color)',
    70            borderRadius: '15px',
    71            padding: '24px',
    72            backdropFilter: 'blur(10px)'
    73          }}>
    74            <h1 style={{
    75              fontSize: '3rem',
    76              color: 'var(--cafes-color)',
    77              textShadow: '0 0 10px var(--cafes-color)',
    78              marginBottom: '16px'
    79            }}>
    80              ☕ Cafes
    81            </h1>
    82            <p style={{
    83              color: 'var(--text-secondary)',
    84              fontSize: '1.2rem'
    85            }}>
    86              Experience the rich coffee culture of Iraq & Kurdistan
    87            </p>
    88          </div>
    89        </div>
    90
    91        {/* Back Button */}
    92        <div style={{ marginBottom: '32px' }}>
    93          <Link href="/" className="neon-button cafes">
    94            ← Back to Home
    95          </Link>
    96        </div>
    97
    98        {/* Featured Cafes Grid */}
    99        <div style={{
   100          marginBottom: '60px'
   101        }}>
   102          <h2 style={{
   103            textAlign: 'center',
   104            color: 'var(--cafes-color)',
   105            fontSize: '2.5rem',
   106            marginBottom: '32px',
   107            textShadow: '0 0 10px var(--cafes-color)'
   108          }}>
   109            Featured Cafes
   110          </h2>
   111
   112          <div style={{
   113            display: 'grid',
   114            gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
   115            gap: '24px',
   116            maxWidth: '1200px',
   117            margin: '0 auto'
   118          }}>
   119            {cafes.map((cafe) => (
   120              <div key={cafe.id} className="neon-card cafes cafes-glow">
I'll explore the relevant tourism categories for this task.

root@a53660941a77:/workspace# nl -ba missinggold/src/app/tourism/page.tsx | sed -n '49,120p'
    49    const tourismCategories = [
    50      { name: 'Historical Sites', icon: '🏛️', count: 45, description: 'Ancient civilizations & monuments' },
    51      { name: 'Natural Wonders', icon: '🌄', count: 32, description: 'Mountains, rivers & landscapes' },
    52      { name: 'Cultural Experiences', icon: '🎭', count: 28, description: 'Local traditions & customs' },
    53      { name: 'Adventure Tours', icon: '🧗', count: 24, description: 'Outdoor activities & exploration' },
    54      { name: 'Religious Sites', icon: '🕌', count: 38, description: 'Sacred places & pilgrimage sites' },
    55      { name: 'City Tours', icon: '🏙️', count: 22, description: 'Urban exploration & city life' }
    56    ];
    57
    58    const highlights = [
    59      {
    60        title: "Mesopotamian Heritage",
    61        description: "Walk through the cradle of civilization and discover 5,000 years of history",
    62        icon: "📜"
    63      },
    64      {
    65        title: "Kurdish Nature",
    66        description: "Experience pristine mountain landscapes and traditional mountain culture",
    67        icon: "🌲"
    68      },
    69      {
    70        title: "Tigris & Euphrates",
    71        description: "Explore the legendary rivers that shaped human civilization",
    72        icon: "🌊"
    73      }
    74    ];
    75
    76    return (
    77      <div className="min-h-screen" style={{ padding: '20px' }}>
    78        {/* Header */}
    79        <div style={{
    80          textAlign: 'center',
    81          marginBottom: '40px',
    82          padding: '40px 20px'
    83        }}>
    84          <div style={{
    85            display: 'inline-block',
    86            background: 'rgba(0, 240, 255, 0.1)',
    87            border: '2px solid var(--tourism-color)',
    88            borderRadius: '15px',
    89            padding: '24px',
    90            backdropFilter: 'blur(10px)'
    91          }}>
    92            <h1 style={{
    93              fontSize: '3rem',
    94              color: 'var(--tourism-color)',
    95              textShadow: '0 0 10px var(--tourism-color)',
    96              marginBottom: '16px'
    97            }}>
    98              📸 Tourism
    99            </h1>
   100            <p style={{
   101              color: 'var(--text-secondary)',
   102              fontSize: '1.2rem'
   103            }}>
   104              Discover the wonders of Iraq & Kurdistan - Where history meets adventure
   105            </p>
   106          </div>
   107        </div>
   108
   109        {/* Back Button */}
   110        <div style={{ marginBottom: '32px' }}>
   111          <Link href="/" className="neon-button tourism">
   112            ← Back to Home
   113          </Link>
   114        </div>
   115
   116        {/* Highlights Section */}
   117        <div style={{ marginBottom: '60px' }}>
   118          <h2 style={{
   119            textAlign: 'center',
   120            color: 'var(--tourism-color)',
I want to gather event data from the categories array in src/app/[locale]/categories/page.tsx.

root@a53660941a77:/workspace# nl -ba missinggold/src/app/[locale]/categories/page.tsx | sed -n '24,80p'
    24      updateLocale();
    25    }, [params]);
    26
    27    const categories = [
    28      { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-pu
rple-500 to-pink-500' },
    29      { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescr
iptions.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
    30      { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescripti
ons.businessNetworking'), color: 'from-blue-500 to-cyan-500' },
    31      { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicC
oncerts'), color: 'from-pink-500 to-red-500' },
    32      { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCultur
e'), color: 'from-teal-500 to-blue-500' },
    33      { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sports
Fitness'), color: 'from-green-500 to-emerald-500' },
    34      { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), co
lor: 'from-yellow-500 to-orange-500' },
    35      { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescrip
tions.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
    36      { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.heal
thWellness'), color: 'from-emerald-500 to-teal-500' },
    37      { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.co
mmunitySocial'), color: 'from-orange-500 to-red-500' },
    38      { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gaming
Esports'), color: 'from-red-500 to-pink-500' },
    39      { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescripti
ons.spiritualReligious'), color: 'from-amber-500 to-yellow-500' },
    40      { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.family
Kids'), color: 'from-sky-500 to-blue-500' },
    41      { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.o
utdoorAdventure'), color: 'from-lime-500 to-green-500' },
    42      { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtua
lEvents'), color: 'from-slate-500 to-gray-500' },
    43      { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescrip
tions.academicConferences'), color: 'from-rose-500 to-red-500' }
    44    ];
    45
    46    return (
    47      <div className={`min-h-screen bg-gray-50 py-8 ${isRTL ? 'text-right' : 'text-left'}`}>
    48        {/* Hero Section */}
    49        <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 py-16">
    50          <div className="max-w-7xl mx-auto px-4 text-center">
    51            <h1 className="text-5xl font-bold text-white mb-6">{t('categoriesPage.title')}</h1>
    52            <p className="text-xl text-white/90 max-w-3xl mx-auto">
    53              {categoriesSubtitle?.value || t('categoriesPage.subtitle')}
    54            </p>
    55          </div>
    56        </div>
    57
    58        {/* Categories Grid */}
    59        <div className="max-w-7xl mx-auto px-4 py-16">
    60          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
    61            {categories.map((category, index) => (
    62              <div
    63                key={category.name}
    64                className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover
:scale-105 group"
    65              >
    66                <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-cente
r mb-6 group-hover:scale-110 transition-transform duration-300`}>
    67                  <span className="text-3xl">{category.icon}</span>
    68                </div>
    69
    70                <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-purple-600 transition-colors">
    71                  {category.name}
    72                </h3>
    73
    74                <p className="text-gray-600 leading-relaxed mb-6">
    75                  {category.description}
    76                </p>
    77
    78                <Link
    79                  href={language === 'en' ? `/events?category=${encodeURIComponent(category.key)}` : `/${language}/events?
category=${encodeURIComponent(category.key)}`}
    80                  className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 round
ed-full font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
I'll check lines 27-43 and look for relevant marketing data like the cities list.

root@a53660941a77:/workspace# nl -ba missinggold/src/app/[locale]/events/page.tsx | sed -n '61,120p'
    61    const categories = [
    62      { name: t('common.allCategories'), icon: "🎉", key: 'all' },
    63      { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
    64      { name: t('categories.businessNetworking'), icon: "💼", key: 'businessNetworking' },
    65      { name: t('categories.musicConcerts'), icon: "🎵", key: 'musicConcerts' },
    66      { name: t('categories.artsCulture'), icon: "🎨", key: 'artsCulture' },
    67      { name: t('categories.sportsFitness'), icon: "⚽", key: 'sportsFitness' },
    68      { name: t('categories.foodDrink'), icon: "🍽️", key: 'foodDrink' },
    69      { name: t('categories.learningDevelopment'), icon: "📚", key: 'learningDevelopment' },
    70      { name: t('categories.healthWellness'), icon: "🏥", key: 'healthWellness' },
    71      { name: t('categories.communitySocial'), icon: "👥", key: 'communitySocial' },
    72      { name: t('categories.gamingEsports'), icon: "🎮", key: 'gamingEsports' },
    73      { name: t('categories.spiritualReligious'), icon: "🕌", key: 'spiritualReligious' },
    74      { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦", key: 'familyKids' },
    75      { name: t('categories.outdoorAdventure'), icon: "🏔️", key: 'outdoorAdventure' },
    76      { name: t('categories.virtualEvents'), icon: "📱", key: 'virtualEvents' },
    77      { name: t('categories.academicConferences'), icon: "🎓", key: 'academicConferences' }
    78    ];
    79
    80    // Use translated cities
    81    const cities = [
    82      t('common.allCities'),
    83      t('cities.baghdad'),
    84      t('cities.basra'),
    85      t('cities.mosul'),
    86      t('cities.erbil'),
    87      t('cities.sulaymaniyah'),
    88      t('cities.duhok'),
    89      t('cities.kirkuk'),
    90      t('cities.anbar'),
    91      t('cities.najaf'),
    92      t('cities.karbala')
    93    ];
    94
    95    // Use translated months (memoized)
    96    const months = React.useMemo(() => ([
    97      t('common.allMonths'),
    98      t('months.january'), t('months.february'), t('months.march'),
    99      t('months.april'), t('months.may'), t('months.june'),
   100      t('months.july'), t('months.august'), t('months.september'),
   101      t('months.october'), t('months.november'), t('months.december')
   102    ]), [language]);
   103
   104    // Initialize filter states with translations when they're loaded
   105    useEffect(() => {
   106      if (t && selectedCategory === '') {
   107        setSelectedCategory(t('common.allCategories'));
   108        setSelectedCity(t('common.allCities'));
   109        setSelectedMonth(t('common.allMonths'));
   110      }
   111    }, [t, selectedCategory, selectedCity, selectedMonth]);
   112
   113    // Fetch events
   114    useEffect(() => {
   115      const fetchEvents = async () => {
   116        try {
   117          const response = await fetch(`/api/events?type=public&lang=${locale}`);
   118          if (response.ok) {
   119            const eventsData = await response.json();
   120            setEvents(eventsData);
I need to include tabs for MultiVenue, focusing on major categories.

root@a53660941a77:/workspace# nl -ba missinggold/src/app/components/MultiVenueHomepage.tsx | sed -n '24,70p'
    24
    25  export default function MultiVenueHomepage() {
    26    const [activeTab, setActiveTab] = useState<string>('all');
    27    const [venues, setVenues] = useState<Venue[]>([]);
    28    const [loading, setLoading] = useState(true);
    29
    30    const tabs = [
    31      { id: 'all', label: 'All', icon: '🌟' },
    32      { id: 'EVENT', label: 'Events', icon: '🎉' },
    33      { id: 'HOTEL', label: 'Hotels', icon: '🏨' },
    34      { id: 'RESTAURANT', label: 'Restaurants', icon: '🍽️' },
    35      { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
    36    ];
    37
    38    useEffect(() => {
    39      fetchVenues();
    40    }, [activeTab]);
    41
    42    const fetchVenues = async () => {
    43      setLoading(true);
    44      try {
    45        const params = new URLSearchParams();
    46        if (activeTab !== 'all') {
    47          params.set('type', activeTab);
    48        }
    49        params.set('locale', 'en'); // TODO: Get from context
    50
    51        const response = await fetch(`/api/venues?${params}`);
    52        const data = await response.json();
    53
    54        if (data.success) {
    55          setVenues(data.venues || []);
    56        }
    57      } catch (error) {
    58        console.error('Error fetching venues:', error);
    59      } finally {
    60        setLoading(false);
    61      }
    62    };
    63
    64    const getVenueTypeIcon = (type: string) => {
    65      switch (type) {
    66        case 'EVENT': return '🎉';
    67        case 'HOTEL': return '🏨';
    68        case 'RESTAURANT': return '🍽️';
    69        case 'ACTIVITY': return '🎯';
    70        case 'SERVICE': return '🛎️';
I'll note that the Venue schema includes category and subcategory fields, and cite it.

root@a53660941a77:/workspace# nl -ba missinggold/prisma/schema.prisma | sed -n '104,200p'
   104    businessEmail String?
   105    businessPhone String?
   106    website       String?
   107    socialLinks   String?      // JSON array of social media links
   108
   109    // Location and contact
   110    address       String?
   111    city          String?
   112    latitude      Float?
   113    longitude     Float?
   114
   115    // Images and media
   116    imageUrl      String?
   117    galleryUrls   String?      // JSON array of additional images
   118    videoUrl      String?
   119
   120    // Booking and contact
   121    bookingUrl    String?
   122    whatsappPhone String?
   123    contactMethod String?
   124
   125    // For events: date/time info
   126    eventDate     DateTime?
   127
   128    // For hotels: amenities and features
   129    amenities     String?      // JSON array of amenities
   130    features      String?      // JSON array of features
   131
   132    // For restaurants: cuisine and dietary info
   133    cuisineType   String?
   134    dietaryOptions String?     // JSON array (vegan, halal, etc.)
   135
   136    // SEO and discovery
   137    tags          String?      // JSON array of tags
   138    category      String?      // main category
   139    subcategory   String?
   140
   141    // Platform management
   142    featured      Boolean      @default(false)
   143    verified      Boolean      @default(false)
   144
   145    // Relations
   146    user          User         @relation(fields: [userId], references: [id])
   147    userId        String
   148    translations  VenueTranslation[]
   149
   150    createdAt     DateTime     @default(now())
   151    updatedAt     DateTime     @updatedAt
   152  }
   153
   154  // Venue translations for multi-language support
   155  model VenueTranslation {
   156    id          String  @id @default(cuid())
   157    locale      Locale
   158
   159    // Core content
   160    title       String
   161    description String
   162    location    String?
   163
   164    // Additional localized content
   165    amenities   String? // JSON array of localized amenities
   166    features    String? // JSON array of localized features
   167
   168    // Relations
   169    venue       Venue   @relation(fields: [venueId], references: [id])
   170    venueId     String
   171
   172    @@unique([venueId, locale])
   173  }
   174
   175  // Simple CMS-style content overrides per locale and key
   176  model Content {
   177    id        String   @id @default(cuid())
   178    key       String
   179    locale    Locale
   180    data      String   // JSON or plain text content
   181    updatedAt DateTime @updatedAt
   182
   183    @@unique([key, locale])
   184  }
I'll highlight the event categories and subcategories using the README or ls output.

root@a53660941a77:/workspace# nl -ba missinggold/README.md | sed -n '44,80p'
    44
    45  Visit [http://localhost:3000](http://localhost:3000) to see the application.
    46
    47  ## Environment Variables
    48
    49  Create a `.env.local` file in the root directory with the following variables:
    50
    51  ```bash
    52  # Database
    53  DATABASE_URL="postgresql://user:password@localhost:5432/missinggold"
    54
    55  # Authentication
    56  NEXTAUTH_SECRET="your-nextauth-secret-here"
    57  NEXTAUTH_URL="http://localhost:3000"
    58
    59  # Rate Limiting (Upstash Redis)
    60  UPSTASH_REDIS_REST_URL="your-upstash-url"
    61  UPSTASH_REDIS_REST_TOKEN="your-upstash-token"
    62
    63  # Email (Resend)
    64  RESEND_API_KEY="your-resend-api-key"
    65
    66  # Analytics (Optional)
    67  SENTRY_DSN="your-sentry-dsn"
    68  ```
    69
    70  ## Scripts
    71
    72  - `npm run dev` - Start development server
    73  - `npm run build` - Build for production
    74  - `npm run start` - Start production server
    75  - `npm run lint` - Run ESLint
    76  - `npm run type-check` - Run TypeScript checking
    77  - `npm run db:migrate` - Run database migrations
    78  - `npm run db:seed` - Seed database with initial data
    79
    80  ## Deployment
I'll grab the relevant lines for the project's structure.

root@a53660941a77:/workspace# nl -ba missinggold/README.md | sed -n '80,120p'
    80  ## Deployment
    81
    82  See [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed production deployment instructions.
    83
    84  ## Project Structure
    85
    86  ```
    87  ├── src/
    88  │   ├── app/              # Next.js app router pages
    89  │   ├── components/       # Reusable React components
    90  │   ├── lib/              # Utility libraries
    91  │   └── types/            # TypeScript type definitions
    92  ├── prisma/              # Database schema and migrations
    93  ├── public/              # Static assets
    94  ├── messages/            # i18n translation files
    95  └── scripts/             # Build and maintenance scripts
    96  ```
    97
    98  ## Contributing
    99
   100  1. Fork the repository
   101  2. Create your feature branch (`git checkout -b feature/amazing-feature`)
   102  3. Commit your changes (`git commit -m 'Add some amazing feature'`)
   103  4. Push to the branch (`git push origin feature/amazing-feature`)
   104  5. Open a Pull Request
   105
   106  ## License
   107
   108  This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
   109
   110  ## Security
   111
   112  If you discover any security issues, please email [security@example.com](mailto:security@example.com) instead of using t
he issue tracker.
   113
   114  **Note**: After deployment, rotate all secrets that were removed during repository extraction.
I'll use sections like event categories, revenue streams, and marketing phases to build a clear outline.

Breaking down the sections: Platform Overview, Event Grid with categories, and citations for accuracy.

I’ll gather all line numbers and structure the final answer accordingly with proper citations.

I’ll make sure to cite the schema, marketing, and structure sections properly in the final response.  
Document application structure and categories
Oct 21
·
missinggold
·
main

Archive

Share

So I want you to act as a. Structure and a lot of development. And I would like you to scrutinize this repo and this local. Folder. And all I want you to do, we have agents who's looking for data collection. So we want to have the full structure of the application side, what's necessary. So I'd like you to study this application starting with priority. We have nine categories, sub 9 main categories or 9 grids. And each grid has each category has subcategories, so I'd like you to list the mall of it and so that we can give it to the agent to collect in all those areas. And. Anything you think that should be considered for? Marketing and stuff."E:\missinggold-fresh"
Copy

Version 1

Version 2

Version 3

Version 4
Platform structure overview
The landing page renders the shared navigation along with a multi-vertical “MultiVenueHomepage” module that already highlights Events, Hotels, Restaurants, Activities, and cross-vertical listings—useful anchor points for assigning collection agents by vertical.

Global navigation exposes direct routes for Home, Events, Hotels, Restaurants, Tourism, plus localized language switching; these routes map cleanly to the vertical pages agents will populate.

The localized events hub reuses the same category grid as the global categories page, so collecting assets once per category covers both experiences.

Event discovery grid (focus on the first nine categories)
These nine categories constitute the core grid on the categories page, each with marketing-ready copy in categoryDescriptions. Use them as the primary collection buckets.

All Events – umbrella feed for everything on the platform.

Technology & Innovation – tech talks, hackathons, innovation showcases.

Business & Networking – professional meetups and conferences.

Music & Concerts – concerts and live performances.

Arts & Culture – exhibitions, cultural programs, creative workshops.

Sports & Fitness – competitions, training sessions, fitness classes.

Food & Drink – culinary festivals and dining experiences (see subcategory lists below).

Learning & Development – education, upskilling, and workshops.

Health & Wellness – wellness seminars and medical events.

Extended grid: Community & Social, Gaming & Esports, Spiritual & Religious, Family & Kids, Outdoor & Adventure, Virtual Events, Academic & Conferences are already wired in and can be scheduled after the first nine once agents are ready.

Subcategory collections by vertical
Food & Drink → Restaurants: The restaurants page breaks the vertical into six cuisine clusters (Iraqi Traditional, Kurdish Specialties, Middle Eastern, Seafood, International, Desserts & Sweets). Treat each cuisine as a data-collection lane for menus, hero shots, and partner outreach.

Food & Drink → Cafes: Café coverage spans Traditional Coffee Houses, Tea Gardens, Modern Cafes, Shisha Lounges, Bakery Cafes, Rooftop Cafes—ideal subsegments for experiential storytelling and influencer partnerships.

Outdoor & Adventure / Tourism vertical: Tourism includes Historical Sites, Natural Wonders, Cultural Experiences, Adventure Tours, Religious Sites, City Tours, giving agents a ready-made taxonomy for destination content, guides, and travel packages.

Multi-venue listings: MultiVenueHomepage tabs (“All”, “Events”, “Hotels”, “Restaurants”, “Activities”) give agents a quick way to prioritize mixed inventory sourcing (e.g., lodging partners versus activity operators).

Sample event data: public/data/events.json already seeds Technology, Music, Business, Art experiences—use it as a blueprint for the metadata each category should capture (title, description, date, location, pricing, organizer).

Marketing & data collection considerations
The marketing strategy playbook emphasizes AI-driven localization across Arabic, Kurdish, and English markets. Ensure agents gather region-specific assets (language variants, cultural imagery, localized CTAs) while populating category content.

Hero messaging and CTAs in the categories and tourism pages already set tones (e.g., “Discover Iraq & Kurdistan”, “Join the Platform”). Align collected media and copy to reinforce these narratives for consistency across campaigns.

Keep a shared checklist per category: imagery, venue details, pricing cues, cultural notes, and partner contacts. This ensures collected data supports both the product UI and marketing funnels (email, social, ads) without duplication.




Logs
Configuring language runtimes...
Running auto setup...
Scanning repository (up to depth 3) for dependency configurations...

--- Checking . ---

==> Processing Node.js project in .
Found package-lock.json. Installing Node.js dependencies with npm ci...

Running: npm ci
npm warn Unknown env config "http-proxy". This will stop working in the next major version of npm.
⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹npm warn deprecated workbox-google-analytics@6.6.0: It is not compatible with newer versions of GA starting with v4, as long as you are using GAv3 it should be ok, but the package is not longer being maintained
⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧npm warn deprecated workbox-cacheable-response@6.6.0: workbox-background-sync@6.6.0
⠧npm warn deprecated sourcemap-codec@1.4.8: Please use @jridgewell/sourcemap-codec instead
⠧⠇⠏npm warn deprecated rollup-plugin-terser@7.0.2: This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser
⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
⠧⠇⠏⠋npm warn deprecated rimraf@2.7.1: Rimraf versions prior to v4 are no longer supported
⠋npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
⠋⠙⠹npm warn deprecated source-map@0.8.0-beta.0: The work that was done in this beta branch won't be included in future versions
⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹
> eventra-venues@2.0.0 postinstall
> prisma generate

⠹warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Prisma schema loaded from prisma/schema.prisma

✔ Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 217ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Need your database queries to be 1000x faster? Accelerate offers you that and more: https://pris.ly/tip-2-accelerate

⠙
added 856 packages, and audited 858 packages in 44s
⠙
⠙211 packages are looking for funding
⠙  run `npm fund` for details
⠙
found 0 vulnerabilities
⠙npm notice
npm notice New minor version of npm available! 11.4.2 -> 11.6.2
npm notice Changelog: https://github.com/npm/cli/releases/tag/v11.6.2
npm notice To update run: npm install -g npm@11.6.2
npm notice
⠙No installations were performed.
So I want you to act as a. Structure and a lot of development. And I would like you to scrutinize this repo and this local. Folder. And all I want you to do, we have agents who's looking for data collection. So we want to have the full structure of the application side, what's necessary. So I'd like you to study this application starting with priority. We have nine categories, sub 9 main categories or 9 grids. And each grid has each category has subcategories, so I'd like you to list the mall of it and so that we can give it to the agent to collect in all those areas. And. Anything you think that should be considered for? Marketing and stuff."E:\missinggold-fresh"
I need to find AGENTS.md and follow the instructions in it. Let's take a look!

ls
root@f92a78a6a024:/workspace# ls
missinggold
root@f92a78a6a024:/workspace# pwd
/workspace
I’ll look for the AGENTS.md file for further instructions.

root@f92a78a6a024:/workspace# ls missinggold
-                                    LICENSE                             STEP_2_COMPLETION_REPORT.md       middleware.ts
COMPETITIVE_ANALYSIS_MIDDLE_EAST.md  MARKETING_REVENUE_STRATEGY.md       STEP_3_COMPLETION_REPORT.md       next.config.ts
DEPLOYMENT.md                        MULTI_COUNTRY_SCALING_STRATEGY.md   STEP_4_COMPLETION_REPORT.md       node_modules
DEPLOYMENT_GUIDE.md                  NAVIGATION_LOCALE_FIX_MEMORY.md     STRATEGIC_PLATFORM_ANALYSIS.md    package-lock.json
DEPLOYMENT_READY.md                  OPTIMIZATION_REPORT.md              TECHNICAL_ARCHITECTURE.md         package.json
DEPLOYMENT_VERIFICATION.md           OPTIMIZATION_SUMMARY.md             TRANSLATION_ENFORCEMENT_GUIDE.md  postcss.config.mjs
FILE_BY_FILE_OPTIMIZATION.md         PERFORMANCE_OPTIMIZATION_REPORT.md  UI_IMPROVEMENTS.md                prisma
FINAL_OPTIMIZATION_SUMMARY.md        PRACTICAL_MULTI_COUNTRY_GUIDE.md    WARP.md                           public
FIXES_APPLIED.md                     PRODUCTION_DEPLOYMENT.md            _backup                           safe-config.js
I18N_AUDIT_REPORT.json               QUICK_REFERENCE.md                  ai-fix-about.diff                 scripts
I18N_IMPLEMENTATION_SUMMARY.md       README.md                           eslint.config.mjs                 src
IMPLEMENTATION_GUIDE.md              RTL_LOCALIZATION_FIXES.md           i18n.ts                           tailwind.config.js
LAUNCH_CERTIFICATION.md              SECURITY_FIXES_SUMMARY.md           messages                          tsconfig.json
I'm going to search for the AGENTS.md file—let's try using find!

root@f92a78a6a024:/workspace# find missinggold -name AGENTS.md -print
User just wants analysis; no code changes, so no commits needed. I'll check the structure.

root@f92a78a6a024:/workspace# ls missinggold/src
app  components  lib  types
I'll start by checking the app directory for any relevant files related to categories.

root@f92a78a6a024:/workspace# ls missinggold/src/app
'[locale]'   api          components   favicon.ico   hotels        login               page.tsx        reset         utils
 about       cafes        dashboard    globals.css   layout.tsx    page-neon.tsx       providers.tsx   restaurants   venues
 admin       categories   events       hooks         loading.tsx   page-original.tsx   register        tourism
I'll open the categories folder to see if it contains relevant info.

root@f92a78a6a024:/workspace# ls missinggold/src/app/categories
layout.tsx  page.tsx
root@f92a78a6a024:/workspace# sed -n '1,160p' missinggold/src/app/categories/page.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import { useTranslations } from "../hooks/useTranslations";
import { useContentOverride } from "../hooks/useContent";

export default function CategoriesPage() {
  const { t } = useTranslations();
  const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');

  const categories = [
    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-500
 to-pink-500' },
    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptions.
technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.busi
nessNetworking'), color: 'from-blue-500 to-cyan-500' },
    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcerts'
), color: 'from-pink-500 to-red-500' },
    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'), col
or: 'from-teal-500 to-blue-500' },
    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitness'
), color: 'from-green-500 to-emerald-500' },
    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color: 'fr
om-yellow-500 to-orange-500' },
    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions.le
arningDevelopment'), color: 'from-violet-500 to-purple-500' },
    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWellne
ss'), color: 'from-emerald-500 to-teal-500' },
    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communityS
ocial'), color: 'from-orange-500 to-red-500' },
    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEsports'
), color: 'from-red-500 to-pink-500' },
    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.spir
itualReligious'), color: 'from-amber-500 to-yellow-500' },
    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'),
color: 'from-sky-500 to-blue-500' },
    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoorAd
venture'), color: 'from-lime-500 to-green-500' },
    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEvents'
), color: 'from-slate-500 to-gray-500' },
    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions.ac
ademicConferences'), color: 'from-rose-500 to-red-500' }
  ];

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      {/* Hero Section */}
      <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 py-16">
        <div className="max-w-7xl mx-auto px-4 text-center">
          <h1 className="text-5xl font-bold text-white mb-6">{t('categoriesPage.title')}</h1>
          <p className="text-xl text-white/90 max-w-3xl mx-auto">
            {categoriesSubtitle?.value || t('categoriesPage.subtitle')}
          </p>
        </div>
      </div>

      {/* Categories Grid */}
      <div className="max-w-7xl mx-auto px-4 py-16">
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {categories.map((category, index) => (
            <div
              key={category.name}
              className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-1
05 group"
            >
              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-6 g
roup-hover:scale-110 transition-transform duration-300`}>
                <span className="text-3xl">{category.icon}</span>
              </div>

              <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-purple-600 transition-colors">
                {category.name}
              </h3>

              <p className="text-gray-600 leading-relaxed mb-6">
                {category.description}
              </p>

              <Link
                href={`/events?category=${encodeURIComponent(category.key)}`}
                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-full
font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
              >
                <span>{t('homepage.exploreEvents')}</span>
                <span>→</span>
              </Link>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 py-16">
        <div className="max-w-4xl mx-auto px-4 text-center">
          <h2 className="text-4xl font-bold text-white mb-6">
            {t('categoriesPage.ctaTitle')}
          </h2>
          <p className="text-xl text-white/90 mb-8">
            {t('categoriesPage.ctaSubtitle')}
          </p>
          <Link
            href="/register"
            className="bg-white text-orange-600 px-8 py-4 rounded-full font-bold text-lg hover:shadow-xl transition-all duration
-300 transform hover:scale-105 inline-flex items-center gap-3"
          >
            <span className="text-2xl">🎆</span>
            {t('events.createYourEvent')}
          </Link>
        </div>
      </div>
    </div>
  );
}root@f92a78a6a024:/workspace#
The user mentioned 9 categories, so I'll need to gather all and verify the structure.

}root@f92a78a6a024:/workspace# rg "categories" -g"*.ts" missinggold/src/app -n
Looks like I missed a newline at the end of the file. I'll try again.

root@f92a78a6a024:/workspace# rg "category" missinggold/src -n
missinggold/src/app/categories/page.tsx
13:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-
500 to-pink-500' },
14:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
15:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.b
usinessNetworking'), color: 'from-blue-500 to-cyan-500' },
16:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcer
ts'), color: 'from-pink-500 to-red-500' },
17:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'),
color: 'from-teal-500 to-blue-500' },
18:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitne
ss'), color: 'from-green-500 to-emerald-500' },
19:    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color:
'from-yellow-500 to-orange-500' },
20:    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions
.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
21:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWel
lness'), color: 'from-emerald-500 to-teal-500' },
22:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communi
tySocial'), color: 'from-orange-500 to-red-500' },
23:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },
24:    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.s
piritualReligious'), color: 'from-amber-500 to-yellow-500' },
25:    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'
), color: 'from-sky-500 to-blue-500' },
26:    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoo
rAdventure'), color: 'from-lime-500 to-green-500' },
27:    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEven
ts'), color: 'from-slate-500 to-gray-500' },
28:    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions
.academicConferences'), color: 'from-rose-500 to-red-500' }
46:          {categories.map((category, index) => (
48:              key={category.name}
51:              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-
6 group-hover:scale-110 transition-transform duration-300`}>
52:                <span className="text-3xl">{category.icon}</span>
56:                {category.name}
60:                {category.description}
64:                href={`/events?category=${encodeURIComponent(category.key)}`}
65:                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-fu
ll font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}

missinggold/src/app/page-original.tsx
88:      category: "tech"
100:      category: "music"
112:      category: "business"
124:      category: "art"
191:  const getCategoryIcon = (category: string) => {
221:    return icons[category?.toLowerCase().replace(/[^a-z]/g, '')] || '🎦';
224:  const getCategoryTranslation = (category: string) => {
225:    const categoryMap: { [key: string]: string } = {
253:    const key = categoryMap[category?.toLowerCase().replace(/[^a-z]/g, '')];
254:    return key ? t(key) : category;
257:  const getEventImageCategory = (category: string) => {
258:    const categoryMap: { [key: string]: string } = {
271:    return categoryMap[category?.toLowerCase()] || 'other';
298:          category: "technology",
311:          category: "music",
324:          category: "business",
337:          category: "art",
414:                  category={slide.category}
415:                  fallbackType={slide.category as any}
597:              {[...categories, ...categories, ...categories].map((category, index) => (
599:                  key={`category-${index}`}
601:                  onClick={() => setSelectedCategory(category.name)}
604:                    {category.icon}
607:                    {category.name}
721:                        category={getEventImageCategory(event.category || "")}
725:                          {getCategoryIcon(event.category || "")} {getCategoryTranslation(event.category || "")}

missinggold/src/app/globals.css
84:[dir="rtl"] .event-card .event-category {
508:.category-icon {
525:.category-icon:hover {
530:.category-icon.events {
534:.category-icon.hotels {
538:.category-icon.restaurants {
542:.category-icon.cafes {
546:.category-icon.tourism {
550:.category-icon .icon {
555:.category-icon .label {
657:  .category-icon {
672:  .category-icon:hover {
679:.category-icon:focus,
862:.category-icon {
873:.category-icon:hover {
878:.category-icon.events {
882:.category-icon.hotels {
886:.category-icon.restaurants {
890:.category-icon.cafes {
894:.category-icon.tourism {
952:  .category-icon:hover {

missinggold/src/app/restaurants/page.tsx
229:              className="category-icon restaurants restaurants-glow"

missinggold/src/app/about/page.tsx
151:                  category="community"
211:                      category={member.image}

missinggold/src/app/api/venues/route.ts
15:    const category = url.searchParams.get('category');
34:    if (category) {
35:      where.category = category;
69:        category: venue.category,
70:        subcategory: venue.subcategory,
187:        category: data.category || '',
188:        subcategory: data.subcategory || '',

missinggold/src/app/[locale]/categories/page.tsx
28:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-
500 to-pink-500' },
29:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
30:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.b
usinessNetworking'), color: 'from-blue-500 to-cyan-500' },
31:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcer
ts'), color: 'from-pink-500 to-red-500' },
32:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'),
color: 'from-teal-500 to-blue-500' },
33:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitne
...
61:          {categories.map((category, index) => (
63:              key={category.name}
66:              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-
6 group-hover:scale-110 transition-transform duration-300`}>
67:                <span className="text-3xl">{category.icon}</span>
71:                {category.name}
75:                {category.description}
79:                href={language === 'en' ? `/events?category=${encodeURIComponent(category.key)}` : `/${language}/events?categ
ory=${encodeURIComponent(category.key)}`}
80:                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-fu
ll font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}

missinggold/src/app/api/events/create/route.ts
58:      category: data.category ?? "",

missinggold/src/app/[locale]/events/page.tsx
18:  category?: string;
152:      category: t('demo.events.aiSummit.category'),
165:      category: t('demo.events.musicFestival.category'),
178:      category: t('demo.events.businessWorkshop.category'),
191:      category: t('demo.events.artExhibition.category'),
204:      category: "Food & Drink",
217:      category: "Sports & Fitness",
240:      filtered = filtered.filter(event => event.category === selectedCategory);
288:  const getCategoryIcon = (categoryName: string) => {
289:    const category = categories.find(cat => cat.name === categoryName);
290:    return category ? category.icon : "🎉";
293:  const translateCategory = (categoryName: string): string => {
294:    // Map English category names to translation keys
295:    const categoryMap: { [key: string]: string } = {
314:    const translationKey = categoryMap[categoryName];
315:    return translationKey ? t(translationKey) : categoryName;
318:  const getEventImageCategory = (category: string) => {
329:    return mapping[category] || "community";
463:                    category={getEventImageCategory(event.category || "")}
469:                      {getCategoryIcon(event.category || "")} {translateCategory(event.category || "")}
508:          <h2 className="text-2xl font-bold text-gray-900 mb-6">{t('events.exploreByCategory') || 'Explore by category'}</h2
>

missinggold/src/app/api/events/public/[publicId]/route.ts
24:    category: event.category,

missinggold/src/app/[locale]/event/[publicId]/page.tsx
19:  category?: string;
223:                      <div className="font-semibold text-gray-900">{t('events.category')}</div>
224:                      <div className="text-gray-600">{event.category || t('common.general')}</div>

missinggold/src/app/api/events/import/route.ts
16:  category?: string;
58:          category: ev.category || "",

missinggold/src/app/api/events/route.ts
54:          category: e.category,

missinggold/src/app/tourism/page.tsx
12:      category: 'Historical Site',
22:      category: 'Nature & Adventure',
32:      category: 'Cultural Experience',
42:      category: 'Museums & Culture',
246:                      🎯 {attraction.category}
304:          {tourismCategories.map((category, index) => (
317:                {category.icon}
326:                {category.name}
333:                {category.description}
339:                {category.count} places

missinggold/src/app/dashboard/EventForm.tsx
16:  const [category, setCategory] = useState("");
54:          category,
139:            {t('eventForm.category')}
142:            value={category}

missinggold/src/app/components/SkeletonLoader.tsx
164: * Category Grid Skeleton - For category cards

missinggold/src/app/components/EventImage.tsx
13:  category?: string;
41:  category = 'general',
48:  // Use provided src or generate placeholder based on category/fallbackType
49:  const baseSrc = src || getPlaceholderImage(category || fallbackType, width, height);
50:  const imageSrc = imageError ? getPlaceholderImage(fallbackType || category, width, height) : baseSrc;

missinggold/src/app/components/NeonHomepage.tsx
125:          {categories.map((category) => (
127:              key={category.id}
128:              href={`/${category.id}`}
129:              className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
132:                animationDelay: `${categories.indexOf(category) * 0.2}s`
137:                filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
139:                {category.icon}
144:                color: `var(--${category.color}-color)`,
145:                textShadow: `0 0 5px var(--${category.color}-color)`
147:                {category.name}
154:                {category.count}+ places

missinggold/src/app/components/OptimizedNeonHomepage.tsx
46:  category: string;
87:      category: 'events'
95:      category: 'events'
134:const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
137:      href={category.href}
138:      className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
148:          filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
151:        {category.icon}
158:          color: `var(--${category.color}-color)`,
159:          textShadow: `0 0 5px var(--${category.color}-color)`
162:        {category.name}
169:        {category.count}+ places
334:          {categories.map((category, index) => (
335:            <CategoryCard key={category.id} category={category} index={index} />

missinggold/src/app/components/MultiVenueHomepage.tsx
15:  category?: string;

missinggold/src/app/components/EventDetailsModal.tsx
14:  category?: string;
33:function translateCategoryLabel(categoryName?: string): string {
34:  if (!categoryName) return '';
53:  const key = map[categoryName];
57:    return key ? (require('../hooks/useTranslations').useTranslations().t(key)) : categoryName;
59:    return categoryName;
144:            {event.category && (
148:                  <h3 className="font-semibold text-gray-900">{t('eventForm.category')}</h3>
151:                  {translateCategoryLabel(event.category)}
Let me check the repo for any data on categories and subcategories, maybe in JSON files.

root@f92a78a6a024:/workspace# rg "subcategory" missinggold -n
missinggold/prisma/migrations/20250921112738_add_multi_venue_support/migration.sql
30:    "subcategory" TEXT,

missinggold/prisma/schema.prisma
139:  subcategory   String?

missinggold/src/app/api/venues/route.ts
70:        subcategory: venue.subcategory,
188:        subcategory: data.subcategory || '',
I’ll check out the file to gather data lists for OptimizedNeonHomepage categories.

root@f92a78a6a024:/workspace# sed -n '1,240p' missinggold/src/app/components/OptimizedNeonHomepage.tsx
"use client";

/**
 * Optimized Neon Homepage Component
 *
 * Performance Optimizations:
 * - Separated business logic from UI (Functional Core, Imperative Shell)
 * - Debounced window resize handlers
 * - Memoized components with React.memo
 * - useMemo for expensive computations
 * - useCallback for stable function references
 * - Lazy loading for images
 * - Intersection Observer for visibility-based rendering
 */

import { useState, useMemo, useCallback, memo } from 'react';
import Link from 'next/link';
import { useLanguage } from './LanguageProvider';
import { useTranslations } from '../hooks/useTranslations';
import { usePersistedState } from '../hooks/useOptimizedState';

// ==================== TYPES ====================

interface StoryUser {
  id: string;
  name: string;
  avatar: string;
  count: number;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: 'events' | 'hotels' | 'restaurants' | 'cafes' | 'tourism';
  count: number;
  href: string;
}

interface FeaturedEvent {
  id: string;
  title: string;
  description: string;
  icon: string;
  date: string;
  category: string;
}

// ==================== BUSINESS LOGIC ====================

/**
 * Hook for story users data
 * Memoized to prevent unnecessary re-computations
 */
function useStoryUsers(): StoryUser[] {
  return useMemo(() => [
    { id: '1', name: 'Ahmed M.', avatar: '/api/placeholder/64/64', count: 245 },
    { id: '2', name: 'Sara K.', avatar: '/api/placeholder/64/64', count: 89 },
    { id: '3', name: 'Omar H.', avatar: '/api/placeholder/64/64', count: 156 }
  ], []);
}

/**
 * Hook for categories data with proper typing and memoization
 */
function useCategories(): Category[] {
  return useMemo(() => [
    { id: 'events', name: 'Events', icon: '📅', color: 'events', count: 124, href: '/events' },
    { id: 'hotels', name: 'Hotels', icon: '🏨', color: 'hotels', count: 87, href: '/hotels' },
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156, href: '/restaurants' },
    { id: 'cafes', name: 'Cafes', icon: '☕', color: 'cafes', count: 92, href: '/cafes' },
    { id: 'tourism', name: 'Tourism', icon: '📸', color: 'tourism', count: 73, href: '/tourism' }
  ], []);
}

/**
 * Hook for featured events data
 */
function useFeaturedEvents(): FeaturedEvent[] {
  return useMemo(() => [
    {
      id: '1',
      title: 'Baghdad Cultural Night',
      description: 'Experience traditional Iraqi culture with music, dance, and art',
      icon: '🎭',
      date: 'Oct 15, 2024',
      category: 'events'
    },
    {
      id: '2',
      title: 'Tech Innovation Summit',
      description: 'Join leading tech experts for the future of technology in Iraq',
      icon: '🎪',
      date: 'Oct 28, 2024',
      category: 'events'
    }
  ], []);
}

// ==================== UI COMPONENTS ====================

/**
 * Story Avatar Component - Memoized for performance
 */
const StoryAvatar = memo(({ user }: { user: StoryUser }) => {
  const handleImageError = useCallback((e: React.SyntheticEvent<HTMLImageElement>) => {
    const target = e.currentTarget;
    target.src = `data:image/svg+xml;base64,${btoa(`
      <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="64" height="64" fill="#2D1B4E"/>
        <circle cx="32" cy="24" r="8" fill="#B24BF3"/>
        <path d="M16 48c0-8 7-16 16-16s16 8 16 16" fill="#B24BF3"/>
      </svg>
    `)}`;
  }, []);

  return (
    <div className="story-avatar events-glow">
      <img
        src={user.avatar}
        alt={user.name}
        loading="lazy"
        onError={handleImageError}
      />
      <div className="name">{user.name}</div>
    </div>
  );
});
StoryAvatar.displayName = 'StoryAvatar';

/**
 * Category Card Component - Memoized for performance
 */
const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
  return (
    <Link
      href={category.href}
      className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
      style={{
        textDecoration: 'none',
        animationDelay: `${index * 0.2}s`
      }}
    >
      <div
        className="icon"
        style={{
          fontSize: '3rem',
          filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
        }}
      >
        {category.icon}
      </div>
      <div
        className="label"
        style={{
          fontSize: '1.1rem',
          fontWeight: 'bold',
          color: `var(--${category.color}-color)`,
          textShadow: `0 0 5px var(--${category.color}-color)`
        }}
      >
        {category.name}
      </div>
      <div style={{
        fontSize: '0.9rem',
        color: 'var(--text-secondary)',
        marginTop: '4px'
      }}>
        {category.count}+ places
      </div>
    </Link>
  );
});
CategoryCard.displayName = 'CategoryCard';

/**
 * Event Card Component - Memoized for performance
 */
const EventCard = memo(({ event, featured = false }: { event: FeaturedEvent; featured?: boolean }) => {
  return (
    <div className={`neon-card events events-glow ${featured ? 'featured' : ''}`}>
      <div style={{ padding: '20px' }}>
        <div style={{
          width: '100%',
          height: '150px',
          background: 'linear-gradient(135deg, var(--events-color), var(--bg-secondary))',
          borderRadius: '8px',
          marginBottom: '16px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '3rem'
        }}>
          {event.icon}
        </div>
        <h4 style={{ color: 'var(--text-primary)', marginBottom: '8px', fontSize: '1.2rem' }}>
          {event.title}
        </h4>
        <p style={{ color: 'var(--text-secondary)', fontSize: '0.9rem', marginBottom: '12px' }}>
          {event.description}
        </p>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <span style={{ color: 'var(--text-tertiary)', fontSize: '0.8rem' }}>
            📅 {event.date}
          </span>
          <button className="neon-button events" style={{ fontSize: '0.8rem', padding: '6px 12px' }}>
            View Details
          </button>
        </div>
      </div>
    </div>
  );
});
EventCard.displayName = 'EventCard';

// ==================== MAIN COMPONENT ====================

// Available cities in Iraq
const CITIES = [
  { id: 'baghdad', name: 'Baghdad', nameAr: 'بغداد', region: 'Central Iraq' },
  { id: 'erbil', name: 'Erbil', nameAr: 'أربيل', region: 'Kurdistan' },
  { id: 'basra', name: 'Basra', nameAr: 'البصرة', region: 'Southern Iraq' },
  { id: 'mosul', name: 'Mosul', nameAr: 'الموصل', region: 'Northern Iraq' },
  { id: 'sulaymaniyah', name: 'Sulaymaniyah', nameAr: 'السليمانية', region: 'Kurdistan' },
  { id: 'najaf', name: 'Najaf', nameAr: 'النجف', region: 'Central Iraq' },
  { id: 'karbala', name: 'Karbala', nameAr: 'كربلاء', region: 'Central Iraq' },
  { id: 'kirkuk', name: 'Kirkuk', nameAr: 'كركوك', region: 'Northern Iraq' },
];

export default function OptimizedNeonHomepage() {
  const { language, isRTL } = useLanguage();
  const { t } = useTranslations();

  // Use persisted state for selected city (cached in localStorage)
  const [selectedCity, setSelectedCity] = usePersistedState('selected-city', 'Baghdad');
  const [showCityModal, setShowCityModal] = useState(false);

  // Get data with memoization
  const storyUsers = useStoryUsers();
  const categories = useCategories();
There are only 5 categories. I might need nine in app/components/NeonHomepage.

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/components/NeonHomepage.tsx
"use client";

import { useState } from 'react';
import Link from 'next/link';
import { useLanguage } from './LanguageProvider';
import { useTranslations } from '../hooks/useTranslations';

interface StoryUser {
  id: string;
  name: string;
  avatar: string;
  count: number;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: 'events' | 'hotels' | 'restaurants' | 'cafes' | 'tourism';
  count: number;
}

export default function NeonHomepage() {
  const { language, isRTL } = useLanguage();
  const { t } = useTranslations();
  const [selectedCity, setSelectedCity] = useState('Baghdad');

  // Story users (mock data)
  const storyUsers: StoryUser[] = [
    { id: '1', name: 'Ahmed M.', avatar: '/api/placeholder/64/64', count: 245 },
    { id: '2', name: 'Sara K.', avatar: '/api/placeholder/64/64', count: 89 },
    { id: '3', name: 'Omar H.', avatar: '/api/placeholder/64/64', count: 156 }
  ];

  // Categories with specific neon colors
  const categories: Category[] = [
    { id: 'events', name: 'Events', icon: '📅', color: 'events', count: 124 },
    { id: 'hotels', name: 'Hotels', icon: '🏨', color: 'hotels', count: 87 },
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156 },
    { id: 'cafes', name: 'Cafes', icon: '☕', color: 'cafes', count: 92 },
    { id: 'tourism', name: 'Tourism', icon: '📸', color: 'tourism', count: 73 }
  ];

  return (
    <div className="min-h-screen">
      {/* Stories Section */}
      <div className="story-section">
        <div className="story-container">
          {/* Add Story Button */}
          <div className="story-avatar add-story">
            <span>+</span>
            <div className="name">Add Story</div>
          </div>

          {/* User Stories */}
          {storyUsers.map((user) => (
            <div key={user.id} className="story-avatar events-glow">
              <img
                src={user.avatar}
                alt={user.name}
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.src = `data:image/svg+xml;base64,${btoa(`
                    <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <rect width="64" height="64" fill="#2D1B4E"/>
                      <circle cx="32" cy="24" r="8" fill="#B24BF3"/>
                      <path d="M16 48c0-8 7-16 16-16s16 8 16 16" fill="#B24BF3"/>
                    </svg>
                  `)}`;
                }}
              />
              <div className="name">{user.name}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Currently Exploring Section */}
      <div className="currently-exploring tourism-glow">
        <h2 className="neon-glow">Currently Exploring</h2>

        <div className="city-name">
          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#00F0FF', textShadow: '0 0 10px #00F0FF' }}>
            Baghdad
          </div>
          <div className="arabic-name">بغداد</div>
          <div style={{ marginTop: '8px', opacity: 0.8 }}>Central Iraq</div>
        </div>

        <p style={{ margin: '16px 0', fontSize: '1.1rem' }}>
          The vibrant capital city
        </p>

        <button className="neon-button tourism" style={{ marginTop: '16px' }}>
          Change City
        </button>

        <button
          className="neon-button tourism"
          style={{ marginTop: '8px', marginLeft: '12px' }}
        >
          Select a City
        </button>
      </div>

      {/* Categories Section */}
      <div style={{ padding: '40px 20px' }}>
        <h2 style={{
          textAlign: 'center',
          fontSize: '2rem',
          marginBottom: '32px',
          color: 'var(--text-primary)',
          textShadow: '0 0 10px var(--events-color)'
        }}>
          Categories
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '24px',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          {categories.map((category) => (
            <Link
              key={category.id}
              href={`/${category.id}`}
              className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
              style={{
                textDecoration: 'none',
                animationDelay: `${categories.indexOf(category) * 0.2}s`
              }}
            >
              <div className="icon" style={{
                fontSize: '3rem',
                filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
              }}>
                {category.icon}
              </div>
              <div className="label" style={{
                fontSize: '1.1rem',
                fontWeight: 'bold',
                color: `var(--${category.color}-color)`,
                textShadow: `0 0 5px var(--${category.color}-color)`
              }}>
                {category.name}
              </div>
              <div style={{
                fontSize: '0.9rem',
                color: 'var(--text-secondary)',
                marginTop: '4px'
              }}>
                {category.count}+ places
              </div>
            </Link>
          ))}
        </div>
      </div>

      {/* Featured Content Sections */}
      <div style={{ padding: '40px 20px' }}>
        {/* Featured Events */}
        <section style={{ marginBottom: '48px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
            <h3 style={{
              fontSize: '1.8rem',
              color: 'var(--text-primary)',
              textShadow: '0 0 5px var(--events-color)'
            }}>
              Featured Events in {selectedCity}
            </h3>
            <Link
              href="/events"
              className="neon-button events"
              style={{ fontSize: '0.9rem', padding: '8px 16px' }}
            >
              See All
            </Link>
          </div>

          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
            gap: '20px'
          }}>
            {/* Sample Featured Event Cards */}
            <div className="neon-card events events-glow featured">
              <div style={{ padding: '20px' }}>
                <div style={{
                  width: '100%',
                  height: '150px',
                  background: 'linear-gradient(135deg, var(--events-color), var(--bg-secondary))',
                  borderRadius: '8px',
                  marginBottom: '16px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '3rem'
                }}>
I'm checking if categories are stored in src/app/[locale]/page.tsx or src/types.

root@f92a78a6a024:/workspace# ls missinggold/src/types
next-pwa.d.ts
I'll check messages/en.json for the categoriesPage translations. Opening the file now!

root@f92a78a6a024:/workspace# ls missinggold/messages
ar.json  en.json  index.ts  ku.json
root@f92a78a6a024:/workspace# rg "categories" missinggold/messages/en.json -n
2:  "categories.${event.category}": ""
7:    "categories": "Categories",
101:  "categories": {
302:  "categoriesPage": {
304:    "subtitle": "Discover amazing events across all categories. From music and technology to food and culture, find exactly
what interests you.",
355:    "categories": "Categories",
I need the full categories section now. Let's check that out.

root@f92a78a6a024:/workspace# sed -n '101,200p' missinggold/messages/en.json
  "categories": {
    "technologyInnovation": "Technology & Innovation",
    "businessNetworking": "Business & Networking",
    "musicConcerts": "Music & Concerts",
    "artsCulture": "Arts & Culture",
    "sportsFitness": "Sports & Fitness",
    "foodDrink": "Food & Drink",
    "learningDevelopment": "Learning & Development",
    "healthWellness": "Health & Wellness",
    "communitySocial": "Community & Social",
    "gamingEsports": "Gaming & Esports",
    "spiritualReligious": "Spiritual & Religious",
    "familyKids": "Family & Kids",
    "outdoorAdventure": "Outdoor & Adventure",
    "virtualEvents": "Virtual Events",
    "academicConferences": "Academic and Conferences"
  },
  "login": {
    "welcomeBack": "Welcome Back",
    "subtitle": "Sign in to your IraqEvents account",
    "continueWithGoogle": "Continue with Google",
    "orContinueWith": "Or continue with email",
    "emailAddress": "Email Address",
    "emailPlaceholder": "Enter your email",
    "password": "Password",
    "passwordPlaceholder": "Enter your password",
    "signingIn": "Signing in...",
    "signIn": "Sign In",
    "noAccount": "Don't have an account?",
    "createAccount": "Create one here",
    "invalidCredentials": "Invalid email or password",
    "googleSignInError": "Failed to sign in with Google"
  },
  "about": {
    "title": "About IraqEvents",
    "subtitle": "Connecting communities through amazing events",
    "stats": {
      "eventsCreated": "Events Created",
      "happyUsers": "Happy Users",
      "citiesCovered": "Cities Covered",
      "languagesSupported": "Languages Supported"
    },
    "features": {
      "eventDiscovery": {
        "title": "Event Discovery",
        "description": "Find amazing events across Iraq and Kurdistan with our advanced search and filtering system."
      },
      "easyEventCreation": {
        "title": "Easy Event Creation",
        "description": "Create and manage your events with our intuitive event management platform."
      },
      "multiLanguageSupport": {
        "title": "Multi-Language Support",
        "description": "Navigate in Arabic, English, or Sorani Kurdish to make the platform accessible to everyone."
      },
      "mobileFriendly": {
        "title": "Mobile Friendly",
        "description": "Access events and create your own from anywhere with our fully responsive design."
      },
      "flexibleTicketing": {
        "title": "Flexible Ticketing",
        "description": "Support for both free and paid events with secure payment processing."
      },
      "communityFocused": {
        "title": "Community Focused",
        "description": "Connect with event organizers and attendees to build stronger communities."
      }
    },
    "mission": {
      "title": "Our Mission",
      "p1": "We believe that events have the power to bring people together, create lasting memories, and strengthen communities
. Our mission is to make event discovery and creation accessible to everyone across Iraq and Kurdistan.",
      "p2": "Whether you're looking for cultural festivals, business conferences, music concerts, or community gatherings, IraqE
vents is your gateway to discovering what's happening in your city.",
      "p3": "For event organizers, we provide powerful tools to create, promote, and manage events with ease, helping you reach
the right audience and create successful experiences."
    },
    "whyChoose": {
      "title": "Why Choose IraqEvents?",
      "subtitle": "We've built the most comprehensive event platform for Iraq and Kurdistan, designed with our local communities
 in mind."
    },
    "team": {
      "title": "Meet Our Team",
      "subtitle": "We're a passionate team dedicated to bringing people together through events and building stronger communitie
s across Iraq and Kurdistan.",
      "items": {
        "devTeam": {
          "name": "Development Team",
          "role": "Platform Development",
          "description": "Building the future of event management in Iraq"
        },
        "communityTeam": {
          "name": "Community Team",
          "role": "User Support",
          "description": "Helping users create and discover amazing events"
        },
        "localPartners": {
          "name": "Local Partners",
          "role": "Regional Expansion",
          "description": "Expanding our reach across Iraq and Kurdistan"
        }
      }
    },
    "values": {
I should check if subcategory details are needed for categoryDescriptions in the translation.

root@f92a78a6a024:/workspace# rg "categoryDescriptions" missinggold/messages/en.json -n
308:  "categoryDescriptions": {
root@f92a78a6a024:/workspace# sed -n '308,400p' missinggold/messages/en.json
  "categoryDescriptions": {
    "all": "Discover all types of events happening around you",
    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
    "businessNetworking": "Networking events, professional meetups, and business conferences",
    "musicConcerts": "Live music, concerts, and musical performances",
    "artsCulture": "Art exhibitions, cultural events, and creative workshops",
    "sportsFitness": "Sports events, fitness classes, and athletic competitions",
    "foodDrink": "Culinary events, food festivals, and dining experiences",
    "learningDevelopment": "Educational workshops, skill development, and training sessions",
    "healthWellness": "Health seminars, wellness workshops, and medical events",
    "communitySocial": "Social gatherings, community events, and meetups",
    "gamingEsports": "Gaming tournaments, esports competitions, and gaming meetups",
    "spiritualReligious": "Spiritual gatherings, religious events, and faith-based meetings",
    "familyKids": "Family-friendly events, children's activities, and parenting workshops",
    "outdoorAdventure": "Outdoor activities, adventure sports, and nature experiences",
    "virtualEvents": "Online events, webinars, and virtual conferences",
    "academicConferences": "Academic conferences, research presentations, and scholarly meetings"
  },
  "hero": {
    "liveEventPlatform": "Live Event Platform",
    "registerNow": "Register Now",
    "getTickets": "Get Tickets",
    "joinSummit": "Join Summit",
    "exploreArt": "Explore Art",
    "eventStartsIn": "Event Starts In",
    "days": "DAYS",
    "hours": "HRS",
    "minutes": "MIN",
    "seconds": "SEC"
  },
  "register": {
    "joinIraqEvents": "Join IraqEvents",
    "createAccountSubtitle": "Create your account to start organizing amazing events",
    "continueWithGoogle": "Continue with Google",
    "orCreateAccount": "Or create account with email",
    "fullNameOptional": "Full Name (Optional)",
    "enterFullName": "Enter your full name",
    "enterEmail": "Enter your email",
    "createPassword": "Create a password (min. 6 characters)",
    "creatingAccount": "Creating account...",
    "createAccount": "Create Account",
    "alreadyHaveAccount": "Already have an account?",
    "signInHere": "Sign in here"
  },
  "navigation": {
    "home": "Home",
    "events": "Events",
    "categories": "Categories",
    "about": "About",
    "login": "Login",
    "logout": "Logout",
    "dashboard": "Dashboard",
    "createEvent": "Create Event",
    "eventPlatform": "Event Platform",
    "aiRecommendations": "AI-Powered Event Recommendations Now Live!",
    "tryItFree": "Try it free",
    "language": "Language"
  },
  "heroSlides": {
    "slide1": {
      "title": "Baghdad AI Innovation Summit",
      "subtitle": "The New Age of Technology",
      "description": "Join us for a complete exploration of artificial intelligence technology"
    },
    "slide2": {
      "title": "Kurdish Music Festival",
      "subtitle": "National Arts and Culture",
      "description": "Experience the rich musical heritage of Kurdistan"
    },
    "slide3": {
      "title": "Business Leadership Workshop",
      "subtitle": "Business Development",
      "description": "Learn essential leadership skills"
    },
    "slide4": {
      "title": "Modern Art Exhibition",
      "subtitle": "Art and Culture",
      "description": "See contemporary art from Iraq and Kurdistan"
    },
    "attendees": "Attendees",
    "sessions": "Sessions",
    "days": "Days",
    "artists": "Artists",
    "stages": "Stages",
    "hours": "Hours",
    "leaders": "Leaders",
    "companies": "Companies",
    "workshops": "Workshops",
    "artworks": "Artworks",
    "galleries": "Galleries",
    "joinSummit": "Join Summit",
    "exploreArt": "Explore Art"
  }
I'll look for arrays in page.tsx or other files under src/app/[locale].

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/page.tsx                                                      ﻿
"use client";

import MultiVenueHomepage from "./components/MultiVenueHomepage";
import Navigation from "./components/Navigation";

/**
 * Home Page - Multi-Venue Platform
 *
 * Features:
 * - Events, Hotels, Restaurants, Activities, Services
 * - Tabbed navigation
 * - Venue listings
 */

export default function Home() {
  return (
    <>
      <Navigation />
      <MultiVenueHomepage />
    </>
  );
}
I'm taking a look at the MultiVenueHomepage to understand its structure.

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/components/MultiVenueHomepage.tsx
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';

interface Venue {
  id: string;
  publicId: string;
  type: 'EVENT' | 'HOTEL' | 'RESTAURANT' | 'ACTIVITY' | 'SERVICE';
  title: string;
  description: string;
  location: string;
  city: string;
  category?: string;
  priceRange?: string;
  imageUrl?: string;
  featured: boolean;
  verified: boolean;
  cuisineType?: string;
  eventDate?: string;
  amenities?: string[];
}

export default function MultiVenueHomepage() {
  const [activeTab, setActiveTab] = useState<string>('all');
  const [venues, setVenues] = useState<Venue[]>([]);
  const [loading, setLoading] = useState(true);

  const tabs = [
    { id: 'all', label: 'All', icon: '🌟' },
    { id: 'EVENT', label: 'Events', icon: '🎉' },
    { id: 'HOTEL', label: 'Hotels', icon: '🏨' },
    { id: 'RESTAURANT', label: 'Restaurants', icon: '🍽️' },
    { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
  ];

  useEffect(() => {
    fetchVenues();
  }, [activeTab]);

  const fetchVenues = async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams();
      if (activeTab !== 'all') {
        params.set('type', activeTab);
      }
      params.set('locale', 'en'); // TODO: Get from context

      const response = await fetch(`/api/venues?${params}`);
      const data = await response.json();

      if (data.success) {
        setVenues(data.venues || []);
      }
    } catch (error) {
      console.error('Error fetching venues:', error);
    } finally {
      setLoading(false);
    }
  };

  const getVenueTypeIcon = (type: string) => {
    switch (type) {
      case 'EVENT': return '🎉';
      case 'HOTEL': return '🏨';
      case 'RESTAURANT': return '🍽️';
      case 'ACTIVITY': return '🎯';
      case 'SERVICE': return '🛎️';
      default: return '📍';
    }
  };

  const formatPrice = (priceRange?: string) => {
    if (!priceRange) return null;
    return priceRange;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Hero Section */}
      <section className="relative py-20 px-4 text-center">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            🏰 Discover Iraq & Kurdistan
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Events • Hotels • Restaurants • Activities - All in One Platform
          </p>

          {/* Tab Navigation */}
          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-6 py-3 rounded-full font-semibold transition-all duration-300 ${
                  activeTab === tab.id
                    ? 'bg-blue-600 text-white shadow-lg transform scale-105'
                    : 'bg-white text-gray-700 hover:bg-blue-50 shadow-md'
                }`}
              >
                {tab.icon} {tab.label}
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Venues Grid */}
      <section className="px-4 pb-20">
        <div className="max-w-7xl mx-auto">
          {loading ? (
            <div className="flex justify-center items-center py-20">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
          ) : (
            <>
              {venues.length === 0 ? (
                <div className="text-center py-20">
                  <div className="text-6xl mb-4">🏗️</div>
                  <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    Coming Soon!
                  </h3>
                  <p className="text-gray-600">
                    {activeTab === 'all'
                      ? 'Venues are being added to our platform'
                      : `${tabs.find(t => t.id === activeTab)?.label} will be available soon`
                    }
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                  {venues.map((venue) => (
                    <VenueCard key={venue.id} venue={venue} />
                  ))}
                </div>
              )}
            </>
          )}
        </div>
      </section>

      {/* CTA Section */}
      <section className="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16 px-4">
        <div className="max-w-4xl mx-auto text-center">
          <h2 className="text-3xl font-bold mb-4">
            Join the Platform
          </h2>
          <p className="text-xl mb-8 opacity-90">
            List your business and reach thousands of customers
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Link
              href="/register"
              className="bg-white text-blue-600 px-8 py-3 rounded-full font-semibold hover:bg-blue-50 transition-colors"
            >
              Sign Up Free
            </Link>
            <Link
              href="/venues/create"
              className="border-2 border-white text-white px-8 py-3 rounded-full font-semibold hover:bg-white hover:text-blue-60
0 transition-colors"
            >
              List Your Venue
            </Link>
          </div>
        </div>
      </section>
    </div>
  );
}

function VenueCard({ venue }: { venue: Venue }) {
  const getVenueTypeIcon = (type: string) => {
    switch (type) {
      case 'EVENT': return '🎉';
      case 'HOTEL': return '🏨';
      case 'RESTAURANT': return '🍽️';
      case 'ACTIVITY': return '🎯';
      case 'SERVICE': return '🛎️';
      default: return '📍';
    }
  };

  const getEventDate = (eventDate?: string) => {
    if (!eventDate) return null;
    return new Date(eventDate).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const formatPrice = (priceRange?: string) => {
    if (!priceRange) return null;
    return priceRange;
  };

  return (
I need to find category data like restaurants, hotels, or tourism. Searching for mainCategories.

root@f92a78a6a024:/workspace# rg "mainCategories" -n missinggold
I’ll look in the public/data folder, maybe there’s a JSON file there.

root@f92a78a6a024:/workspace# ls missinggold/public
apple-touch-icon.png  favicon.ico  globe.svg  icons    manifest.json  next.svg  vercel.svg  workbox-f52fd911.js
data                  file.svg     icon.svg   locales  mockups        sw.js     window.svg
I'll check the contents of the public/data directory now. Let's see what's there.

root@f92a78a6a024:/workspace# ls missinggold/public/data
events.json
root@f92a78a6a024:/workspace# head -n 20 missinggold/public/data/events.json
[
  {
    "id": "1",
    "publicId": "ai-summit-2025",
    "title": "AI Innovation Summit",
    "description": "Explore AI and machine learning breakthroughs with talks, workshops, and networking.",
    "date": "2025-10-10T10:00:00Z",
    "location": "Baghdad Tech Center, Baghdad",
    "category": "Technology & Innovation",
    "price": 50,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Tech Events Iraq", "email": "tech@iraqevents.com" }
  },
  {
    "id": "2",
    "publicId": "music-festival-erbil",
    "title": "Kurdish Music Festival",
    "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary artists.",
    "date": "2025-10-15T18:00:00Z",
I'm searching for a potential grid structure to fit the nine categories with subcategories.

root@f92a78a6a024:/workspace# rg "grid" missinggold/src -n | head
missinggold/src/app/categories/page.tsx:45:        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
missinggold/src/app/page-original.tsx:707:              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
missinggold/src/app/page-original.tsx:751:              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
missinggold/src/app/restaurants/page.tsx:91:        display: 'grid',
missinggold/src/app/restaurants/page.tsx:92:        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
missinggold/src/app/restaurants/page.tsx:134:                display: 'grid',
missinggold/src/app/restaurants/page.tsx:135:                gridTemplateColumns: '1fr 1fr',
missinggold/src/app/restaurants/page.tsx:213:          display: 'grid',
missinggold/src/app/restaurants/page.tsx:214:          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
missinggold/src/app/[locale]/categories/page.tsx:60:        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
I'll check page-original.tsx for a possible object with categories or subcategories.

root@f92a78a6a024:/workspace# rg "subcategories" -n missinggold/src
I think the 9 categories might relate to "Events." I'll check page.tsx in the events folder.

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/events/page.tsx
import { redirect } from 'next/navigation';
import { headers } from 'next/headers';

export default async function EventsRedirectPage() {
  // Get user's preferred language from headers
  const headersList = await headers();
  const acceptLanguage = headersList.get('accept-language') || '';

  // Determine the best locale
  let locale = 'en'; // default

  if (acceptLanguage.includes('ar')) {
    locale = 'ar';
  } else if (acceptLanguage.includes('ku')) {
    locale = 'ku';
  }

  // Redirect to the localized events page
  redirect(`/${locale}/events`);
}root@f92a78a6a024:/workspace#
I'll check src/app/[locale]/events/page.tsx for category data.

}root@f92a78a6a024:/workspace# sed -n '120,360p' missinggold/src/app/[locale]/events/page.tsx
          setEvents(eventsData);
          setFilteredEvents(eventsData);
        } else {
          console.error('Failed to fetch events');
          // Set some demo events for now
          setEvents(demoEvents);
          setFilteredEvents(demoEvents);
        }
      } catch (error) {
        console.error('Error fetching events:', error);
        // Set some demo events for now
        setEvents(demoEvents);
        setFilteredEvents(demoEvents);
      } finally {
        setLoading(false);
      }
    };

    if (locale) {
      fetchEvents();
    }
  }, [locale]);

  // Demo events for when database is empty
  const demoEvents: Event[] = [
    {
      id: "1",
      publicId: "ai-summit-2025",
      title: t('demo.events.aiSummit.title'),
      description: t('demo.events.aiSummit.description'),
      date: "2025-03-15T10:00:00Z",
      location: t('demo.events.aiSummit.location'),
      category: t('demo.events.aiSummit.category'),
      price: 50,
      isFree: false,
      imageUrl: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
      user: { name: "Tech Events Iraq", email: "tech@iraqevents.com" }
    },
    {
      id: "2",
      publicId: "music-festival-erbil",
      title: t('demo.events.musicFestival.title'),
      description: t('demo.events.musicFestival.description'),
      date: "2025-03-20T18:00:00Z",
      location: t('demo.events.musicFestival.location'),
      category: t('demo.events.musicFestival.category'),
      price: 0,
      isFree: true,
      imageUrl: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
      user: { name: "Kurdistan Arts Council", email: "arts@kurdistan.org" }
    },
    {
      id: "3",
      publicId: "business-workshop-basra",
      title: t('demo.events.businessWorkshop.title'),
      description: t('demo.events.businessWorkshop.description'),
      date: "2025-03-25T09:00:00Z",
      location: t('demo.events.businessWorkshop.location'),
      category: t('demo.events.businessWorkshop.category'),
      price: 75,
      isFree: false,
      imageUrl: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
      user: { name: "Business Development Iraq", email: "business@iraq.com" }
    },
    {
      id: "4",
      publicId: "art-exhibition-mosul",
      title: t('demo.events.artExhibition.title'),
      description: t('demo.events.artExhibition.description'),
      date: "2025-04-01T14:00:00Z",
      location: t('demo.events.artExhibition.location'),
      category: t('demo.events.artExhibition.category'),
      price: 30,
      isFree: false,
      imageUrl: "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
      user: { name: "Mosul Cultural Foundation", email: "culture@mosul.org" }
    },
    {
      id: "5",
      publicId: "food-festival-baghdad",
      title: "Iraqi Food Festival",
      description: "Taste authentic Iraqi cuisine from various regions, featuring traditional recipes and modern interpretations
.",
      date: "2025-04-05T12:00:00Z",
      location: "Al-Zawra Park, Baghdad",
      category: "Food & Drink",
      price: 15,
      isFree: false,
      imageUrl: "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
      user: { name: "Baghdad Culinary Society", email: "food@baghdad.com" }
    },
    {
      id: "6",
      publicId: "sports-tournament-sulaymaniyah",
      title: "Football Championship",
      description: "Regional football tournament featuring teams from across Kurdistan and Iraq competing for the championship."
,
      date: "2025-04-10T16:00:00Z",
      location: "Sulaymaniyah Stadium, Sulaymaniyah",
      category: "Sports & Fitness",
      price: 25,
      isFree: false,
      imageUrl: "https://images.unsplash.com/photo-1431324155629-1a6deb1dec8d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
      user: { name: "Kurdistan Football League", email: "sports@kurdistan.com" }
    }
  ];

  // Filter events
  useEffect(() => {
    let filtered = events;

    // Search filter
    if (searchQuery) {
      filtered = filtered.filter(event =>
        event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        event.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        event.location.toLowerCase().includes(searchQuery.toLowerCase())
      );
...
    // Category filter
    if (selectedCategory !== t('common.allCategories')) {
      filtered = filtered.filter(event => event.category === selectedCategory);
    }

    // City filter
    if (selectedCity !== t('common.allCities')) {
      filtered = filtered.filter(event =>
        event.location.toLowerCase().includes(selectedCity.toLowerCase())
      );
    }

    // Month filter
    if (selectedMonth !== t('common.allMonths')) {
      const monthIndex = months.indexOf(selectedMonth) - 1; // -1 because months array includes "All Months"
      filtered = filtered.filter(event => {
        const eventDate = new Date(event.date);
        return eventDate.getMonth() === monthIndex;
      });
    }

    setFilteredEvents(filtered);
  }, [events, searchQuery, selectedCategory, selectedCity, selectedMonth, t, language]);

  const clearAllFilters = () => {
    setSearchQuery("");
    setSelectedCategory(t('common.allCategories'));
    setSelectedCity(t('common.allCities'));
    setSelectedMonth(t('common.allMonths'));
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const localeCode = language === 'ar' ? 'ar-IQ' : language === 'ku' ? 'ckb-IQ' : 'en-US';
    return date.toLocaleDateString(localeCode, {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleViewDetails = (event: Event, e: React.MouseEvent) => {
    e.preventDefault();
    setSelectedEvent(event);
    setIsModalOpen(true);
  };

  const getCategoryIcon = (categoryName: string) => {
    const category = categories.find(cat => cat.name === categoryName);
    return category ? category.icon : "🎉";
  };

  const translateCategory = (categoryName: string): string => {
    // Map English category names to translation keys
    const categoryMap: { [key: string]: string } = {
      "Technology & Innovation": "categories.technologyInnovation",
      "Business & Networking": "categories.businessNetworking",
      "Business": "categories.businessNetworking", // Handle variations
      "Music & Concerts": "categories.musicConcerts",
      "Arts & Culture": "categories.artsCulture",
      "Sports & Fitness": "categories.sportsFitness",
      "Food & Drink": "categories.foodDrink",
      "Learning & Development": "categories.learningDevelopment",
      "Health & Wellness": "categories.healthWellness",
      "Community & Social": "categories.communitySocial",
      "Gaming & Esports": "categories.gamingEsports",
      "Spiritual & Religious": "categories.spiritualReligious",
      "Family & Kids": "categories.familyKids",
      "Outdoor & Adventure": "categories.outdoorAdventure",
      "Virtual Events": "categories.virtualEvents",
      "Academic and Conferences": "categories.academicConferences"
    };

    const translationKey = categoryMap[categoryName];
    return translationKey ? t(translationKey) : categoryName;
  };

  const getEventImageCategory = (category: string) => {
    const mapping: { [key: string]: string } = {
      "Music & Concerts": "music",
      "Sports & Fitness": "sports",
      "Food & Drink": "food",
      "Business": "business",
      "Technology & Innovation": "tech",
      "Arts & Culture": "art",
      "Health & Wellness": "health",
      "Community & Social": "community"
    };
    return mapping[category] || "community";
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">{t('homepage.loading')}</h2>
          <p className="text-gray-600">{t('events.subtitle')}</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 ${isRTL ? 'text-right' : 'text-left'}`
}>
      {/* Header Section */}
      <div className="bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-500 py-16">
        <div className="max-w-7xl mx-auto px-4">
          <div className="text-center mb-12">
            <div className="inline-block bg-white/20 backdrop-blur-md px-6 py-3 rounded-full border border-white/30 mb-6">
              <span className="text-white font-semibold">📅 {t('homepage.allEvents')}</span>
            </div>
            <h1 className="text-5xl md:text-6xl font-bold text-white mb-6">
              {t('events.title')}
            </h1>
            <p className="text-xl text-white/90 max-w-3xl mx-auto">
              {t('events.subtitle')}
            </p>
          </div>
I need to find the array of categories in this file to check the names.

root@f92a78a6a024:/workspace# rg "const categories" missinggold/src/app/[locale]/events/page.tsx -n
61:  const categories = [
root@f92a78a6a024:/workspace# sed -n '60,120p' missinggold/src/app/[locale]/events/page.tsx
  // Use translated categories
  const categories = [
    { name: t('common.allCategories'), icon: "🎉", key: 'all' },
    { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
    { name: t('categories.businessNetworking'), icon: "💼", key: 'businessNetworking' },
    { name: t('categories.musicConcerts'), icon: "🎵", key: 'musicConcerts' },
    { name: t('categories.artsCulture'), icon: "🎨", key: 'artsCulture' },
    { name: t('categories.sportsFitness'), icon: "⚽", key: 'sportsFitness' },
    { name: t('categories.foodDrink'), icon: "🍽️", key: 'foodDrink' },
    { name: t('categories.learningDevelopment'), icon: "📚", key: 'learningDevelopment' },
    { name: t('categories.healthWellness'), icon: "🏥", key: 'healthWellness' },
    { name: t('categories.communitySocial'), icon: "👥", key: 'communitySocial' },
    { name: t('categories.gamingEsports'), icon: "🎮", key: 'gamingEsports' },
    { name: t('categories.spiritualReligious'), icon: "🕌", key: 'spiritualReligious' },
    { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦", key: 'familyKids' },
    { name: t('categories.outdoorAdventure'), icon: "🏔️", key: 'outdoorAdventure' },
    { name: t('categories.virtualEvents'), icon: "📱", key: 'virtualEvents' },
    { name: t('categories.academicConferences'), icon: "🎓", key: 'academicConferences' }
  ];

  // Use translated cities
  const cities = [
    t('common.allCities'),
    t('cities.baghdad'),
    t('cities.basra'),
    t('cities.mosul'),
    t('cities.erbil'),
    t('cities.sulaymaniyah'),
    t('cities.duhok'),
    t('cities.kirkuk'),
    t('cities.anbar'),
    t('cities.najaf'),
    t('cities.karbala')
  ];

  // Use translated months (memoized)
  const months = React.useMemo(() => ([
    t('common.allMonths'),
    t('months.january'), t('months.february'), t('months.march'),
    t('months.april'), t('months.may'), t('months.june'),
    t('months.july'), t('months.august'), t('months.september'),
    t('months.october'), t('months.november'), t('months.december')
  ]), [language]);

  // Initialize filter states with translations when they're loaded
  useEffect(() => {
    if (t && selectedCategory === '') {
      setSelectedCategory(t('common.allCategories'));
      setSelectedCity(t('common.allCities'));
      setSelectedMonth(t('common.allMonths'));
    }
  }, [t, selectedCategory, selectedCity, selectedMonth]);

  // Fetch events
  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await fetch(`/api/events?type=public&lang=${locale}`);
        if (response.ok) {
          const eventsData = await response.json();
          setEvents(eventsData);
I'll take a look at src/app/hotels/page.tsx to check the structure for categories.

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/hotels/page.tsx
"use client";

import Link from 'next/link';

export default function HotelsPage() {
  const hotels = [
    {
      id: '1',
      name: 'Baghdad Palace Hotel',
      description: 'Luxury accommodation in the heart of Baghdad',
      rating: 4.8,
      price: '$120/night',
      image: '🏰',
      location: 'Central Baghdad'
    },
    {
      id: '2',
      name: 'Erbil Grand Hotel',
      description: 'Modern hotel with stunning city views',
      rating: 4.6,
      price: '$95/night',
      image: '🏨',
      location: 'Erbil Center'
    },
    {
      id: '3',
      name: 'Basra Riverside Hotel',
      description: 'Peaceful riverside accommodation',
      rating: 4.4,
      price: '$80/night',
      image: '🌊',
      location: 'Basra Waterfront'
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 46, 151, 0.1)',
          border: '2px solid var(--hotels-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--hotels-color)',
            textShadow: '0 0 10px var(--hotels-color)',
            marginBottom: '16px'
          }}>
            🏨 Hotels
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Find the perfect place to stay in Iraq & Kurdistan
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button hotels">
          ← Back to Home
        </Link>
      </div>

      {/* Hotels Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
        gap: '24px',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {hotels.map((hotel) => (
          <div key={hotel.id} className="neon-card hotels hotels-glow">
            <div style={{ padding: '24px' }}>
              {/* Hotel Image/Icon */}
              <div style={{
                width: '100%',
                height: '200px',
                background: 'linear-gradient(135deg, var(--hotels-color), var(--bg-secondary))',
                borderRadius: '12px',
                marginBottom: '20px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '4rem'
              }}>
                {hotel.image}
              </div>

              {/* Hotel Info */}
              <h3 style={{
                color: 'var(--text-primary)',
                fontSize: '1.5rem',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--hotels-color)'
              }}>
                {hotel.name}
              </h3>

              <p style={{
                color: 'var(--text-secondary)',
                marginBottom: '16px',
                lineHeight: '1.6'
              }}>
                {hotel.description}
              </p>

              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginBottom: '16px'
              }}>
                <span style={{
                  color: 'var(--hotels-color)',
                  fontSize: '1.1rem',
                  fontWeight: 'bold'
                }}>
                  ⭐ {hotel.rating}
                </span>
                <span style={{
                  color: 'var(--text-tertiary)',
                  fontSize: '0.9rem'
                }}>
                  📍 {hotel.location}
                </span>
              </div>

              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{
                  color: 'var(--hotels-color)',
                  fontSize: '1.3rem',
                  fontWeight: 'bold',
                  textShadow: '0 0 5px var(--hotels-color)'
                }}>
                  {hotel.price}
                </span>
                <button className="neon-button hotels">
                  Book Now
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card hotels hotels-glow" style={{
          maxWidth: '600px',
          margin: '0 auto',
          padding: '32px'
        }}>
          <h2 style={{
            color: 'var(--hotels-color)',
            fontSize: '2rem',
            marginBottom: '16px',
            textShadow: '0 0 10px var(--hotels-color)'
          }}>
            Can&apos;t find what you&apos;re looking for?
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            marginBottom: '24px',
            fontSize: '1.1rem'
          }}>
            Contact us to find more hotel options in your preferred location
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button hotels">
              Contact Us
            </button>
            <button className="neon-button tourism">
              Browse All Categories
            </button>
I’ll check the restaurants page to see if it includes categories with sections.

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/restaurants/page.tsx
"use client";

import Link from 'next/link';

export default function RestaurantsPage() {
  const restaurants = [
    {
      id: '1',
      name: 'Al-Mansour Palace Restaurant',
      description: 'Authentic Iraqi cuisine in an elegant setting',
      rating: 4.7,
      priceRange: '$$$',
      image: '🍽️',
      cuisine: 'Traditional Iraqi',
      location: 'Baghdad Center'
    },
    {
      id: '2',
      name: 'Kurdistan Grill House',
      description: 'Famous for kebabs and Kurdish specialties',
      rating: 4.5,
      priceRange: '$$',
      image: '🥩',
      cuisine: 'Kurdish Grills',
      location: 'Erbil'
    },
    {
      id: '3',
      name: 'Mesopotamia Fine Dining',
      description: 'Modern Iraqi cuisine with a contemporary twist',
      rating: 4.8,
      priceRange: '$$$$',
      image: '🍷',
      cuisine: 'Modern Iraqi',
      location: 'Baghdad'
    },
    {
      id: '4',
      name: 'Basra Fish Market',
      description: 'Fresh seafood from the Persian Gulf',
      rating: 4.4,
      priceRange: '$$',
      image: '🐟',
      cuisine: 'Seafood',
      location: 'Basra'
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 107, 53, 0.1)',
          border: '2px solid var(--restaurants-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--restaurants-color)',
            textShadow: '0 0 10px var(--restaurants-color)',
            marginBottom: '16px'
          }}>
            🍽️ Restaurants
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Discover the finest dining experiences in Iraq & Kurdistan
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button restaurants">
          ← Back to Home
        </Link>
      </div>

      {/* Restaurants Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
        gap: '24px',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {restaurants.map((restaurant) => (
          <div key={restaurant.id} className="neon-card restaurants restaurants-glow">
            <div style={{ padding: '24px' }}>
              {/* Restaurant Image/Icon */}
              <div style={{
                width: '100%',
                height: '200px',
                background: 'linear-gradient(135deg, var(--restaurants-color), var(--bg-secondary))',
                borderRadius: '12px',
                marginBottom: '20px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '4rem'
              }}>
                {restaurant.image}
              </div>

              {/* Restaurant Info */}
              <h3 style={{
                color: 'var(--text-primary)',
                fontSize: '1.5rem',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--restaurants-color)'
              }}>
                {restaurant.name}
              </h3>

              <p style={{
                color: 'var(--text-secondary)',
                marginBottom: '16px',
                lineHeight: '1.6'
              }}>
                {restaurant.description}
              </p>

              <div style={{
                display: 'grid',
                gridTemplateColumns: '1fr 1fr',
                gap: '12px',
                marginBottom: '16px'
              }}>
                <div>
                  <span style={{
                    color: 'var(--restaurants-color)',
                    fontSize: '1.1rem',
                    fontWeight: 'bold'
                  }}>
                    ⭐ {restaurant.rating}
                  </span>
                </div>
                <div>
                  <span style={{
                    color: 'var(--text-tertiary)',
                    fontSize: '0.9rem'
                  }}>
                    📍 {restaurant.location}
                  </span>
                </div>
                <div>
                  <span style={{
                    color: 'var(--restaurants-color)',
                    fontSize: '0.9rem',
                    fontWeight: '600'
                  }}>
                    🍴 {restaurant.cuisine}
                  </span>
                </div>
                <div>
                  <span style={{
                    color: 'var(--text-tertiary)',
                    fontSize: '0.9rem'
                  }}>
                    💰 {restaurant.priceRange}
                  </span>
                </div>
              </div>

              <div style={{
                display: 'flex',
                gap: '12px',
                justifyContent: 'center'
              }}>
                <button className="neon-button restaurants" style={{
                  fontSize: '0.9rem',
                  padding: '8px 16px'
                }}>
                  View Menu
                </button>
                <button className="neon-button tourism" style={{
                  fontSize: '0.9rem',
                  padding: '8px 16px'
                }}>
                  Reserve Table
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Food Categories */}
      <div style={{
        marginTop: '60px',
root@f92a78a6a024:/workspace# sed -n '200,400p' missinggold/src/app/restaurants/page.tsx
        marginTop: '60px',
        textAlign: 'center'
      }}>
        <h2 style={{
          color: 'var(--restaurants-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--restaurants-color)'
        }}>
          Browse by Cuisine
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '20px',
          maxWidth: '800px',
          margin: '0 auto'
        }}>
          {[
            { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
            { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
            { name: 'Middle Eastern', icon: '🧆', count: 15 },
            { name: 'Seafood', icon: '🦐', count: 12 },
            { name: 'International', icon: '🍝', count: 20 },
            { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
          ].map((cuisine, index) => (
            <div
              key={index}
              className="category-icon restaurants restaurants-glow"
              style={{
                cursor: 'pointer',
                animationDelay: `${index * 0.1}s`
              }}
            >
              <div style={{ fontSize: '2.5rem', marginBottom: '8px' }}>
                {cuisine.icon}
              </div>
              <div style={{
                color: 'var(--restaurants-color)',
                fontWeight: '600',
                marginBottom: '4px'
              }}>
                {cuisine.name}
              </div>
              <div style={{
                color: 'var(--text-tertiary)',
                fontSize: '0.9rem'
              }}>
                {cuisine.count} places
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card restaurants restaurants-glow" style={{
          maxWidth: '600px',
          margin: '0 auto',
          padding: '32px'
        }}>
          <h2 style={{
            color: 'var(--restaurants-color)',
            fontSize: '2rem',
            marginBottom: '16px',
            textShadow: '0 0 10px var(--restaurants-color)'
          }}>
            Own a Restaurant?
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            marginBottom: '24px',
            fontSize: '1.1rem'
          }}>
            Join Eventra and showcase your restaurant to thousands of food lovers
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button restaurants">
              List Your Restaurant
            </button>
            <button className="neon-button cafes">
              Browse Cafes
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}root@f92a78a6a024:/workspace#
I’ll check the README to confirm if there are 9 main cuisine categories listed.

}root@f92a78a6a024:/workspace# sed -n '1,160p' missinggold/README.md
# Missinggold - Event Management Platform

A comprehensive event management and venue platform for Iraq & Kurdistan, featuring hotels, restaurants, activities, and enterta
inment venues.

## Features

- 🎯 **Multi-language Support**: English, Arabic, and Kurdish
- 🏨 **Venue Management**: Hotels, restaurants, cafes, and tourism activities
- 📱 **Progressive Web App**: Offline-capable mobile experience
- 🔐 **Authentication**: Secure user authentication with NextAuth.js
- 💎 **Modern Stack**: Next.js 15, React 19, TypeScript, Prisma
- 🎨 **Beautiful UI**: Tailwind CSS with responsive design
- 🌍 **RTL Support**: Full right-to-left language support

## Quick Start

### Prerequisites

- Node.js 18+
- PostgreSQL database
- Prisma CLI

### Installation

```bash
# Clone the repository
git clone https://github.com/absulysuly/missinggold.git
cd missinggold

# Install dependencies
npm ci

# Set up environment variables
cp .env.example .env.local
# Edit .env.local with your database URL and other secrets

# Set up the database
npm run db:deploy
npm run db:seed

# Start development server
npm run dev
```

Visit [http://localhost:3000](http://localhost:3000) to see the application.

## Environment Variables

Create a `.env.local` file in the root directory with the following variables:

```bash
# Database
DATABASE_URL="postgresql://user:password@localhost:5432/missinggold"

# Authentication
NEXTAUTH_SECRET="your-nextauth-secret-here"
NEXTAUTH_URL="http://localhost:3000"

# Rate Limiting (Upstash Redis)
UPSTASH_REDIS_REST_URL="your-upstash-url"
UPSTASH_REDIS_REST_TOKEN="your-upstash-token"

# Email (Resend)
RESEND_API_KEY="your-resend-api-key"

# Analytics (Optional)
SENTRY_DSN="your-sentry-dsn"
```

## Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint
- `npm run type-check` - Run TypeScript checking
- `npm run db:migrate` - Run database migrations
- `npm run db:seed` - Seed database with initial data

## Deployment

See [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed production deployment instructions.

## Project Structure

```
├── src/
│   ├── app/              # Next.js app router pages
│   ├── components/       # Reusable React components
│   ├── lib/              # Utility libraries
│   └── types/            # TypeScript type definitions
├── prisma/              # Database schema and migrations
├── public/              # Static assets
├── messages/            # i18n translation files
└── scripts/             # Build and maintenance scripts
```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Security

If you discover any security issues, please email [security@example.com](mailto:security@example.com) instead of using the issue
 tracker.

**Note**: After deployment, rotate all secrets that were removed during repository extraction.
It seems like the 9 categories might be in src/app/components/Navigation. I'll check.

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/components/Navigation.tsx
"use client";

import { useSession, signOut } from "next-auth/react";
import Link from "next/link";
import { useState, useEffect } from "react";
import { useLanguage } from "./LanguageProvider";
import { useTranslations } from "../hooks/useTranslations";
import ResponsiveButton from "./ResponsiveButton";

export default function Navigation() {
  const { data: session } = useSession();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { language, setLanguage, isRTL } = useLanguage();
  const { t } = useTranslations();

  const showTopBanner = (process.env.NEXT_PUBLIC_SHOW_TOP_BANNER === 'true');

  // Auto-open mobile menu on initial load for mobile screens to avoid CSS conflicts
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const isMobile = window.innerWidth < 768; // md breakpoint
      if (isMobile) {
        setIsMenuOpen(true);
      }
    }
  }, []);

  return (
    <>
      {/* Top Notification Bar (hidden in production by default) */}
      {showTopBanner && (
        <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white py-2 text-center text-sm font-medium">
          🎉 {t('navigation.aiRecommendations')}
          <Link href="/register" className="underline ml-2 font-semibold hover:text-yellow-300">
            {t('navigation.tryItFree')} {isRTL ? '←' : '→'}
          </Link>
        </div>
      )}

      {/* Main Navigation */}
      <nav className="neon-nav events-glow sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <Link href={language === 'en' ? '/' : `/${language}`} className="group flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-var(--events-color) via-var(--tourism-color) to-var(--hotels-colo
r) rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300 events-glow">
                <span className="text-white font-bold text-lg">🇮🇶</span>
              </div>
              <div>
                <span className="text-2xl font-bold text-white neon-glow" style={{ color: 'var(--text-primary)', textShadow: '0
0 10px var(--events-color)' }}>
                  IraqGuide
                </span>
                <div className="text-xs font-medium -mt-1" style={{ color: 'var(--text-secondary)' }}>{t('navigation.eventPlatfo
rm')}</div>
              </div>
            </Link>

            {/* Desktop Menu */}
            <div className="hidden md:flex items-center gap-8">
              <Link href={language === 'en' ? '/' : `/${language}`} className="font-medium transition-colors relative group" sty
le={{ color: 'var(--text-primary)' }}>
                {t('navigation.home')}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/events' : `/${language}/events`} className="font-medium transition-colors relati
ve group" style={{ color: 'var(--text-primary)' }}>
                {t('navigation.events')}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/hotels' : `/${language}/hotels`} className="font-medium transition-colors relati
ve group" style={{ color: 'var(--text-primary)' }}>
                Hotels
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--hotels-color)', boxShadow: '0 0 5px var(--hotels-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/restaurants' : `/${language}/restaurants`} className="font-medium transition-col
ors relative group" style={{ color: 'var(--text-primary)' }}>
                Restaurants
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--restaurants-color)', boxShadow: '0 0 5px var(--restaurants-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/tourism' : `/${language}/tourism`} className="font-medium transition-colors rela
tive group" style={{ color: 'var(--text-primary)' }}>
                Tourism
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--tourism-color)', boxShadow: '0 0 5px var(--tourism-color)' }}></span>
              </Link>
            </div>

            {/* User Menu */}
            <div className={`flex items-center gap-3 ${isRTL ? 'flex-row-reverse' : ''}`}>
              {/* Language Switcher */}
              <div className="relative group hidden sm:block" data-testid="language-switcher">
                <button className="flex items-center gap-2 px-3 py-2 font-medium transition-colors rounded-full" style={{ color:
 'var(--text-primary)' }}>
                  <span className="text-lg">🌐</span>
                  <span className="text-sm" suppressHydrationWarning>
                    {language === 'en' ? 'English' : language === 'ar' ? 'العربية' : 'کوردی'}
                  </span>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7-7 7-7" />
                  </svg>
                </button>
                <div className={`absolute ${isRTL ? 'left-0' : 'right-0'} top-full mt-1 rounded-lg min-w-[160px] opacity-0 invis
ible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50`} style={{ background: 'var(--bg-secondary)',
border: '1px solid var(--events-color)' }}>
                  <button
                    onClick={() => setLanguage('en' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'en' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇺🇸 English
                  </button>
                  <button
                    onClick={() => setLanguage('ar' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'ar' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇮🇶 العربية
                  </button>
                  <button
                    onClick={() => setLanguage('ku' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'ku' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇮🇶 کوردی
                  </button>
                </div>
              </div>

{/* Create Event Link styled as text pill (not a button) */}
              <Link
                href={session ? (language === 'en' ? '/dashboard' : `/${language}/dashboard`) : (language === 'en' ? '/register'
 : `/${language}/register`)}
                className="neon-button tourism tourism-glow"
                style={{ fontSize: '0.9rem', padding: '8px 16px' }}
              >
                <span>+</span>
                {t('navigation.createEvent')}
              </Link>

              {session ? (
                <div className="flex items-center gap-4">
                  <div className="hidden lg:flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify
-center">
                      <span className="text-white text-sm font-semibold">
                        {session.user?.name?.charAt(0) || session.user?.email?.charAt(0) || 'U'}
                      </span>
                    </div>
                    <div className="flex flex-col">
                      <span className="text-sm font-medium text-gray-800">
                        {session.user?.name || 'User'}
                      </span>
                      <span className="text-xs text-gray-500">
                        {session.user?.email}
                      </span>
                    </div>
                  </div>
<Link
                    href={language === 'en' ? '/dashboard' : `/${language}/dashboard`}
                    className="inline-block px-3 py-1.5 rounded-full bg-gray-900 text-white text-sm font-semibold hover:bg-gray-
800 transition-colors"
                  >
                    {t('navigation.dashboard')}
                  </Link>
                  <button
                    onClick={() => signOut()}
                    className="text-gray-600 hover:text-red-600 font-medium transition-colors hidden md:block"
                  >
                    {t('navigation.logout')}
                  </button>
                </div>
              ) : (
                <div className="flex items-center gap-3">
<Link
                    href={language === 'en' ? '/login' : `/${language}/login`}
                    className="inline-block px-4 py-1.5 rounded-full bg-gray-900 text-white text-sm font-semibold hover:bg-gray-
800 transition-colors"
                  >
                    {t('navigation.login')}
                  </Link>
                </div>
              )}

              {/* Mobile Menu Button */}
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="md:hidden text-gray-700 hover:text-purple-600 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              </button>
            </div>
          </div>

          {/* Mobile Menu */}
          <div className={`md:hidden py-4 border-t border-gray-100 bg-white/95 backdrop-blur-md ${isMenuOpen ? 'block' : 'hidden
'}`}>
            <div className="flex flex-col gap-4">
              <Link href={language === 'en' ? '/' : `/${language}`} className="text-gray-700 hover:text-purple-600 font-medium t
ransition-colors">
                  {t('navigation.home')}
                </Link>
                <Link href={language === 'en' ? '/events' : `/${language}/events`} className="text-gray-700 hover:text-purple-60
0 font-medium transition-colors">
                  {t('navigation.events')}
                </Link>
                <Link href={language === 'en' ? '/categories' : `/${language}/categories`} className="text-gray-700 hover:text-p
urple-600 font-medium transition-colors">
                  {t('navigation.categories')}
                </Link>
                <Link href={language === 'en' ? '/about' : `/${language}/about`} className="text-gray-700 hover:text-purple-600
font-medium transition-colors">
                  {t('navigation.about')}
                </Link>
                {!session && (
                  <div className="flex gap-3 pt-2">
                    <Link href={language === 'en' ? '/login' : `/${language}/login`} className="bg-gradient-to-r from-purple-600
 to-blue-600 text-white px-4 py-2 rounded-full font-semibold flex items-center gap-2">
                      <span>🔑</span>
I'll check src/app/components/EventCategoriesGrid for structure, and also look at locales.

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/[locale]/page.tsx
sed: can't read missinggold/src/app/[locale]/page.tsx: No such file or directory
I need to check missinggold/src/app/[locale]/page.tsx due to its unique folder.

root@f92a78a6a024:/workspace# sed -n '1,200p' 'missinggold/src/app/[locale]/page.tsx'
sed: can't read missinggold/src/app/[locale]/page.tsx: No such file or directory
I'll check the default route directory by listing contents in missinggold/src/app/[locale].

root@f92a78a6a024:/workspace# ls 'missinggold/src/app/[locale]'
categories  event  events  register
I’ll focus on defining 9 categories like events and restaurants, then search for data.

root@f92a78a6a024:/workspace# rg "Category" missinggold/src/app/components -n
missinggold/src/app/components/NeonHomepage.tsx
15:interface Category {
36:  const categories: Category[] = [

missinggold/src/app/components/EventDetailsModal.tsx
33:function translateCategoryLabel(categoryName?: string): string {
143:            {/* Category */}
151:                  {translateCategoryLabel(event.category)}

missinggold/src/app/components/SkeletonLoader.tsx
164: * Category Grid Skeleton - For category cards
166:export function CategoryGridSkeleton({ count = 5 }: { count?: number }) {
284:          <CategoryGridSkeleton count={5} />

missinggold/src/app/components/OptimizedNeonHomepage.tsx
31:interface Category {
66:function useCategories(): Category[] {
132: * Category Card Component - Memoized for performance
134:const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
174:CategoryCard.displayName = 'CategoryCard';
335:            <CategoryCard key={category.id} category={category} index={index} />
I'll search for "9" in the documentation and check src/app/page-neon.tsx.

root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/page-neon.tsx
"use client";

export const dynamic = 'force-dynamic';
import NeonHomepage from "./components/NeonHomepage";

export default function Home() {
  return <NeonHomepage />;
}root@f92a78a6a024:/workspace#
It looks like I need to gather a detailed app structure, focusing on categories like events and cafes.

}root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/cafes/page.tsx
"use client";

import Link from 'next/link';

export default function CafesPage() {
  const cafes = [
    {
      id: '1',
      name: 'Baghdad Coffee House',
      description: 'Traditional Iraqi coffee in a cozy atmosphere',
      rating: 4.6,
      priceRange: '$$',
      image: '☕',
      specialty: 'Turkish Coffee',
      location: 'Baghdad Old City'
    },
    {
      id: '2',
      name: 'Kurdish Mountain Cafe',
      description: 'Authentic Kurdish tea and sweets with mountain views',
      rating: 4.8,
      priceRange: '$',
      image: '🫖',
      specialty: 'Kurdish Tea',
      location: 'Erbil Hills'
    },
    {
      id: '3',
      name: 'Tigris River Cafe',
      description: 'Riverside cafe with fresh pastries and specialty drinks',
      rating: 4.5,
      priceRange: '$$',
      image: '🧁',
      specialty: 'Pastries & Desserts',
      location: 'Baghdad Riverside'
    },
    {
      id: '4',
      name: 'Modern Brew Co.',
      description: 'Contemporary cafe with international coffee blends',
      rating: 4.7,
      priceRange: '$$$',
      image: '🥤',
      specialty: 'Specialty Coffee',
      location: 'Erbil Center'
    }
  ];

  const cafeTypes = [
    { name: 'Traditional Coffee Houses', icon: '☕', count: 32, description: 'Authentic Iraqi coffee culture' },
    { name: 'Tea Gardens', icon: '🍵', count: 28, description: 'Kurdish tea traditions' },
    { name: 'Modern Cafes', icon: '🥤', count: 24, description: 'International coffee & vibes' },
    { name: 'Shisha Lounges', icon: '💨', count: 18, description: 'Relaxing hookah experience' },
    { name: 'Bakery Cafes', icon: '🥐', count: 22, description: 'Fresh pastries & coffee' },
    { name: 'Rooftop Cafes', icon: '🌆', count: 15, description: 'City views & coffee' }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 237, 78, 0.1)',
          border: '2px solid var(--cafes-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--cafes-color)',
            textShadow: '0 0 10px var(--cafes-color)',
            marginBottom: '16px'
          }}>
            ☕ Cafes
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Experience the rich coffee culture of Iraq & Kurdistan
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button cafes">
          ← Back to Home
        </Link>
      </div>

      {/* Featured Cafes Grid */}
      <div style={{
        marginBottom: '60px'
      }}>
        <h2 style={{
          textAlign: 'center',
          color: 'var(--cafes-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--cafes-color)'
        }}>
          Featured Cafes
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
          gap: '24px',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          {cafes.map((cafe) => (
            <div key={cafe.id} className="neon-card cafes cafes-glow">
              <div style={{ padding: '24px' }}>
                {/* Cafe Image/Icon */}
                <div style={{
                  width: '100%',
                  height: '200px',
                  background: 'linear-gradient(135deg, var(--cafes-color), var(--bg-secondary))',
                  borderRadius: '12px',
                  marginBottom: '20px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '4rem'
                }}>
                  {cafe.image}
                </div>

                {/* Cafe Info */}
                <h3 style={{
                  color: 'var(--text-primary)',
                  fontSize: '1.5rem',
                  marginBottom: '8px',
                  textShadow: '0 0 5px var(--cafes-color)'
                }}>
                  {cafe.name}
                </h3>

                <p style={{
                  color: 'var(--text-secondary)',
                  marginBottom: '16px',
                  lineHeight: '1.6'
                }}>
                  {cafe.description}
                </p>

                <div style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr',
                  gap: '12px',
                  marginBottom: '16px'
                }}>
                  <div>
                    <span style={{
                      color: 'var(--cafes-color)',
                      fontSize: '1.1rem',
                      fontWeight: 'bold'
                    }}>
                      ⭐ {cafe.rating}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--text-tertiary)',
                      fontSize: '0.9rem'
                    }}>
                      📍 {cafe.location}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--cafes-color)',
                      fontSize: '0.9rem',
                      fontWeight: '600'
                    }}>
                      ✨ {cafe.specialty}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--text-tertiary)',
                      fontSize: '0.9rem'
                    }}>
                      💰 {cafe.priceRange}
                    </span>
                  </div>
                </div>

                <div style={{
                  display: 'flex',
                  gap: '12px',
                  justifyContent: 'center'
root@f92a78a6a024:/workspace# sed -n '200,400p' missinggold/src/app/cafes/page.tsx
                  justifyContent: 'center'
                }}>
                  <button className="neon-button cafes" style={{
                    fontSize: '0.9rem',
                    padding: '8px 16px'
                  }}>
                    Visit Cafe
                  </button>
                  <button className="neon-button tourism" style={{
                    fontSize: '0.9rem',
                    padding: '8px 16px'
                  }}>
                    View Menu
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Cafe Types */}
      <div style={{
        marginTop: '60px',
        textAlign: 'center'
      }}>
        <h2 style={{
          color: 'var(--cafes-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--cafes-color)'
        }}>
          Explore Cafe Types
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
          gap: '24px',
          maxWidth: '1000px',
          margin: '0 auto'
        }}>
          {cafeTypes.map((type, index) => (
            <div
              key={index}
              className="neon-card cafes cafes-glow"
              style={{
                cursor: 'pointer',
                animationDelay: `${index * 0.1}s`,
                padding: '24px',
                textAlign: 'center',
                transition: 'all 0.3s ease'
              }}
            >
              <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
                {type.icon}
              </div>
              <h3 style={{
                color: 'var(--cafes-color)',
                fontSize: '1.3rem',
                fontWeight: '600',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--cafes-color)'
              }}>
                {type.name}
              </h3>
              <p style={{
                color: 'var(--text-secondary)',
                fontSize: '0.9rem',
                marginBottom: '12px'
              }}>
                {type.description}
              </p>
              <div style={{
                color: 'var(--text-tertiary)',
                fontSize: '0.8rem'
              }}>
                {type.count} places
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Coffee Culture Section */}
      <div style={{
        marginTop: '80px',
        textAlign: 'center'
      }}>
        <div className="neon-card tourism tourism-glow" style={{
          maxWidth: '800px',
          margin: '0 auto',
          padding: '40px'
        }}>
          <h2 style={{
            color: 'var(--tourism-color)',
            fontSize: '2.2rem',
            marginBottom: '20px',
            textShadow: '0 0 10px var(--tourism-color)'
          }}>
            ☕ Iraqi Coffee Culture
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.1rem',
            lineHeight: '1.8',
            marginBottom: '24px'
          }}>
            From traditional Baghdad coffee houses serving strong Turkish coffee to modern Kurdish tea gardens
            nestled in the mountains, Iraq and Kurdistan offer a rich tapestry of coffee and tea culture.
            Each cup tells a story of hospitality, tradition, and the timeless art of gathering over good drinks.
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button cafes">
              Learn More
            </button>
            <button className="neon-button restaurants">
              Try Local Dishes
            </button>
          </div>
        </div>
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card cafes cafes-glow" style={{
          maxWidth: '600px',
          margin: '0 auto',
          padding: '32px'
        }}>
          <h2 style={{
            color: 'var(--cafes-color)',
            fontSize: '2rem',
            marginBottom: '16px',
            textShadow: '0 0 10px var(--cafes-color)'
          }}>
            Own a Cafe?
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            marginBottom: '24px',
            fontSize: '1.1rem'
          }}>
            Join our platform and connect with coffee lovers across Iraq & Kurdistan
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button cafes">
              List Your Cafe
            </button>
            <button className="neon-button hotels">
              Explore Hotels
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}root@f92a78a6a024:/workspace#
I need to determine if the nine categories align with platform verticals like events and cafes.

}root@f92a78a6a024:/workspace# ls missinggold/src/app/venues
page.tsx
root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/venues/page.tsx
import MultiVenueHomepage from '../components/MultiVenueHomepage';

export default function VenuesPage() {
  return <MultiVenueHomepage />;
}

export const metadata = {
  title: 'Discover Iraq & Kurdistan - Events, Hotels, Restaurants & Activities',
  description: 'Complete platform for discovering events, booking hotels, finding restaurants, and exploring activities in Iraq
and Kurdistan Region.',
  keywords: 'Iraq, Kurdistan, events, hotels, restaurants, activities, travel, booking',
  openGraph: {
    title: 'Discover Iraq & Kurdistan - Complete Travel Platform',
    description: 'Events, Hotels, Restaurants & Activities all in one place',
    images: ['/og-venues.jpg'],
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Discover Iraq & Kurdistan - Complete Travel Platform',
    description: 'Events, Hotels, Restaurants & Activities all in one place',
  },
};root@f92a78a6a024:/workspace#
I need to explore the structure of the tourism page for categories and sub-sections.

};root@f92a78a6a024:/workspace# sed -n '1,200p' missinggold/src/app/tourism/page.tsx
"use client";

import Link from 'next/link';

export default function TourismPage() {
  const attractions = [
    {
      id: '1',
      name: 'Ancient Babylon',
      description: 'Explore the legendary ruins of one of history\'s greatest civilizations',
      rating: 4.9,
      category: 'Historical Site',
      image: '🏛️',
      location: 'Babylon, Iraq',
      duration: 'Full Day'
    },
    {
      id: '2',
      name: 'Kurdish Mountains',
      description: 'Breathtaking mountain landscapes and traditional villages',
      rating: 4.8,
      category: 'Nature & Adventure',
      image: '🏔️',
      location: 'Kurdistan Region',
      duration: '2-3 Days'
    },
    {
      id: '3',
      name: 'Marsh Arab Culture',
      description: 'Unique wetland ecosystem and ancient way of life',
      rating: 4.7,
      category: 'Cultural Experience',
      image: '🌾',
      location: 'Southern Iraq',
      duration: '1-2 Days'
    },
    {
      id: '4',
      name: 'Baghdad Museums',
      description: 'World-class artifacts and Iraqi heritage collections',
      rating: 4.6,
      category: 'Museums & Culture',
      image: '🏺',
      location: 'Baghdad',
      duration: 'Half Day'
    }
  ];

  const tourismCategories = [
    { name: 'Historical Sites', icon: '🏛️', count: 45, description: 'Ancient civilizations & monuments' },
    { name: 'Natural Wonders', icon: '🌄', count: 32, description: 'Mountains, rivers & landscapes' },
    { name: 'Cultural Experiences', icon: '🎭', count: 28, description: 'Local traditions & customs' },
    { name: 'Adventure Tours', icon: '🧗', count: 24, description: 'Outdoor activities & exploration' },
    { name: 'Religious Sites', icon: '🕌', count: 38, description: 'Sacred places & pilgrimage sites' },
    { name: 'City Tours', icon: '🏙️', count: 22, description: 'Urban exploration & city life' }
  ];

  const highlights = [
    {
      title: "Mesopotamian Heritage",
      description: "Walk through the cradle of civilization and discover 5,000 years of history",
      icon: "📜"
    },
    {
      title: "Kurdish Nature",
      description: "Experience pristine mountain landscapes and traditional mountain culture",
      icon: "🌲"
    },
    {
      title: "Tigris & Euphrates",
      description: "Explore the legendary rivers that shaped human civilization",
      icon: "🌊"
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(0, 240, 255, 0.1)',
          border: '2px solid var(--tourism-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--tourism-color)',
            textShadow: '0 0 10px var(--tourism-color)',
            marginBottom: '16px'
          }}>
            📸 Tourism
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Discover the wonders of Iraq & Kurdistan - Where history meets adventure
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button tourism">
          ← Back to Home
        </Link>
      </div>

      {/* Highlights Section */}
      <div style={{ marginBottom: '60px' }}>
        <h2 style={{
          textAlign: 'center',
          color: 'var(--tourism-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--tourism-color)'
        }}>
          Why Visit Iraq & Kurdistan?
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
          gap: '24px',
          maxWidth: '1000px',
          margin: '0 auto',
          marginBottom: '40px'
        }}>
          {highlights.map((highlight, index) => (
            <div key={index} className="neon-card tourism tourism-glow">
              <div style={{ padding: '24px', textAlign: 'center' }}>
                <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
                  {highlight.icon}
                </div>
                <h3 style={{
                  color: 'var(--tourism-color)',
                  fontSize: '1.5rem',
                  marginBottom: '12px',
                  textShadow: '0 0 5px var(--tourism-color)'
                }}>
                  {highlight.title}
                </h3>
                <p style={{
                  color: 'var(--text-secondary)',
                  lineHeight: '1.6'
                }}>
                  {highlight.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Featured Attractions */}
      <div style={{ marginBottom: '60px' }}>
        <h2 style={{
          textAlign: 'center',
          color: 'var(--tourism-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--tourism-color)'
        }}>
          Featured Attractions
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
          gap: '24px',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          {attractions.map((attraction) => (
            <div key={attraction.id} className="neon-card tourism tourism-glow">
              <div style={{ padding: '24px' }}>
                {/* Attraction Image/Icon */}
                <div style={{
                  width: '100%',
                  height: '200px',
                  background: 'linear-gradient(135deg, var(--tourism-color), var(--bg-secondary))',
                  borderRadius: '12px',
                  marginBottom: '20px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '4rem'
                }}>
                  {attraction.image}
                </div>

                {/* Attraction Info */}
                <h3 style={{
I'll keep going to gather more categories related to tourism.

root@f92a78a6a024:/workspace# sed -n '200,400p' missinggold/src/app/tourism/page.tsx
                <h3 style={{
                  color: 'var(--text-primary)',
                  fontSize: '1.5rem',
                  marginBottom: '8px',
                  textShadow: '0 0 5px var(--tourism-color)'
                }}>
                  {attraction.name}
                </h3>

                <p style={{
                  color: 'var(--text-secondary)',
                  marginBottom: '16px',
                  lineHeight: '1.6'
                }}>
                  {attraction.description}
                </p>

                <div style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr',
                  gap: '12px',
                  marginBottom: '16px'
                }}>
                  <div>
                    <span style={{
                      color: 'var(--tourism-color)',
                      fontSize: '1.1rem',
                      fontWeight: 'bold'
                    }}>
                      ⭐ {attraction.rating}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--text-tertiary)',
                      fontSize: '0.9rem'
                    }}>
                      📍 {attraction.location}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--tourism-color)',
                      fontSize: '0.9rem',
                      fontWeight: '600'
                    }}>
                      🎯 {attraction.category}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--text-tertiary)',
                      fontSize: '0.9rem'
                    }}>
                      ⏱️ {attraction.duration}
                    </span>
                  </div>
                </div>

                <div style={{
                  display: 'flex',
                  gap: '12px',
                  justifyContent: 'center'
                }}>
                  <button className="neon-button tourism" style={{
                    fontSize: '0.9rem',
                    padding: '8px 16px'
                  }}>
                    Learn More
                  </button>
                  <button className="neon-button events" style={{
                    fontSize: '0.9rem',
                    padding: '8px 16px'
                  }}>
                    Book Tour
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Tourism Categories */}
      <div style={{
        marginTop: '60px',
        textAlign: 'center'
      }}>
        <h2 style={{
          color: 'var(--tourism-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--tourism-color)'
        }}>
          Explore by Category
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
          gap: '24px',
          maxWidth: '1000px',
          margin: '0 auto'
        }}>
          {tourismCategories.map((category, index) => (
            <div
              key={index}
              className="neon-card tourism tourism-glow"
              style={{
                cursor: 'pointer',
                animationDelay: `${index * 0.1}s`,
                padding: '24px',
                textAlign: 'center',
                transition: 'all 0.3s ease'
              }}
            >
              <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
                {category.icon}
              </div>
              <h3 style={{
                color: 'var(--tourism-color)',
                fontSize: '1.3rem',
                fontWeight: '600',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--tourism-color)'
              }}>
                {category.name}
              </h3>
              <p style={{
                color: 'var(--text-secondary)',
                fontSize: '0.9rem',
                marginBottom: '12px'
              }}>
                {category.description}
              </p>
              <div style={{
                color: 'var(--text-tertiary)',
                fontSize: '0.8rem'
              }}>
                {category.count} places
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Travel Information */}
      <div style={{
        marginTop: '80px',
        textAlign: 'center'
      }}>
        <div className="neon-card events events-glow" style={{
          maxWidth: '800px',
          margin: '0 auto',
          padding: '40px'
        }}>
          <h2 style={{
            color: 'var(--events-color)',
            fontSize: '2.2rem',
            marginBottom: '20px',
            textShadow: '0 0 10px var(--events-color)'
          }}>
            🗺️ Plan Your Journey
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.1rem',
            lineHeight: '1.8',
            marginBottom: '24px'
          }}>
            Iraq and Kurdistan offer incredible diversity - from ancient Mesopotamian sites to Kurdish mountain
            adventures. Whether you&apos;re interested in history, culture, nature, or adventure, we&apos;ll help you
            discover the hidden gems of this remarkable region.
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button tourism">
              Travel Guide
            </button>
            <button className="neon-button hotels">
              Find Hotels
            </button>
            <button className="neon-button restaurants">
              Local Cuisine
            </button>
          </div>
        </div>
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card tourism tourism-glow" style={{
          maxWidth: '600px',
I think the user wants to capture full schema of categories—main and sub—for data collection. I'll list the categories and subcategories, possibly searching for a const categories = [ to find relevant files.

root@f92a78a6a024:/workspace# rg "const categories = \[" -g"*.tsx" missinggold/src -n
missinggold/src/app/categories/page.tsx
12:  const categories = [

missinggold/src/app/page-original.tsx
58:  const categories = [

missinggold/src/app/[locale]/categories/page.tsx
27:  const categories = [

missinggold/src/app/[locale]/events/page.tsx
61:  const categories = [
I'm checking the start of page-original.tsx to confirm it has 9 categories.

root@f92a78a6a024:/workspace# sed -n '1,160p' missinggold/src/app/page-original.tsx
"use client";

import Link from "next/link";
import React, { useState, useEffect } from "react";
import ImagePlaceholder from "./components/ImagePlaceholder";
import LazyImage from "./components/LazyImage";
import LoadingScreen from "./components/LoadingScreen";
import SearchSuggest from "./components/SearchSuggest";
import EventImage from "./components/EventImage";
import ResponsiveButton from "./components/ResponsiveButton";
import { trackCityScrollerImpression, trackCityScrollerSelect, trackCityScrollerSnap, trackPageView } from "../lib/analytics";
import CityScroller from "./components/CityScroller";
import { useNetworkStatus, useImagePreloader, usePerformanceMonitor } from "./hooks/usePerformance";
import { useTranslations } from "./hooks/useTranslations";
import { useLanguage } from "./components/LanguageProvider";

export default function Home() {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCity, setSelectedCity] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [showMainContent, setShowMainContent] = useState(false);
  const [events, setEvents] = useState<any[]>([]);

  // Performance and network hooks
  const { isOnline, connectionSpeed } = useNetworkStatus();
  const { preloadImages, isImageLoaded } = useImagePreloader();
  const performanceMetrics = usePerformanceMonitor();

  // Translation and language hooks
  const { t } = useTranslations();
  const { language, isRTL } = useLanguage();

  // Initialize filter states
  useEffect(() => {
    if (t && !selectedCity) {
      setSelectedCity(t('common.allCities'));
      setSelectedCategory(t('common.allCategories'));
    }
  }, [t, selectedCity]);

  // Use translated cities and categories
  const cities = [
    t('common.allCities'),
    t('cities.baghdad'),
    t('cities.basra'),
    t('cities.mosul'),
    t('cities.erbil'),
    t('cities.sulaymaniyah'),
    t('cities.duhok'),
    t('cities.kirkuk'),
    t('cities.anbar'),
    t('cities.najaf'),
    t('cities.karbala')
  ];

  const categories = [
    { name: t('common.allCategories'), icon: "🎉" },
    { name: t('categories.technologyInnovation'), icon: "💻" },
    { name: t('categories.businessNetworking'), icon: "💼" },
    { name: t('categories.musicConcerts'), icon: "🎵" },
    { name: t('categories.artsCulture'), icon: "🎨" },
    { name: t('categories.sportsFitness'), icon: "⚽" },
    { name: t('categories.foodDrink'), icon: "🍽️" },
    { name: t('categories.learningDevelopment'), icon: "📚" },
    { name: t('categories.healthWellness'), icon: "🏥" },
    { name: t('categories.communitySocial'), icon: "👥" },
    { name: t('categories.gamingEsports'), icon: "🎮" },
    { name: t('categories.spiritualReligious'), icon: "🕌" },
    { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦" },
    { name: t('categories.outdoorAdventure'), icon: "🏔️" },
    { name: t('categories.virtualEvents'), icon: "📱" },
    { name: t('categories.academicConferences'), icon: "🎓" }
  ];

  const heroSlides = [
    {
      id: 1,
      title: t('heroSlides.slide1.title'),
      subtitle: t('heroSlides.slide1.subtitle'),
      description: t('heroSlides.slide1.description'),
      gradient: "from-purple-900 via-blue-900 to-cyan-900",
      buttonText: t('hero.registerNow'),
      buttonColor: "from-yellow-400 via-orange-500 to-red-500",
      stats: [{ label: t('heroSlides.attendees'), value: "5K+", color: "text-yellow-400" }, { label: t('heroSlides.sessions'), v
alue: "100+", color: "text-cyan-400" }, { label: t('heroSlides.days'), value: "3", color: "text-purple-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "tech"
    },
    {
      id: 2,
      title: t('heroSlides.slide2.title'),
      subtitle: t('heroSlides.slide2.subtitle'),
      description: t('heroSlides.slide2.description'),
      gradient: "from-pink-900 via-purple-900 to-indigo-900",
      buttonText: t('hero.getTickets'),
      buttonColor: "from-pink-500 via-purple-500 to-indigo-500",
      stats: [{ label: t('heroSlides.artists'), value: "50+", color: "text-pink-400" }, { label: t('heroSlides.stages'), value:
"5", color: "text-purple-400" }, { label: t('heroSlides.hours'), value: "72", color: "text-indigo-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "music"
    },
    {
      id: 3,
      title: t('heroSlides.slide3.title'),
      subtitle: t('heroSlides.slide3.subtitle'),
      description: t('heroSlides.slide3.description'),
      gradient: "from-emerald-900 via-teal-900 to-cyan-900",
      buttonText: t('heroSlides.joinSummit'),
      buttonColor: "from-emerald-500 via-teal-500 to-cyan-500",
      stats: [{ label: t('heroSlides.leaders'), value: "200+", color: "text-emerald-400" }, { label: t('heroSlides.companies'),
value: "150+", color: "text-teal-400" }, { label: t('heroSlides.workshops'), value: "25", color: "text-cyan-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "business"
    },
    {
      id: 4,
      title: t('heroSlides.slide4.title'),
      subtitle: t('heroSlides.slide4.subtitle'),
      description: t('heroSlides.slide4.description'),
      gradient: "from-orange-900 via-red-900 to-pink-900",
      buttonText: t('heroSlides.exploreArt'),
      buttonColor: "from-orange-500 via-red-500 to-pink-500",
      stats: [{ label: t('heroSlides.artists'), value: "300+", color: "text-orange-400" }, { label: t('heroSlides.artworks'), va
lue: "1K+", color: "text-red-400" }, { label: t('heroSlides.galleries'), value: "15", color: "text-pink-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1549490349-8643362247b5?w=1920&h=1080&fit=crop&crop=center&auto=format
&q=80",
      category: "art"
    }
  ];

  // Initialize loading sequence
  useEffect(() => {
    // Simulate initial app loading (DOM ready, critical resources)
    const initTimer = setTimeout(() => {
      setIsLoading(false);
    }, 1500); // 1.5 seconds minimum loading time

    return () => clearTimeout(initTimer);
  }, []);

  // Handle loading completion
  const handleLoadingComplete = () => {
    // LoadingScreen handles its own completion, just make sure content is visible
    setShowMainContent(true);
  };

  // Preload critical images on fast connections
  useEffect(() => {
    if (connectionSpeed === 'fast' && isOnline) {
      // Preload hero carousel images (placeholder for now since we don't have real images)
      // In production, you would preload actual image URLs here
      const criticalImages: string[] = [
        // '/images/hero/tech-summit.jpg',
        // '/images/hero/music-festival.jpg',
        // etc...
      ];
      if (criticalImages.length > 0) {
        preloadImages(criticalImages);
      }
    }
  }, [connectionSpeed, isOnline, preloadImages]);

  // Auto-scroll carousel
I'm looking inside the page-original.tsx for "CategoryGrid" or any repeated categories.

root@f92a78a6a024:/workspace# rg "\[\n      \{ name" missinggold/src/app/page-original.tsx -n
rg: the literal "\n" is not allowed in a regex

Consider enabling multiline mode with the --multiline flag (or -U for short).
When multiline mode is enabled, new line characters can be matched.
I think I'll search for category-related sections using rg "categorySections" or rg "grid".

root@f92a78a6a024:/workspace# rg "Category" missinggold/src/app/page-original.tsx -n | head
20:  const [selectedCategory, setSelectedCategory] = useState('');
39:      setSelectedCategory(t('common.allCategories'));
191:  const getCategoryIcon = (category: string) => {
224:  const getCategoryTranslation = (category: string) => {
257:  const getEventImageCategory = (category: string) => {
601:                  onClick={() => setSelectedCategory(category.name)}
721:                        category={getEventImageCategory(event.category || "")}
725:                          {getCategoryIcon(event.category || "")} {getCategoryTranslation(event.category || "")}
I’ll look for any mention of “Nine” or “9” across the entire repo.

root@f92a78a6a024:/workspace# rg "nine" -n missinggold
The app has 16 categories, but the user asked for 9. I'll summarize these 9 from relevant files.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/categories/page.tsx | sed -n '1,80p'
     1  'use client';
     2
     3  import React from 'react';
     4  import Link from 'next/link';
     5  import { useTranslations } from "../hooks/useTranslations";
     6  import { useContentOverride } from "../hooks/useContent";
     7
     8  export default function CategoriesPage() {
     9    const { t } = useTranslations();
    10    const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');
    11
    12    const categories = [
    13      { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-pu
rple-500 to-pink-500' },
    14      { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescr
iptions.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
    15      { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescripti
ons.businessNetworking'), color: 'from-blue-500 to-cyan-500' },
    16      { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicC
oncerts'), color: 'from-pink-500 to-red-500' },
    17      { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCultur
e'), color: 'from-teal-500 to-blue-500' },
    18      { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sports
Fitness'), color: 'from-green-500 to-emerald-500' },
    19      { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), co
lor: 'from-yellow-500 to-orange-500' },
    20      { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescrip
tions.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
    21      { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.heal
thWellness'), color: 'from-emerald-500 to-teal-500' },
    22      { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.co
mmunitySocial'), color: 'from-orange-500 to-red-500' },
    23      { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gaming
Esports'), color: 'from-red-500 to-pink-500' },
    24      { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescripti
ons.spiritualReligious'), color: 'from-amber-500 to-yellow-500' },
    25      { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.family
Kids'), color: 'from-sky-500 to-blue-500' },
    26      { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.o
utdoorAdventure'), color: 'from-lime-500 to-green-500' },
    27      { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtua
lEvents'), color: 'from-slate-500 to-gray-500' },
    28      { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescrip
tions.academicConferences'), color: 'from-rose-500 to-red-500' }
    29    ];
    30
    31    return (
    32      <div className="min-h-screen bg-gray-50 py-8">
    33        {/* Hero Section */}
    34        <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 py-16">
    35          <div className="max-w-7xl mx-auto px-4 text-center">
    36            <h1 className="text-5xl font-bold text-white mb-6">{t('categoriesPage.title')}</h1>
    37            <p className="text-xl text-white/90 max-w-3xl mx-auto">
    38              {categoriesSubtitle?.value || t('categoriesPage.subtitle')}
    39            </p>
    40          </div>
    41        </div>
    42
    43        {/* Categories Grid */}
    44        <div className="max-w-7xl mx-auto px-4 py-16">
    45          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
    46            {categories.map((category, index) => (
    47              <div
    48                key={category.name}
    49                className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover
:scale-105 group"
    50              >
    51                <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-cente
r mb-6 group-hover:scale-110 transition-transform duration-300`}>
    52                  <span className="text-3xl">{category.icon}</span>
    53                </div>
    54
    55                <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-purple-600 transition-colors">
    56                  {category.name}
    57                </h3>
    58
    59                <p className="text-gray-600 leading-relaxed mb-6">
    60                  {category.description}
    61                </p>
    62
    63                <Link
    64                  href={`/events?category=${encodeURIComponent(category.key)}`}
    65                  className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 round
ed-full font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
    66                >
    67                  <span>{t('homepage.exploreEvents')}</span>
    68                  <span>→</span>
    69                </Link>
    70              </div>
    71            ))}
    72          </div>
    73        </div>
    74
    75        {/* CTA Section */}
    76        <div className="bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 py-16">
    77          <div className="max-w-4xl mx-auto px-4 text-center">
    78            <h2 className="text-4xl font-bold text-white mb-6">
    79              {t('categoriesPage.ctaTitle')}
    80            </h2>
I already have the translation file, but I'll look for subcategory arrays like in events.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/restaurants/page.tsx | sed -n '150,260p'
   150                      color: 'var(--text-tertiary)',
   151                      fontSize: '0.9rem'
   152                    }}>
   153                      📍 {restaurant.location}
   154                    </span>
   155                  </div>
   156                  <div>
   157                    <span style={{
   158                      color: 'var(--restaurants-color)',
   159                      fontSize: '0.9rem',
   160                      fontWeight: '600'
   161                    }}>
   162                      🍴 {restaurant.cuisine}
   163                    </span>
   164                  </div>
   165                  <div>
   166                    <span style={{
   167                      color: 'var(--text-tertiary)',
   168                      fontSize: '0.9rem'
   169                    }}>
   170                      💰 {restaurant.priceRange}
   171                    </span>
   172                  </div>
   173                </div>
   174
   175                <div style={{
   176                  display: 'flex',
   177                  gap: '12px',
   178                  justifyContent: 'center'
   179                }}>
   180                  <button className="neon-button restaurants" style={{
   181                    fontSize: '0.9rem',
   182                    padding: '8px 16px'
   183                  }}>
   184                    View Menu
   185                  </button>
   186                  <button className="neon-button tourism" style={{
   187                    fontSize: '0.9rem',
   188                    padding: '8px 16px'
   189                  }}>
   190                    Reserve Table
   191                  </button>
   192                </div>
   193              </div>
   194            </div>
   195          ))}
   196        </div>
   197
   198        {/* Food Categories */}
   199        <div style={{
   200          marginTop: '60px',
   201          textAlign: 'center'
   202        }}>
   203          <h2 style={{
   204            color: 'var(--restaurants-color)',
   205            fontSize: '2.5rem',
   206            marginBottom: '32px',
   207            textShadow: '0 0 10px var(--restaurants-color)'
   208          }}>
   209            Browse by Cuisine
   210          </h2>
   211
   212          <div style={{
   213            display: 'grid',
   214            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
   215            gap: '20px',
   216            maxWidth: '800px',
   217            margin: '0 auto'
   218          }}>
   219            {[
   220              { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
   221              { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
   222              { name: 'Middle Eastern', icon: '🧆', count: 15 },
   223              { name: 'Seafood', icon: '🦐', count: 12 },
   224              { name: 'International', icon: '🍝', count: 20 },
   225              { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
   226            ].map((cuisine, index) => (
   227              <div
   228                key={index}
   229                className="category-icon restaurants restaurants-glow"
   230                style={{
   231                  cursor: 'pointer',
   232                  animationDelay: `${index * 0.1}s`
   233                }}
   234              >
   235                <div style={{ fontSize: '2.5rem', marginBottom: '8px' }}>
   236                  {cuisine.icon}
   237                </div>
   238                <div style={{
   239                  color: 'var(--restaurants-color)',
   240                  fontWeight: '600',
   241                  marginBottom: '4px'
   242                }}>
   243                  {cuisine.name}
   244                </div>
   245                <div style={{
   246                  color: 'var(--text-tertiary)',
   247                  fontSize: '0.9rem'
   248                }}>
   249                  {cuisine.count} places
   250                </div>
   251              </div>
   252            ))}
   253          </div>
   254        </div>
   255
   256        {/* Call to Action */}
   257        <div style={{
   258          textAlign: 'center',
   259          marginTop: '60px',
   260          padding: '40px 20px'
I need to gather line numbers for cafeTypes and other subcategories like hotels.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/cafes/page.tsx | sed -n '60,220p'
    60        {/* Header */}
    61        <div style={{
    62          textAlign: 'center',
    63          marginBottom: '40px',
    64          padding: '40px 20px'
    65        }}>
    66          <div style={{
    67            display: 'inline-block',
    68            background: 'rgba(255, 237, 78, 0.1)',
    69            border: '2px solid var(--cafes-color)',
    70            borderRadius: '15px',
    71            padding: '24px',
    72            backdropFilter: 'blur(10px)'
    73          }}>
    74            <h1 style={{
    75              fontSize: '3rem',
    76              color: 'var(--cafes-color)',
    77              textShadow: '0 0 10px var(--cafes-color)',
    78              marginBottom: '16px'
    79            }}>
    80              ☕ Cafes
    81            </h1>
    82            <p style={{
    83              color: 'var(--text-secondary)',
    84              fontSize: '1.2rem'
    85            }}>
    86              Experience the rich coffee culture of Iraq & Kurdistan
    87            </p>
    88          </div>
    89        </div>
    90
    91        {/* Back Button */}
    92        <div style={{ marginBottom: '32px' }}>
    93          <Link href="/" className="neon-button cafes">
    94            ← Back to Home
    95          </Link>
    96        </div>
    97
    98        {/* Featured Cafes Grid */}
    99        <div style={{
   100          marginBottom: '60px'
   101        }}>
   102          <h2 style={{
   103            textAlign: 'center',
   104            color: 'var(--cafes-color)',
   105            fontSize: '2.5rem',
   106            marginBottom: '32px',
   107            textShadow: '0 0 10px var(--cafes-color)'
   108          }}>
   109            Featured Cafes
   110          </h2>
   111
   112          <div style={{
   113            display: 'grid',
   114            gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
   115            gap: '24px',
   116            maxWidth: '1200px',
   117            margin: '0 auto'
   118          }}>
   119            {cafes.map((cafe) => (
   120              <div key={cafe.id} className="neon-card cafes cafes-glow">
   121                <div style={{ padding: '24px' }}>
   122                  {/* Cafe Image/Icon */}
   123                  <div style={{
   124                    width: '100%',
   125                    height: '200px',
   126                    background: 'linear-gradient(135deg, var(--cafes-color), var(--bg-secondary))',
   127                    borderRadius: '12px',
   128                    marginBottom: '20px',
   129                    display: 'flex',
   130                    alignItems: 'center',
   131                    justifyContent: 'center',
   132                    fontSize: '4rem'
   133                  }}>
   134                    {cafe.image}
   135                  </div>
   136
   137                  {/* Cafe Info */}
   138                  <h3 style={{
   139                    color: 'var(--text-primary)',
   140                    fontSize: '1.5rem',
   141                    marginBottom: '8px',
   142                    textShadow: '0 0 5px var(--cafes-color)'
   143                  }}>
   144                    {cafe.name}
   145                  </h3>
   146
   147                  <p style={{
   148                    color: 'var(--text-secondary)',
   149                    marginBottom: '16px',
   150                    lineHeight: '1.6'
   151                  }}>
   152                    {cafe.description}
   153                  </p>
   154
   155                  <div style={{
   156                    display: 'grid',
   157                    gridTemplateColumns: '1fr 1fr',
   158                    gap: '12px',
   159                    marginBottom: '16px'
   160                  }}>
   161                    <div>
   162                      <span style={{
   163                        color: 'var(--cafes-color)',
   164                        fontSize: '1.1rem',
   165                        fontWeight: 'bold'
   166                      }}>
   167                        ⭐ {cafe.rating}
   168                      </span>
   169                    </div>
   170                    <div>
   171                      <span style={{
   172                        color: 'var(--text-tertiary)',
   173                        fontSize: '0.9rem'
   174                      }}>
   175                        📍 {cafe.location}
   176                      </span>
   177                    </div>
   178                    <div>
   179                      <span style={{
   180                        color: 'var(--cafes-color)',
   181                        fontSize: '0.9rem',
   182                        fontWeight: '600'
   183                      }}>
   184                        ✨ {cafe.specialty}
   185                      </span>
   186                    </div>
   187                    <div>
   188                      <span style={{
   189                        color: 'var(--text-tertiary)',
   190                        fontSize: '0.9rem'
   191                      }}>
   192                        💰 {cafe.priceRange}
   193                      </span>
   194                    </div>
   195                  </div>
   196
   197                  <div style={{
   198                    display: 'flex',
   199                    gap: '12px',
   200                    justifyContent: 'center'
   201                  }}>
   202                    <button className="neon-button cafes" style={{
   203                      fontSize: '0.9rem',
   204                      padding: '8px 16px'
   205                    }}>
   206                      Visit Cafe
   207                    </button>
   208                    <button className="neon-button tourism" style={{
   209                      fontSize: '0.9rem',
   210                      padding: '8px 16px'
   211                    }}>
   212                      View Menu
   213                    </button>
   214                  </div>
   215                </div>
   216              </div>
   217            ))}
   218          </div>
   219        </div>
   220
Let's pinpoint where cafeTypes is defined and move ahead from there.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/cafes/page.tsx | sed -n '220,320p'
   220
   221        {/* Cafe Types */}
   222        <div style={{
   223          marginTop: '60px',
   224          textAlign: 'center'
   225        }}>
   226          <h2 style={{
   227            color: 'var(--cafes-color)',
   228            fontSize: '2.5rem',
   229            marginBottom: '32px',
   230            textShadow: '0 0 10px var(--cafes-color)'
   231          }}>
   232            Explore Cafe Types
   233          </h2>
   234
   235          <div style={{
   236            display: 'grid',
   237            gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
   238            gap: '24px',
   239            maxWidth: '1000px',
   240            margin: '0 auto'
   241          }}>
   242            {cafeTypes.map((type, index) => (
   243              <div
   244                key={index}
   245                className="neon-card cafes cafes-glow"
   246                style={{
   247                  cursor: 'pointer',
   248                  animationDelay: `${index * 0.1}s`,
   249                  padding: '24px',
   250                  textAlign: 'center',
   251                  transition: 'all 0.3s ease'
   252                }}
   253              >
   254                <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
   255                  {type.icon}
   256                </div>
   257                <h3 style={{
   258                  color: 'var(--cafes-color)',
   259                  fontSize: '1.3rem',
   260                  fontWeight: '600',
   261                  marginBottom: '8px',
   262                  textShadow: '0 0 5px var(--cafes-color)'
   263                }}>
   264                  {type.name}
   265                </h3>
   266                <p style={{
   267                  color: 'var(--text-secondary)',
   268                  fontSize: '0.9rem',
   269                  marginBottom: '12px'
   270                }}>
   271                  {type.description}
   272                </p>
   273                <div style={{
   274                  color: 'var(--text-tertiary)',
   275                  fontSize: '0.8rem'
   276                }}>
   277                  {type.count} places
   278                </div>
   279              </div>
   280            ))}
   281          </div>
   282        </div>
   283
   284        {/* Coffee Culture Section */}
   285        <div style={{
   286          marginTop: '80px',
   287          textAlign: 'center'
   288        }}>
   289          <div className="neon-card tourism tourism-glow" style={{
   290            maxWidth: '800px',
   291            margin: '0 auto',
   292            padding: '40px'
   293          }}>
   294            <h2 style={{
   295              color: 'var(--tourism-color)',
   296              fontSize: '2.2rem',
   297              marginBottom: '20px',
   298              textShadow: '0 0 10px var(--tourism-color)'
   299            }}>
   300              ☕ Iraqi Coffee Culture
   301            </h2>
   302            <p style={{
   303              color: 'var(--text-secondary)',
   304              fontSize: '1.1rem',
   305              lineHeight: '1.8',
   306              marginBottom: '24px'
   307            }}>
   308              From traditional Baghdad coffee houses serving strong Turkish coffee to modern Kurdish tea gardens
   309              nestled in the mountains, Iraq and Kurdistan offer a rich tapestry of coffee and tea culture.
   310              Each cup tells a story of hospitality, tradition, and the timeless art of gathering over good drinks.
   311            </p>
   312            <div style={{
   313              display: 'flex',
   314              gap: '16px',
   315              justifyContent: 'center',
   316              flexWrap: 'wrap'
   317            }}>
   318              <button className="neon-button cafes">
   319                Learn More
   320              </button>
I'll check the first 60 lines to find where the const cafeTypes is defined.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/cafes/page.tsx | sed -n '1,60p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function CafesPage() {
     6    const cafes = [
     7      {
     8        id: '1',
     9        name: 'Baghdad Coffee House',
    10        description: 'Traditional Iraqi coffee in a cozy atmosphere',
    11        rating: 4.6,
    12        priceRange: '$$',
    13        image: '☕',
    14        specialty: 'Turkish Coffee',
    15        location: 'Baghdad Old City'
    16      },
    17      {
    18        id: '2',
    19        name: 'Kurdish Mountain Cafe',
    20        description: 'Authentic Kurdish tea and sweets with mountain views',
    21        rating: 4.8,
    22        priceRange: '$',
    23        image: '🫖',
    24        specialty: 'Kurdish Tea',
    25        location: 'Erbil Hills'
    26      },
    27      {
    28        id: '3',
    29        name: 'Tigris River Cafe',
    30        description: 'Riverside cafe with fresh pastries and specialty drinks',
    31        rating: 4.5,
    32        priceRange: '$$',
    33        image: '🧁',
    34        specialty: 'Pastries & Desserts',
    35        location: 'Baghdad Riverside'
    36      },
    37      {
    38        id: '4',
    39        name: 'Modern Brew Co.',
    40        description: 'Contemporary cafe with international coffee blends',
    41        rating: 4.7,
    42        priceRange: '$$$',
    43        image: '🥤',
    44        specialty: 'Specialty Coffee',
    45        location: 'Erbil Center'
    46      }
    47    ];
    48
    49    const cafeTypes = [
    50      { name: 'Traditional Coffee Houses', icon: '☕', count: 32, description: 'Authentic Iraqi coffee culture' },
    51      { name: 'Tea Gardens', icon: '🍵', count: 28, description: 'Kurdish tea traditions' },
    52      { name: 'Modern Cafes', icon: '🥤', count: 24, description: 'International coffee & vibes' },
    53      { name: 'Shisha Lounges', icon: '💨', count: 18, description: 'Relaxing hookah experience' },
    54      { name: 'Bakery Cafes', icon: '🥐', count: 22, description: 'Fresh pastries & coffee' },
    55      { name: 'Rooftop Cafes', icon: '🌆', count: 15, description: 'City views & coffee' }
    56    ];
    57
    58    return (
    59      <div className="min-h-screen" style={{ padding: '20px' }}>
    60        {/* Header */}
I need to gather categories related to tourism, similar to previous ones.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/tourism/page.tsx | sed -n '1,80p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function TourismPage() {
     6    const attractions = [
     7      {
     8        id: '1',
     9        name: 'Ancient Babylon',
    10        description: 'Explore the legendary ruins of one of history\'s greatest civilizations',
    11        rating: 4.9,
    12        category: 'Historical Site',
    13        image: '🏛️',
    14        location: 'Babylon, Iraq',
    15        duration: 'Full Day'
    16      },
    17      {
    18        id: '2',
    19        name: 'Kurdish Mountains',
    20        description: 'Breathtaking mountain landscapes and traditional villages',
    21        rating: 4.8,
    22        category: 'Nature & Adventure',
    23        image: '🏔️',
    24        location: 'Kurdistan Region',
    25        duration: '2-3 Days'
    26      },
    27      {
    28        id: '3',
    29        name: 'Marsh Arab Culture',
    30        description: 'Unique wetland ecosystem and ancient way of life',
    31        rating: 4.7,
    32        category: 'Cultural Experience',
    33        image: '🌾',
    34        location: 'Southern Iraq',
    35        duration: '1-2 Days'
    36      },
    37      {
    38        id: '4',
    39        name: 'Baghdad Museums',
    40        description: 'World-class artifacts and Iraqi heritage collections',
    41        rating: 4.6,
    42        category: 'Museums & Culture',
    43        image: '🏺',
    44        location: 'Baghdad',
    45        duration: 'Half Day'
    46      }
    47    ];
    48
    49    const tourismCategories = [
    50      { name: 'Historical Sites', icon: '🏛️', count: 45, description: 'Ancient civilizations & monuments' },
    51      { name: 'Natural Wonders', icon: '🌄', count: 32, description: 'Mountains, rivers & landscapes' },
    52      { name: 'Cultural Experiences', icon: '🎭', count: 28, description: 'Local traditions & customs' },
    53      { name: 'Adventure Tours', icon: '🧗', count: 24, description: 'Outdoor activities & exploration' },
    54      { name: 'Religious Sites', icon: '🕌', count: 38, description: 'Sacred places & pilgrimage sites' },
    55      { name: 'City Tours', icon: '🏙️', count: 22, description: 'Urban exploration & city life' }
    56    ];
    57
    58    const highlights = [
    59      {
    60        title: "Mesopotamian Heritage",
    61        description: "Walk through the cradle of civilization and discover 5,000 years of history",
    62        icon: "📜"
    63      },
    64      {
    65        title: "Kurdish Nature",
    66        description: "Experience pristine mountain landscapes and traditional mountain culture",
    67        icon: "🌲"
    68      },
    69      {
    70        title: "Tigris & Euphrates",
    71        description: "Explore the legendary rivers that shaped human civilization",
    72        icon: "🌊"
    73      }
    74    ];
    75
    76    return (
    77      <div className="min-h-screen" style={{ padding: '20px' }}>
    78        {/* Header */}
    79        <div style={{
    80          textAlign: 'center',
It looks like I need to gather features, skipping subcategories and adding MultiVenueHomepage tabs.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/components/MultiVenueHomepage.tsx | sed -n '1,80p'
     1  'use client';
     2
     3  import { useState, useEffect } from 'react';
     4  import Image from 'next/image';
     5  import Link from 'next/link';
     6
     7  interface Venue {
     8    id: string;
     9    publicId: string;
    10    type: 'EVENT' | 'HOTEL' | 'RESTAURANT' | 'ACTIVITY' | 'SERVICE';
    11    title: string;
    12    description: string;
    13    location: string;
    14    city: string;
    15    category?: string;
    16    priceRange?: string;
    17    imageUrl?: string;
    18    featured: boolean;
    19    verified: boolean;
    20    cuisineType?: string;
    21    eventDate?: string;
    22    amenities?: string[];
    23  }
    24
    25  export default function MultiVenueHomepage() {
    26    const [activeTab, setActiveTab] = useState<string>('all');
    27    const [venues, setVenues] = useState<Venue[]>([]);
    28    const [loading, setLoading] = useState(true);
    29
    30    const tabs = [
    31      { id: 'all', label: 'All', icon: '🌟' },
    32      { id: 'EVENT', label: 'Events', icon: '🎉' },
    33      { id: 'HOTEL', label: 'Hotels', icon: '🏨' },
    34      { id: 'RESTAURANT', label: 'Restaurants', icon: '🍽️' },
    35      { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
    36    ];
    37
    38    useEffect(() => {
    39      fetchVenues();
    40    }, [activeTab]);
    41
    42    const fetchVenues = async () => {
    43      setLoading(true);
    44      try {
    45        const params = new URLSearchParams();
    46        if (activeTab !== 'all') {
    47          params.set('type', activeTab);
    48        }
    49        params.set('locale', 'en'); // TODO: Get from context
    50
    51        const response = await fetch(`/api/venues?${params}`);
    52        const data = await response.json();
    53
    54        if (data.success) {
    55          setVenues(data.venues || []);
    56        }
    57      } catch (error) {
    58        console.error('Error fetching venues:', error);
    59      } finally {
    60        setLoading(false);
    61      }
    62    };
    63
    64    const getVenueTypeIcon = (type: string) => {
    65      switch (type) {
    66        case 'EVENT': return '🎉';
    67        case 'HOTEL': return '🏨';
    68        case 'RESTAURANT': return '🍽️';
    69        case 'ACTIVITY': return '🎯';
    70        case 'SERVICE': return '🛎️';
    71        default: return '📍';
    72      }
    73    };
    74
    75    const formatPrice = (priceRange?: string) => {
    76      if (!priceRange) return null;
    77      return priceRange;
    78    };
    79
    80    return (
I think the user is asking for key categories, so I'll list 9 prime ones from the app's existing data like Events, Hotels, Restaurants, and Tourism. I'll also mention the data structure in relevant JSON files and highlight translation for marketing purposes. Additionally, I'll reference other marketing materials like messages/en.json.

I’ll check the marketing strategy document for relevant citations, especially regarding segmentation details.

root@f92a78a6a024:/workspace# head -n 40 missinggold/MARKETING_REVENUE_STRATEGY.md
# 🚀 EVENTRA: COMPREHENSIVE MARKETING & REVENUE STRATEGY
## Iraq Launch → Global Expansion Roadmap

---

## 🎯 **EXECUTIVE SUMMARY**

**Mission**: Launch Eventra as the dominant event platform in Iraq, then rapidly scale across the Middle East using AI-powered a
utomation and intelligent localization.

**Strategy**: Start with Iraq's underserved Kurdish and Arabic markets, build automated revenue streams, then replicate the mode
l across 20+ countries with minimal manual intervention.

**Goal**: $10M ARR by Year 2, $50M ARR by Year 3, across 10+ countries.

---

## 🌍 **INTELLIGENT LOCALIZATION STRATEGY**

### **🧠 AI-POWERED GEO-LANGUAGE DETECTION**

#### **Smart Language Selection System**
```javascript
// Auto-detect user's optimal language
const detectOptimalLanguage = (userLocation, browserLang, userHistory) => {
  // Priority order:
  1. User's saved preference (highest priority)
  2. Geo-location + cultural mapping
  3. Browser language detection
  4. Fallback to region default

  // Iraq Example:
  Baghdad → Arabic (default)
  Erbil/Sulaymaniyah → Kurdish (default)
  Tourist areas → English option prominent
}
```

#### **Geo-Cultural Intelligence Map**
```
IRAQ LOCALIZATION:
🏙️ Baghdad: Arabic (primary), English (business)
I'll summarize the marketing structure and categories with relevant citations, like for events and cafes.

root@f92a78a6a024:/workspace# nl -ba missinggold/public/data/events.json | head -n 40
     1  [
     2    {
     3      "id": "1",
     4      "publicId": "ai-summit-2025",
     5      "title": "AI Innovation Summit",
     6      "description": "Explore AI and machine learning breakthroughs with talks, workshops, and networking.",
     7      "date": "2025-10-10T10:00:00Z",
     8      "location": "Baghdad Tech Center, Baghdad",
     9      "category": "Technology & Innovation",
    10      "price": 50,
    11      "isFree": false,
    12      "imageUrl": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
    13      "user": { "name": "Tech Events Iraq", "email": "tech@iraqevents.com" }
    14    },
    15    {
    16      "id": "2",
    17      "publicId": "music-festival-erbil",
    18      "title": "Kurdish Music Festival",
    19      "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary artists.",
    20      "date": "2025-10-15T18:00:00Z",
    21      "location": "Citadel Park, Erbil",
    22      "category": "Music & Concerts",
    23      "price": 0,
    24      "isFree": true,
    25      "imageUrl": "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
    26      "user": { "name": "Kurdistan Arts Council", "email": "arts@kurdistan.org" }
    27    },
    28    {
    29      "id": "3",
    30      "publicId": "business-workshop-basra",
    31      "title": "Business Leadership Workshop",
    32      "description": "Learn essential leadership skills and networking strategies for growth in the Middle East.",
    33      "date": "2025-10-20T09:00:00Z",
    34      "location": "Business District, Basra",
    35      "category": "Business",
    36      "price": 75,
    37      "isFree": false,
    38      "imageUrl": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
    39      "user": { "name": "Business Development Iraq", "email": "business@iraq.com" }
    40    },
I'll summarize platform structure, categories, and features, with citations for clarity.

root@f92a78a6a024:/workspace# nl -ba missinggold/messages/en.json | sed -n '308,332p'
   308    "categoryDescriptions": {
   309      "all": "Discover all types of events happening around you",
   310      "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
   311      "businessNetworking": "Networking events, professional meetups, and business conferences",
   312      "musicConcerts": "Live music, concerts, and musical performances",
   313      "artsCulture": "Art exhibitions, cultural events, and creative workshops",
   314      "sportsFitness": "Sports events, fitness classes, and athletic competitions",
   315      "foodDrink": "Culinary events, food festivals, and dining experiences",
   316      "learningDevelopment": "Educational workshops, skill development, and training sessions",
   317      "healthWellness": "Health seminars, wellness workshops, and medical events",
   318      "communitySocial": "Social gatherings, community events, and meetups",
   319      "gamingEsports": "Gaming tournaments, esports competitions, and gaming meetups",
   320      "spiritualReligious": "Spiritual gatherings, religious events, and faith-based meetings",
   321      "familyKids": "Family-friendly events, children's activities, and parenting workshops",
   322      "outdoorAdventure": "Outdoor activities, adventure sports, and nature experiences",
   323      "virtualEvents": "Online events, webinars, and virtual conferences",
   324      "academicConferences": "Academic conferences, research presentations, and scholarly meetings"
   325    },
   326    "hero": {
   327      "liveEventPlatform": "Live Event Platform",
   328      "registerNow": "Register Now",
   329      "getTickets": "Get Tickets",
   330      "joinSummit": "Join Summit",
   331      "exploreArt": "Explore Art",
   332      "eventStartsIn": "Event Starts In",
I'll use nl to reference the marketing document lines.

root@f92a78a6a024:/workspace# nl -ba missinggold/MARKETING_REVENUE_STRATEGY.md | sed -n '1,40p'
     1  # 🚀 EVENTRA: COMPREHENSIVE MARKETING & REVENUE STRATEGY
     2  ## Iraq Launch → Global Expansion Roadmap
     3
     4  ---
     5
     6  ## 🎯 **EXECUTIVE SUMMARY**
     7
     8  **Mission**: Launch Eventra as the dominant event platform in Iraq, then rapidly scale across the Middle East using AI-p
owered automation and intelligent localization.
     9
    10  **Strategy**: Start with Iraq's underserved Kurdish and Arabic markets, build automated revenue streams, then replicate
the model across 20+ countries with minimal manual intervention.
    11
    12  **Goal**: $10M ARR by Year 2, $50M ARR by Year 3, across 10+ countries.
    13
    14  ---
    15
    16  ## 🌍 **INTELLIGENT LOCALIZATION STRATEGY**
    17
    18  ### **🧠 AI-POWERED GEO-LANGUAGE DETECTION**
    19
    20  #### **Smart Language Selection System**
    21  ```javascript
    22  // Auto-detect user's optimal language
    23  const detectOptimalLanguage = (userLocation, browserLang, userHistory) => {
    24    // Priority order:
    25    1. User's saved preference (highest priority)
    26    2. Geo-location + cultural mapping
    27    3. Browser language detection
    28    4. Fallback to region default
    29
    30    // Iraq Example:
    31    Baghdad → Arabic (default)
    32    Erbil/Sulaymaniyah → Kurdish (default)
    33    Tourist areas → English option prominent
    34  }
    35  ```
    36
    37  #### **Geo-Cultural Intelligence Map**
    38  ```
    39  IRAQ LOCALIZATION:
    40  🏙️ Baghdad: Arabic (primary), English (business)
I'll break down the app structure, citing files like src/app and src/app/page.tsx.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/page.tsx | sed -n '1,40p'
     1  ﻿"use client";
     2
     3  import MultiVenueHomepage from "./components/MultiVenueHomepage";
     4  import Navigation from "./components/Navigation";
     5
     6  /**
     7   * Home Page - Multi-Venue Platform
     8   *
     9   * Features:
    10   * - Events, Hotels, Restaurants, Activities, Services
    11   * - Tabbed navigation
    12   * - Venue listings
    13   */
    14
    15  export default function Home() {
    16    return (
    17      <>
    18        <Navigation />
    19        <MultiVenueHomepage />
    20      </>
    21    );
    22  }
I'll include Navigation and key links, and also mention the events page filter categories.

root@f92a78a6a024:/workspace# nl -ba 'missinggold/src/app/[locale]/events/page.tsx' | sed -n '61,90p'
    61    const categories = [
    62      { name: t('common.allCategories'), icon: "🎉", key: 'all' },
    63      { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
    64      { name: t('categories.businessNetworking'), icon: "💼", key: 'businessNetworking' },
    65      { name: t('categories.musicConcerts'), icon: "🎵", key: 'musicConcerts' },
    66      { name: t('categories.artsCulture'), icon: "🎨", key: 'artsCulture' },
    67      { name: t('categories.sportsFitness'), icon: "⚽", key: 'sportsFitness' },
    68      { name: t('categories.foodDrink'), icon: "🍽️", key: 'foodDrink' },
    69      { name: t('categories.learningDevelopment'), icon: "📚", key: 'learningDevelopment' },
    70      { name: t('categories.healthWellness'), icon: "🏥", key: 'healthWellness' },
    71      { name: t('categories.communitySocial'), icon: "👥", key: 'communitySocial' },
    72      { name: t('categories.gamingEsports'), icon: "🎮", key: 'gamingEsports' },
    73      { name: t('categories.spiritualReligious'), icon: "🕌", key: 'spiritualReligious' },
    74      { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦", key: 'familyKids' },
    75      { name: t('categories.outdoorAdventure'), icon: "🏔️", key: 'outdoorAdventure' },
    76      { name: t('categories.virtualEvents'), icon: "📱", key: 'virtualEvents' },
    77      { name: t('categories.academicConferences'), icon: "🎓", key: 'academicConferences' }
    78    ];
    79
    80    // Use translated cities
    81    const cities = [
    82      t('common.allCities'),
    83      t('cities.baghdad'),
    84      t('cities.basra'),
    85      t('cities.mosul'),
    86      t('cities.erbil'),
    87      t('cities.sulaymaniyah'),
    88      t('cities.duhok'),
    89      t('cities.kirkuk'),
    90      t('cities.anbar'),
I’ll include a mention of sample data, citations, and top-level navigation links.

root@f92a78a6a024:/workspace# nl -ba missinggold/src/app/components/Navigation.tsx | sed -n '40,140p'
    40        {/* Main Navigation */}
    41        <nav className="neon-nav events-glow sticky top-0 z-50">
    42          <div className="max-w-7xl mx-auto px-4">
    43            <div className="flex justify-between items-center h-16">
    44              {/* Logo */}
    45              <Link href={language === 'en' ? '/' : `/${language}`} className="group flex items-center gap-3">
    46                <div className="w-10 h-10 bg-gradient-to-br from-var(--events-color) via-var(--tourism-color) to-var(--hot
els-color) rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300 events-glow">
    47                  <span className="text-white font-bold text-lg">🇮🇶</span>
    48                </div>
    49                <div>
    50                  <span className="text-2xl font-bold text-white neon-glow" style={{ color: 'var(--text-primary)', textSha
dow: '0 0 10px var(--events-color)' }}>
    51                    IraqGuide
    52                  </span>
    53                  <div className="text-xs font-medium -mt-1" style={{ color: 'var(--text-secondary)' }}>{t('navigation.eve
ntPlatform')}</div>
    54                </div>
    55              </Link>
    56
    57              {/* Desktop Menu */}
    58              <div className="hidden md:flex items-center gap-8">
    59                <Link href={language === 'en' ? '/' : `/${language}`} className="font-medium transition-colors relative gr
oup" style={{ color: 'var(--text-primary)' }}>
    60                  {t('navigation.home')}
    61                  <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" sty
le={{ backgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
    62                </Link>
    63                <Link href={language === 'en' ? '/events' : `/${language}/events`} className="font-medium transition-color
s relative group" style={{ color: 'var(--text-primary)' }}>
    64                  {t('navigation.events')}
    65                  <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" sty
le={{ backgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
    66                </Link>
    67                <Link href={language === 'en' ? '/hotels' : `/${language}/hotels`} className="font-medium transition-color
s relative group" style={{ color: 'var(--text-primary)' }}>
    68                  Hotels
    69                  <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" sty
le={{ backgroundColor: 'var(--hotels-color)', boxShadow: '0 0 5px var(--hotels-color)' }}></span>
    70                </Link>
    71                <Link href={language === 'en' ? '/restaurants' : `/${language}/restaurants`} className="font-medium transi
tion-colors relative group" style={{ color: 'var(--text-primary)' }}>
    72                  Restaurants
    73                  <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" sty
le={{ backgroundColor: 'var(--restaurants-color)', boxShadow: '0 0 5px var(--restaurants-color)' }}></span>
    74                </Link>
    75                <Link href={language === 'en' ? '/tourism' : `/${language}/tourism`} className="font-medium transition-col
ors relative group" style={{ color: 'var(--text-primary)' }}>
    76                  Tourism
    77                  <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" sty
le={{ backgroundColor: 'var(--tourism-color)', boxShadow: '0 0 5px var(--tourism-color)' }}></span>
    78                </Link>
    79              </div>
    80
    81              {/* User Menu */}
    82              <div className={`flex items-center gap-3 ${isRTL ? 'flex-row-reverse' : ''}`}>
    83                {/* Language Switcher */}
    84                <div className="relative group hidden sm:block" data-testid="language-switcher">
    85                  <button className="flex items-center gap-2 px-3 py-2 font-medium transition-colors rounded-full" style={
{ color: 'var(--text-primary)' }}>
    86                    <span className="text-lg">🌐</span>
    87                    <span className="text-sm" suppressHydrationWarning>
    88                      {language === 'en' ? 'English' : language === 'ar' ? 'العربية' : 'کوردی'}
    89                    </span>
    90                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    91                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7-7 7-7" />
    92                    </svg>
    93                  </button>
    94                  <div className={`absolute ${isRTL ? 'left-0' : 'right-0'} top-full mt-1 rounded-lg min-w-[160px] opacity
-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50`} style={{ background: 'var(--bg-secon
dary)', border: '1px solid var(--events-color)' }}>
    95                    <button
    96                      onClick={() => setLanguage('en' as any)}
    97                      className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
    98                      style={{ color: language === 'en' ? 'var(--events-color)' : 'var(--text-primary)' }}
    99                    >
   100                      🇺🇸 English
   101                    </button>
   102                    <button
   103                      onClick={() => setLanguage('ar' as any)}
   104                      className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
   105                      style={{ color: language === 'ar' ? 'var(--events-color)' : 'var(--text-primary)' }}
   106                    >
   107                      🇮🇶 العربية
   108                    </button>
   109                    <button
   110                      onClick={() => setLanguage('ku' as any)}
   111                      className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
   112                      style={{ color: language === 'ku' ? 'var(--events-color)' : 'var(--text-primary)' }}
   113                    >
   114                      🇮🇶 کوردی
   115                    </button>
   116                  </div>
   117                </div>
   118
   119  {/* Create Event Link styled as text pill (not a button) */}
   120                <Link
   121                  href={session ? (language === 'en' ? '/dashboard' : `/${language}/dashboard`) : (language === 'en' ? '/r
egister' : `/${language}/register`)}
   122                  className="neon-button tourism tourism-glow"
   123                  style={{ fontSize: '0.9rem', padding: '8px 16px' }}
   124                >
   125                  <span>+</span>
   126                  {t('navigation.createEvent')}
   127                </Link>
   128
   129                {session ? (
   130                  <div className="flex items-center gap-4">
   131                    <div className="hidden lg:flex items-center gap-3">
   132                      <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center
 justify-center">
   133                        <span className="text-white text-sm font-semibold">
   134                          {session.user?.name?.charAt(0) || session.user?.email?.charAt(0) || 'U'}
   135                        </span>
   136                      </div>
   137                      <div className="flex flex-col">
   138                        <span className="text-sm font-medium text-gray-800">
   139                          {session.user?.name || 'User'}
   140                        </span>
I'll mention nine main categories with subcategories inferred from related pages, like cuisine or cafes.

To summarize, I’ll include categories, subcategories, and citations from relevant files, with a table.

I’ll break the answer into sections, each with citations. No testing section required here.

I’ll link subcategories to main categories where possible, using event data for others.   
Document application structure and categories
Oct 21
·
missinggold
·
main

Archive

Share

So I want you to act as a. Structure and a lot of development. And I would like you to scrutinize this repo and this local. Folder. And all I want you to do, we have agents who's looking for data collection. So we want to have the full structure of the application side, what's necessary. So I'd like you to study this application starting with priority. We have nine categories, sub 9 main categories or 9 grids. And each grid has each category has subcategories, so I'd like you to list the mall of it and so that we can give it to the agent to collect in all those areas. And. Anything you think that should be considered for? Marketing and stuff."E:\missinggold-fresh"
Copy

Version 1

Version 2

Version 3

Version 4
Repository Overview
The project is a Next.js-based multi-venue platform covering events, hotels, restaurants, cafes, and tourism for Iraq & Kurdistan, with multilingual support (Arabic, Kurdish, English), a Prisma-backed data model, and a clearly organized codebase (src/app, src/components, src/lib, etc.).

Static sample content lives under public/data, internationalization strings under messages/, and database schemas in prisma/, giving agents multiple data sources to mine for localized or structured information.

Data Collection Grids & Subcategories (9 Priority Areas)
Multi-venue verticals (homepage “Discover Iraq & Kurdistan”)
Subcategories/Tabs: All, Events, Hotels, Restaurants, Activities (with an additional SERVICE type already modeled). These drive venue-type segmentation for collection and require icons plus localized labels.

Event discovery categories (events & categories pages)
Subcategories (16 total): All, Technology & Innovation, Business & Networking, Music & Concerts, Arts & Culture, Sports & Fitness, Food & Drink, Learning & Development, Health & Wellness, Community & Social, Gaming & Esports, Spiritual & Religious, Family & Kids, Outdoor & Adventure, Virtual Events, Academic Conferences. Each category comes with translated labels and marketing-ready descriptions for localization.

City coverage grid
Subcategories (10 cities): Baghdad, Basra, Mosul, Erbil, Sulaymaniyah, Duhok, Kirkuk, Anbar, Najaf, Karbala. These appear in filters and localization files, guiding geo-targeted data collection and outreach.

Sample events dataset (static content for seeding/QA)
Entries: AI Innovation Summit, Kurdish Music Festival, Business Leadership Workshop, Modern Art Exhibition, Iraqi Food Festival, Football Championship, Health & Wellness Expo, Community Volunteering Day, Startup Pitch Night, Traditional Dance Night—with metadata such as city, category, pricing, and organizers for each record.

Restaurant experiences grid
Subcategories: Iraqi Traditional, Kurdish Specialties, Middle Eastern, Seafood, International, Desserts & Sweets. Useful for categorizing culinary venues and tailoring foodie marketing campaigns.

Cafe archetypes grid
Subcategories: Traditional Coffee Houses, Tea Gardens, Modern Cafes, Shisha Lounges, Bakery Cafes, Rooftop Cafes. These themes highlight ambiance and offerings that agents can document or promote.

Tourism experience grid
Subcategories: Historical Sites, Natural Wonders, Cultural Experiences, Adventure Tours, Religious Sites, City Tours. Each comes with counts and descriptions to steer travel content and partnership outreach.

Country expansion presets (multi-country strategy)
Iraq: Technology, Music, Business, Arts & Culture, Sports, Food & Dining, Health & Wellness, Community
United Arab Emirates: Business Networking, Luxury Events, Technology, Desert Adventures, Finance & Investment, Arts & Culture, Fine Dining, Wellness & Spa
Saudi Arabia: Business, Cultural Events, Sports, Technology, Entertainment, Education
These presets include currencies, language defaults, and feature flags, enabling agents to source localized partners or datasets rapidly.

Marketing & revenue pillars
Primary focuses: Ticketing commissions, hotel booking integrations, travel packages.
Secondary focuses: Premium listings, corporate services, advertising, and sponsorships.
The strategy file also outlines geo-language detection and culturally adapted event categories for Iraq, UAE, and Turkey, guiding regional marketing collateral and data collection priorities.

Marketing Considerations & CTA Hotspots
Built-in CTAs across vertical pages (“Join the Platform”, “List Your Restaurant/Cafe”, “Plan Your Trip”) provide natural conversion points; capturing success metrics around these will help evaluate content effectiveness.

The marketing strategy emphasizes multilingual personalization, geo-targeted messaging, and cross-selling bundles (event + hotel + travel), which should inform campaign briefs and the data agents gather for promotional assets.

Next Steps for Agents
Prioritize data gathering per the nine grids above, ensuring each subcategory receives localized examples, imagery, pricing, and partner leads where relevant.

Cross-reference the static datasets and translation strings while expanding into real-world sources to keep the tone, terminology, and iconography consistent with the application’s existing UX.




Logs
Configuring language runtimes...
Running auto setup...
Scanning repository (up to depth 3) for dependency configurations...

--- Checking . ---

==> Processing Node.js project in .
Found package-lock.json. Installing Node.js dependencies with npm ci...

Running: npm ci
npm warn Unknown env config "http-proxy". This will stop working in the next major version of npm.
⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹npm warn deprecated workbox-google-analytics@6.6.0: It is not compatible with newer versions of GA starting with v4, as long as you are using GAv3 it should be ok, but the package is not longer being maintained
⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙npm warn deprecated workbox-cacheable-response@6.6.0: workbox-background-sync@6.6.0
⠙⠹⠸npm warn deprecated sourcemap-codec@1.4.8: Please use @jridgewell/sourcemap-codec instead
⠸⠼⠴⠦npm warn deprecated rollup-plugin-terser@7.0.2: This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser
⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
⠋⠙⠹⠸npm warn deprecated rimraf@2.7.1: Rimraf versions prior to v4 are no longer supported
⠸npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
⠸⠼npm warn deprecated source-map@0.8.0-beta.0: The work that was done in this beta branch won't be included in future versions
⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏
> eventra-venues@2.0.0 postinstall
> prisma generate

⠏warn The configuration property `package.json#prisma` is deprecated and will be removed in Prisma 7. Please migrate to a Prisma config file (e.g., `prisma.config.ts`).
For more information, see: https://pris.ly/prisma-config

Prisma schema loaded from prisma/schema.prisma

✔ Generated Prisma Client (v6.16.2) to ./node_modules/@prisma/client in 229ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Interested in query caching in just a few lines of code? Try Accelerate today! https://pris.ly/tip-3-accelerate

⠙
added 856 packages, and audited 858 packages in 40s
⠙
⠙211 packages are looking for funding
⠙  run `npm fund` for details
⠙
found 0 vulnerabilities
⠙npm notice
npm notice New minor version of npm available! 11.4.2 -> 11.6.2
npm notice Changelog: https://github.com/npm/cli/releases/tag/v11.6.2
npm notice To update run: npm install -g npm@11.6.2
npm notice
⠙No installations were performed.
So I want you to act as a. Structure and a lot of development. And I would like you to scrutinize this repo and this local. Folder. And all I want you to do, we have agents who's looking for data collection. So we want to have the full structure of the application side, what's necessary. So I'd like you to study this application starting with priority. We have nine categories, sub 9 main categories or 9 grids. And each grid has each category has subcategories, so I'd like you to list the mall of it and so that we can give it to the agent to collect in all those areas. And. Anything you think that should be considered for? Marketing and stuff."E:\missinggold-fresh"
I need to check the AGENTS.md file for specific instructions.

ls
root@fe8e7d45430e:/workspace# ls
missinggold
I need to find the AGENTS.md file to see what's needed next.

root@fe8e7d45430e:/workspace# cd missinggold
root@fe8e7d45430e:/workspace/missinggold# ls
-                                    LICENSE                             STEP_2_COMPLETION_REPORT.md       middleware.ts
COMPETITIVE_ANALYSIS_MIDDLE_EAST.md  MARKETING_REVENUE_STRATEGY.md       STEP_3_COMPLETION_REPORT.md       next.config.ts
DEPLOYMENT.md                        MULTI_COUNTRY_SCALING_STRATEGY.md   STEP_4_COMPLETION_REPORT.md       node_modules
DEPLOYMENT_GUIDE.md                  NAVIGATION_LOCALE_FIX_MEMORY.md     STRATEGIC_PLATFORM_ANALYSIS.md    package-lock.json
DEPLOYMENT_READY.md                  OPTIMIZATION_REPORT.md              TECHNICAL_ARCHITECTURE.md         package.json
DEPLOYMENT_VERIFICATION.md           OPTIMIZATION_SUMMARY.md             TRANSLATION_ENFORCEMENT_GUIDE.md  postcss.config.mjs
FILE_BY_FILE_OPTIMIZATION.md         PERFORMANCE_OPTIMIZATION_REPORT.md  UI_IMPROVEMENTS.md                prisma
FINAL_OPTIMIZATION_SUMMARY.md        PRACTICAL_MULTI_COUNTRY_GUIDE.md    WARP.md                           public
FIXES_APPLIED.md                     PRODUCTION_DEPLOYMENT.md            _backup                           safe-config.js
I18N_AUDIT_REPORT.json               QUICK_REFERENCE.md                  ai-fix-about.diff                 scripts
I18N_IMPLEMENTATION_SUMMARY.md       README.md                           eslint.config.mjs                 src
IMPLEMENTATION_GUIDE.md              RTL_LOCALIZATION_FIXES.md           i18n.ts                           tailwind.config.js
LAUNCH_CERTIFICATION.md              SECURITY_FIXES_SUMMARY.md           messages                          tsconfig.json
I'll look for the AGENTS.md file to get some guidance.

root@fe8e7d45430e:/workspace/missinggold# find .. -name AGENTS.md -print
I'm looking through the repo now to confirm its structure, likely involving 9 categories.

root@fe8e7d45430e:/workspace/missinggold# ls src
app  components  lib  types
I'll check the src/app directory to find any relevant categories.

root@fe8e7d45430e:/workspace/missinggold# ls src/app
'[locale]'   api          components   favicon.ico   hotels        login               page.tsx        reset         utils
 about       cafes        dashboard    globals.css   layout.tsx    page-neon.tsx       providers.tsx   restaurants   venues
 admin       categories   events       hooks         loading.tsx   page-original.tsx   register        tourism
I might need to create a page for 9 categories—I'll check them out.

root@fe8e7d45430e:/workspace/missinggold# ls src/app/categories
layout.tsx  page.tsx
I'm opening the page now. Let's see what it has!

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/categories/page.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import { useTranslations } from "../hooks/useTranslations";
import { useContentOverride } from "../hooks/useContent";

export default function CategoriesPage() {
  const { t } = useTranslations();
  const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');

  const categories = [
    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-500
 to-pink-500' },
    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptions.
technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.busi
nessNetworking'), color: 'from-blue-500 to-cyan-500' },
    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcerts'
), color: 'from-pink-500 to-red-500' },
    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'), col
or: 'from-teal-500 to-blue-500' },
    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitness'
), color: 'from-green-500 to-emerald-500' },
    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color: 'fr
om-yellow-500 to-orange-500' },
    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions.le
arningDevelopment'), color: 'from-violet-500 to-purple-500' },
    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWellne
ss'), color: 'from-emerald-500 to-teal-500' },
    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communityS
ocial'), color: 'from-orange-500 to-red-500' },
    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEsports'
), color: 'from-red-500 to-pink-500' },
    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.spir
itualReligious'), color: 'from-amber-500 to-yellow-500' },
    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'),
color: 'from-sky-500 to-blue-500' },
    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoorAd
venture'), color: 'from-lime-500 to-green-500' },
    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEvents'
), color: 'from-slate-500 to-gray-500' },
    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions.ac
ademicConferences'), color: 'from-rose-500 to-red-500' }
  ];

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      {/* Hero Section */}
      <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 py-16">
        <div className="max-w-7xl mx-auto px-4 text-center">
          <h1 className="text-5xl font-bold text-white mb-6">{t('categoriesPage.title')}</h1>
          <p className="text-xl text-white/90 max-w-3xl mx-auto">
            {categoriesSubtitle?.value || t('categoriesPage.subtitle')}
          </p>
        </div>
      </div>

      {/* Categories Grid */}
      <div className="max-w-7xl mx-auto px-4 py-16">
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {categories.map((category, index) => (
            <div
              key={category.name}
              className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-1
05 group"
            >
              <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-center mb-6 g
roup-hover:scale-110 transition-transform duration-300`}>
                <span className="text-3xl">{category.icon}</span>
              </div>

              <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-purple-600 transition-colors">
                {category.name}
              </h3>

              <p className="text-gray-600 leading-relaxed mb-6">
                {category.description}
              </p>

              <Link
                href={`/events?category=${encodeURIComponent(category.key)}`}
                className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 rounded-full
font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
              >
                <span>{t('homepage.exploreEvents')}</span>
                <span>→</span>
              </Link>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 py-16">
        <div className="max-w-4xl mx-auto px-4 text-center">
          <h2 className="text-4xl font-bold text-white mb-6">
            {t('categoriesPage.ctaTitle')}
          </h2>
          <p className="text-xl text-white/90 mb-8">
            {t('categoriesPage.ctaSubtitle')}
          </p>
          <Link
            href="/register"
            className="bg-white text-orange-600 px-8 py-4 rounded-full font-bold text-lg hover:shadow-xl transition-all duration
-300 transform hover:scale-105 inline-flex items-center gap-3"
          >
            <span className="text-2xl">🎆</span>
            {t('events.createYourEvent')}
          </Link>
        </div>
      </div>
    </div>
  );
}root@fe8e7d45430e:/workspace/missinggold#
I need to identify where categories and subcategories are defined, possibly in a data file.

}root@fe8e7d45430e:/workspace/missinggold# rg "subcategories" -n
I should check the messages directory to examine how categories are defined in translation files.

root@fe8e7d45430e:/workspace/missinggold# ls messages
ar.json  en.json  index.ts  ku.json
I'll take a look at the en.json file to check for relevant info.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' messages/en.json
{
  "categories.${event.category}": ""
  "app": { "name": "Iraq Guide" },
  "navigation": {
    "home": "Home",
    "events": "Events",
    "categories": "Categories",
    "about": "About",
    "login": "Login",
    "logout": "Logout",
    "dashboard": "Dashboard",
    "createEvent": "Create Event",
    "eventPlatform": "Event Platform",
    "aiRecommendations": "AI-powered event recommendations are now live!",
    "tryItFree": "Try it free",
    "language": "Language"
  },
  "homepage": {
    "heroTitle": "Discover Amazing Events in Iraq & Kurdistan",
    "heroSubtitle": "Join thousands of people exploring the best events happening across Iraq and Kurdistan. From tech meetups t
o cultural festivals.",
    "getStarted": "Get Started",
    "exploreEvents": "Explore Events",
    "featuredEvents": "Featured Events",
    "upcomingEvents": "Upcoming Events",
    "allEvents": "All Events",
    "viewAllEvents": "View All Events",
    "noEventsFound": "No events found",
    "loading": "Loading events...",
    "exploreCities": "Explore Cities",
    "exploreCitiesSubtitle": "Discover amazing events in cities across the region",
    "exploreCategories": "Explore Categories",
    "exploreCategoriesSubtitle": "Find events that match your interests and passions",
    "findPerfectEvent": "Find Your Perfect Event",
    "featuredCarousel": "Featured event carousel will appear here"
  },
  "events": {
    "title": "Discover Amazing Events",
    "subtitle": "Find and join incredible events happening across Iraq and Kurdistan. From tech summits to cultural festivals, t
here's something for everyone.",
    "searchPlaceholder": "Search events by title, description, or location...",
    "foundEvents": "Found {count} event{count, plural, one {} other {s}}",
    "noEventsFound": "No Events Found",
    "noEventsMessage": "Try adjusting your search criteria or filters",
    "clearAllFilters": "Clear All Filters",
    "viewDetails": "View Details",
    "free": "FREE",
    "soldOut": "SOLD OUT",
    "byOrganizer": "by {name}",
    "createEventCta": "Don't See Your Event?",
    "createEventSubtitle": "Create and promote your own events on IraqEvents platform",
    "createYourEvent": "Create Your Event",
    "viewPublicPage": "View Public Page",
    "exploreByCategory": "Explore by Category",
    "eventImage": "Event image not available",
    "location": "Location",
    "eventDetails": "Event Details",
    "dateTime": "Date & Time",
    "category": "Category",
    "price": "Price",
    "aboutEvent": "About this event",
    "noDescription": "No description provided.",
    "registerForEvent": "Register for event",
    "shareEvent": "Share event",
    "organizer": "Organizer",
    "anonymousOrganizer": "Anonymous organizer",
    "noContactInfo": "No contact information"
  },
  "dashboard": {
    "welcomeBack": "Welcome back, {name}!",
    "subtitle": "Manage your events and create new experiences for your community.",
    "browseEvents": "Browse Events",
    "createEvent": "Create Event",
    "cancel": "Cancel",
    "createNewEvent": "Create New Event",
    "myEvents": "My Events",
    "noEvents": "No events yet. Create one!",
    "loadingEvents": "Loading events..."
  },
  "eventForm": {
    "eventName": "Event Name",
    "eventNameRequired": "Event Name *",
    "eventNamePlaceholder": "Enter event name",
    "dateTime": "Date & Time",
    "dateTimeRequired": "Date & Time *",
    "category": "Category",
    "selectCategory": "Select category",
    "location": "Location/Address",
    "locationPlaceholder": "Enter event location or address",
    "description": "Event Description",
    "descriptionPlaceholder": "Describe your event, what attendees can expect, schedule, etc.",
    "eventImage": "Event Image",
    "selectImage": "Click to select image",
    "whatsappGroup": "WhatsApp Group Link",
    "whatsappPlaceholder": "https://chat.whatsapp.com/...",
    "whatsappPhone": "WhatsApp Phone Number",
    "whatsappPhonePlaceholder": "+964 XXX XXX XXXX",
    "contactMethod": "Contact Method",
    "contactPlaceholder": "Email, phone, or other contact method for attendees",
    "creating": "Creating...",
    "createEvent": "Create Event"
  },
  "categories": {
    "technologyInnovation": "Technology & Innovation",
    "businessNetworking": "Business & Networking",
    "musicConcerts": "Music & Concerts",
    "artsCulture": "Arts & Culture",
    "sportsFitness": "Sports & Fitness",
    "foodDrink": "Food & Drink",
    "learningDevelopment": "Learning & Development",
    "healthWellness": "Health & Wellness",
    "communitySocial": "Community & Social",
    "gamingEsports": "Gaming & Esports",
    "spiritualReligious": "Spiritual & Religious",
    "familyKids": "Family & Kids",
    "outdoorAdventure": "Outdoor & Adventure",
    "virtualEvents": "Virtual Events",
    "academicConferences": "Academic and Conferences"
  },
  "login": {
    "welcomeBack": "Welcome Back",
    "subtitle": "Sign in to your IraqEvents account",
    "continueWithGoogle": "Continue with Google",
    "orContinueWith": "Or continue with email",
    "emailAddress": "Email Address",
    "emailPlaceholder": "Enter your email",
    "password": "Password",
    "passwordPlaceholder": "Enter your password",
    "signingIn": "Signing in...",
    "signIn": "Sign In",
    "noAccount": "Don't have an account?",
    "createAccount": "Create one here",
    "invalidCredentials": "Invalid email or password",
    "googleSignInError": "Failed to sign in with Google"
  },
  "about": {
    "title": "About IraqEvents",
    "subtitle": "Connecting communities through amazing events",
    "stats": {
      "eventsCreated": "Events Created",
      "happyUsers": "Happy Users",
      "citiesCovered": "Cities Covered",
      "languagesSupported": "Languages Supported"
    },
    "features": {
      "eventDiscovery": {
        "title": "Event Discovery",
        "description": "Find amazing events across Iraq and Kurdistan with our advanced search and filtering system."
      },
      "easyEventCreation": {
        "title": "Easy Event Creation",
        "description": "Create and manage your events with our intuitive event management platform."
      },
      "multiLanguageSupport": {
        "title": "Multi-Language Support",
        "description": "Navigate in Arabic, English, or Sorani Kurdish to make the platform accessible to everyone."
      },
      "mobileFriendly": {
        "title": "Mobile Friendly",
        "description": "Access events and create your own from anywhere with our fully responsive design."
      },
      "flexibleTicketing": {
        "title": "Flexible Ticketing",
        "description": "Support for both free and paid events with secure payment processing."
      },
      "communityFocused": {
        "title": "Community Focused",
        "description": "Connect with event organizers and attendees to build stronger communities."
      }
    },
    "mission": {
      "title": "Our Mission",
      "p1": "We believe that events have the power to bring people together, create lasting memories, and strengthen communities
. Our mission is to make event discovery and creation accessible to everyone across Iraq and Kurdistan.",
      "p2": "Whether you're looking for cultural festivals, business conferences, music concerts, or community gatherings, IraqE
vents is your gateway to discovering what's happening in your city.",
      "p3": "For event organizers, we provide powerful tools to create, promote, and manage events with ease, helping you reach
the right audience and create successful experiences."
    },
    "whyChoose": {
      "title": "Why Choose IraqEvents?",
      "subtitle": "We've built the most comprehensive event platform for Iraq and Kurdistan, designed with our local communities
 in mind."
    },
    "team": {
      "title": "Meet Our Team",
      "subtitle": "We're a passionate team dedicated to bringing people together through events and building stronger communitie
s across Iraq and Kurdistan.",
      "items": {
        "devTeam": {
          "name": "Development Team",
          "role": "Platform Development",
          "description": "Building the future of event management in Iraq"
        },
        "communityTeam": {
          "name": "Community Team",
          "role": "User Support",
          "description": "Helping users create and discover amazing events"
        },
        "localPartners": {
          "name": "Local Partners",
          "role": "Regional Expansion",
          "description": "Expanding our reach across Iraq and Kurdistan"
        }
      }
    },
    "values": {
I see a large file, but subcategories might be defined elsewhere. I'll try categoryDescriptions.

root@fe8e7d45430e:/workspace/missinggold# rg "categoryDescriptions" -n
src/app/categories/page.tsx
13:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-
500 to-pink-500' },
14:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
15:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.b
usinessNetworking'), color: 'from-blue-500 to-cyan-500' },
16:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcer
ts'), color: 'from-pink-500 to-red-500' },
17:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'),
color: 'from-teal-500 to-blue-500' },
18:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitne
ss'), color: 'from-green-500 to-emerald-500' },
19:    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color:
'from-yellow-500 to-orange-500' },
20:    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions
.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
21:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWel
lness'), color: 'from-emerald-500 to-teal-500' },
22:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communi
tySocial'), color: 'from-orange-500 to-red-500' },
23:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },
24:    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.s
piritualReligious'), color: 'from-amber-500 to-yellow-500' },
25:    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'
), color: 'from-sky-500 to-blue-500' },
26:    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoo
rAdventure'), color: 'from-lime-500 to-green-500' },
27:    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEven
ts'), color: 'from-slate-500 to-gray-500' },
28:    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions
.academicConferences'), color: 'from-rose-500 to-red-500' }

scripts/add-missing-translations.js
18:  "categoryDescriptions": {
235:      if (!translations.categoryDescriptions) {
236:        translations.categoryDescriptions = {};
240:      Object.keys(missingTranslations.categoryDescriptions).forEach(key => {
241:        translations.categoryDescriptions[key] = missingTranslations.categoryDescriptions[key][lang];

src/app/[locale]/categories/page.tsx
28:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-purple-
500 to-pink-500' },
29:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
30:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescriptions.b
usinessNetworking'), color: 'from-blue-500 to-cyan-500' },
31:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicConcer
ts'), color: 'from-pink-500 to-red-500' },
32:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCulture'),
color: 'from-teal-500 to-blue-500' },
33:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sportsFitne
ss'), color: 'from-green-500 to-emerald-500' },
34:    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), color:
'from-yellow-500 to-orange-500' },
35:    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescriptions
.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
36:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.healthWel
lness'), color: 'from-emerald-500 to-teal-500' },
37:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.communi
tySocial'), color: 'from-orange-500 to-red-500' },
38:    { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gamingEspor
ts'), color: 'from-red-500 to-pink-500' },
39:    { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescriptions.s
piritualReligious'), color: 'from-amber-500 to-yellow-500' },
40:    { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.familyKids'
), color: 'from-sky-500 to-blue-500' },
41:    { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.outdoo
rAdventure'), color: 'from-lime-500 to-green-500' },
42:    { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtualEven
ts'), color: 'from-slate-500 to-gray-500' },
43:    { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescriptions
.academicConferences'), color: 'from-rose-500 to-red-500' }

public/locales/en/common.json
382:  "categoryDescriptions": {

public/locales/ku/common.json
404:  "categoryDescriptions": {

public/locales/ar/common.json
410:  "categoryDescriptions": {

messages/ar.json
322:  "categoryDescriptions": {

messages/en.json
308:  "categoryDescriptions": {

messages/ku.json
351:  "categoryDescriptions": {
I'll look for a file describing categories, especially "technologyInnovation" and potential subcategories.

root@fe8e7d45430e:/workspace/missinggold# rg "technologyInnovation" -n
src/app/categories/page.tsx
14:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },

scripts/add-missing-translations.js
24:    "technologyInnovation": {

public/locales/en/common.json
124:    "technologyInnovation": "Technology & Innovation",
384:    "technologyInnovation": "Latest in tech, AI, and digital innovation",

public/locales/ku/common.json
118:    "technologyInnovation": "تەکنەلۆژیا و نوێکاری",
406:    "technologyInnovation": "نوێترین تەکنەلۆژیا و AI و داهێنانی دیجیتاڵی",

public/locales/ar/common.json
124:    "technologyInnovation": "التكنولوجيا والابتكار",
412:    "technologyInnovation": "أحدث التقنيات والذكاء الاصطناعي والابتكار الرقمي",

messages/ar.json
104:    "technologyInnovation": "التكنولوجيا والابتكار",
324:    "technologyInnovation": "لقاءات تقنية، هاكاثونات، وعروض ابتكار",

messages/en.json
102:    "technologyInnovation": "Technology & Innovation",
310:    "technologyInnovation": "Tech talks, hackathons, and innovation showcases",

messages/ku.json
189:    "technologyInnovation": "تەکنەلۆژیا و نوێکاری",
353:    "technologyInnovation": "وتووێژی تەکنەلۆژیا و پێشانگای نوێکاری",

src/app/components/SimpleLanguageProvider.tsx
30:  'categories.technologyInnovation': 'Technology & Innovation',

src/app/page-original.tsx
60:    { name: t('categories.technologyInnovation'), icon: "💻" },
226:      'technologyinnovation': 'categories.technologyInnovation',
242:      'tech': 'categories.technologyInnovation',
243:      'technology': 'categories.technologyInnovation',

src/app/components/EventDetailsModal.tsx
36:    "Technology & Innovation": "categories.technologyInnovation",

src/app/[locale]/categories/page.tsx
29:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescriptio
ns.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },

src/app/dashboard/EventForm.tsx
147:            <option value="technologyInnovation">{t('categories.technologyInnovation')}</option>

src/app/[locale]/events/page.tsx
63:    { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
296:      "Technology & Innovation": "categories.technologyInnovation",
I'm looking for the structure of categories and subcategories, focusing on finding definitions.

root@fe8e7d45430e:/workspace/missinggold# rg "subCategories" -n
I'll check if "categoriesData" is in src/app/utils to see if it's relevant.

root@fe8e7d45430e:/workspace/missinggold# rg "categories" src/app -g"*.ts"
I think I need to tweak my command—using rg with the correct filters.

root@fe8e7d45430e:/workspace/missinggold# rg "categories" src/app -g'*.ts'
I’ll check the src/types directory to see if there’s any data file there.

root@fe8e7d45430e:/workspace/missinggold# ls src/lib
analytics.ts  auth.ts  countries.ts  geocode.ts  i18n.ts  performance.ts  ratelimit.ts  translate.ts  validation.ts
I'll look up "categoryData" in the code to find its usage.

root@fe8e7d45430e:/workspace/missinggold# rg "category" src -n | head
src/app/categories/page.tsx:13:    { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions
.all'), color: 'from-purple-500 to-pink-500' },
src/app/categories/page.tsx:14:    { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', descri
ption: t('categoryDescriptions.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
src/app/categories/page.tsx:15:    { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', descriptio
n: t('categoryDescriptions.businessNetworking'), color: 'from-blue-500 to-cyan-500' },
src/app/categories/page.tsx:16:    { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('cate
goryDescriptions.musicConcerts'), color: 'from-pink-500 to-red-500' },
src/app/categories/page.tsx:17:    { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('category
Descriptions.artsCulture'), color: 'from-teal-500 to-blue-500' },
src/app/categories/page.tsx:18:    { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('cate
goryDescriptions.sportsFitness'), color: 'from-green-500 to-emerald-500' },
src/app/categories/page.tsx:19:    { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescr
iptions.foodDrink'), color: 'from-yellow-500 to-orange-500' },
src/app/categories/page.tsx:20:    { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', descript
ion: t('categoryDescriptions.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
src/app/categories/page.tsx:21:    { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('ca
tegoryDescriptions.healthWellness'), color: 'from-emerald-500 to-teal-500' },
src/app/categories/page.tsx:22:    { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('
categoryDescriptions.communitySocial'), color: 'from-orange-500 to-red-500' },
It looks like the user wants 9 categories—I'll check src/app/page.tsx for context.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/page.tsx                                                      ﻿
"use client";

import MultiVenueHomepage from "./components/MultiVenueHomepage";
import Navigation from "./components/Navigation";

/**
 * Home Page - Multi-Venue Platform
 *
 * Features:
 * - Events, Hotels, Restaurants, Activities, Services
 * - Tabbed navigation
 * - Venue listings
 */

export default function Home() {
  return (
    <>
      <Navigation />
      <MultiVenueHomepage />
    </>
  );
}
I need to take a closer look at the MultiVenueHomepage.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/components/MultiVenueHomepage.tsx
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';

interface Venue {
  id: string;
  publicId: string;
  type: 'EVENT' | 'HOTEL' | 'RESTAURANT' | 'ACTIVITY' | 'SERVICE';
  title: string;
  description: string;
  location: string;
  city: string;
  category?: string;
  priceRange?: string;
  imageUrl?: string;
  featured: boolean;
  verified: boolean;
  cuisineType?: string;
  eventDate?: string;
  amenities?: string[];
}

export default function MultiVenueHomepage() {
  const [activeTab, setActiveTab] = useState<string>('all');
  const [venues, setVenues] = useState<Venue[]>([]);
  const [loading, setLoading] = useState(true);

  const tabs = [
    { id: 'all', label: 'All', icon: '🌟' },
    { id: 'EVENT', label: 'Events', icon: '🎉' },
    { id: 'HOTEL', label: 'Hotels', icon: '🏨' },
    { id: 'RESTAURANT', label: 'Restaurants', icon: '🍽️' },
    { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
  ];

  useEffect(() => {
    fetchVenues();
  }, [activeTab]);

  const fetchVenues = async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams();
      if (activeTab !== 'all') {
        params.set('type', activeTab);
      }
      params.set('locale', 'en'); // TODO: Get from context

      const response = await fetch(`/api/venues?${params}`);
      const data = await response.json();

      if (data.success) {
        setVenues(data.venues || []);
      }
    } catch (error) {
      console.error('Error fetching venues:', error);
    } finally {
      setLoading(false);
    }
  };

  const getVenueTypeIcon = (type: string) => {
    switch (type) {
      case 'EVENT': return '🎉';
      case 'HOTEL': return '🏨';
      case 'RESTAURANT': return '🍽️';
      case 'ACTIVITY': return '🎯';
      case 'SERVICE': return '🛎️';
      default: return '📍';
    }
  };

  const formatPrice = (priceRange?: string) => {
    if (!priceRange) return null;
    return priceRange;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Hero Section */}
      <section className="relative py-20 px-4 text-center">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            🏰 Discover Iraq & Kurdistan
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            Events • Hotels • Restaurants • Activities - All in One Platform
          </p>

          {/* Tab Navigation */}
          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-6 py-3 rounded-full font-semibold transition-all duration-300 ${
                  activeTab === tab.id
                    ? 'bg-blue-600 text-white shadow-lg transform scale-105'
                    : 'bg-white text-gray-700 hover:bg-blue-50 shadow-md'
                }`}
              >
                {tab.icon} {tab.label}
              </button>
            ))}
          </div>
        </div>
      </section>

      {/* Venues Grid */}
      <section className="px-4 pb-20">
        <div className="max-w-7xl mx-auto">
          {loading ? (
            <div className="flex justify-center items-center py-20">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
          ) : (
            <>
              {venues.length === 0 ? (
                <div className="text-center py-20">
                  <div className="text-6xl mb-4">🏗️</div>
                  <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    Coming Soon!
                  </h3>
                  <p className="text-gray-600">
                    {activeTab === 'all'
                      ? 'Venues are being added to our platform'
                      : `${tabs.find(t => t.id === activeTab)?.label} will be available soon`
                    }
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                  {venues.map((venue) => (
                    <VenueCard key={venue.id} venue={venue} />
                  ))}
                </div>
              )}
            </>
          )}
        </div>
      </section>

      {/* CTA Section */}
      <section className="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16 px-4">
        <div className="max-w-4xl mx-auto text-center">
          <h2 className="text-3xl font-bold mb-4">
            Join the Platform
          </h2>
          <p className="text-xl mb-8 opacity-90">
            List your business and reach thousands of customers
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Link
              href="/register"
              className="bg-white text-blue-600 px-8 py-3 rounded-full font-semibold hover:bg-blue-50 transition-colors"
            >
              Sign Up Free
            </Link>
            <Link
              href="/venues/create"
              className="border-2 border-white text-white px-8 py-3 rounded-full font-semibold hover:bg-white hover:text-blue-60
0 transition-colors"
            >
              List Your Venue
            </Link>
          </div>
        </div>
      </section>
    </div>
  );
}

function VenueCard({ venue }: { venue: Venue }) {
  const getVenueTypeIcon = (type: string) => {
    switch (type) {
      case 'EVENT': return '🎉';
      case 'HOTEL': return '🏨';
      case 'RESTAURANT': return '🍽️';
      case 'ACTIVITY': return '🎯';
      case 'SERVICE': return '🛎️';
      default: return '📍';
    }
  };

  const getEventDate = (eventDate?: string) => {
    if (!eventDate) return null;
    return new Date(eventDate).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const formatPrice = (priceRange?: string) => {
    if (!priceRange) return null;
    return priceRange;
  };

  return (
I'm wondering if I really need 9 categories or if the dataset offers flexibility.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/components/Navigation.tsx
"use client";

import { useSession, signOut } from "next-auth/react";
import Link from "next/link";
import { useState, useEffect } from "react";
import { useLanguage } from "./LanguageProvider";
import { useTranslations } from "../hooks/useTranslations";
import ResponsiveButton from "./ResponsiveButton";

export default function Navigation() {
  const { data: session } = useSession();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { language, setLanguage, isRTL } = useLanguage();
  const { t } = useTranslations();

  const showTopBanner = (process.env.NEXT_PUBLIC_SHOW_TOP_BANNER === 'true');

  // Auto-open mobile menu on initial load for mobile screens to avoid CSS conflicts
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const isMobile = window.innerWidth < 768; // md breakpoint
      if (isMobile) {
        setIsMenuOpen(true);
      }
    }
  }, []);

  return (
    <>
      {/* Top Notification Bar (hidden in production by default) */}
      {showTopBanner && (
        <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white py-2 text-center text-sm font-medium">
          🎉 {t('navigation.aiRecommendations')}
          <Link href="/register" className="underline ml-2 font-semibold hover:text-yellow-300">
            {t('navigation.tryItFree')} {isRTL ? '←' : '→'}
          </Link>
        </div>
      )}

      {/* Main Navigation */}
      <nav className="neon-nav events-glow sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <Link href={language === 'en' ? '/' : `/${language}`} className="group flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-var(--events-color) via-var(--tourism-color) to-var(--hotels-colo
r) rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300 events-glow">
                <span className="text-white font-bold text-lg">🇮🇶</span>
              </div>
              <div>
                <span className="text-2xl font-bold text-white neon-glow" style={{ color: 'var(--text-primary)', textShadow: '0
0 10px var(--events-color)' }}>
                  IraqGuide
                </span>
                <div className="text-xs font-medium -mt-1" style={{ color: 'var(--text-secondary)' }}>{t('navigation.eventPlatfo
rm')}</div>
              </div>
            </Link>

            {/* Desktop Menu */}
            <div className="hidden md:flex items-center gap-8">
              <Link href={language === 'en' ? '/' : `/${language}`} className="font-medium transition-colors relative group" sty
le={{ color: 'var(--text-primary)' }}>
                {t('navigation.home')}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/events' : `/${language}/events`} className="font-medium transition-colors relati
ve group" style={{ color: 'var(--text-primary)' }}>
                {t('navigation.events')}
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--events-color)', boxShadow: '0 0 5px var(--events-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/hotels' : `/${language}/hotels`} className="font-medium transition-colors relati
ve group" style={{ color: 'var(--text-primary)' }}>
                Hotels
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--hotels-color)', boxShadow: '0 0 5px var(--hotels-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/restaurants' : `/${language}/restaurants`} className="font-medium transition-col
ors relative group" style={{ color: 'var(--text-primary)' }}>
                Restaurants
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--restaurants-color)', boxShadow: '0 0 5px var(--restaurants-color)' }}></span>
              </Link>
              <Link href={language === 'en' ? '/tourism' : `/${language}/tourism`} className="font-medium transition-colors rela
tive group" style={{ color: 'var(--text-primary)' }}>
                Tourism
                <span className="absolute -bottom-1 left-0 w-0 h-0.5 group-hover:w-full transition-all duration-300" style={{ ba
ckgroundColor: 'var(--tourism-color)', boxShadow: '0 0 5px var(--tourism-color)' }}></span>
              </Link>
            </div>

            {/* User Menu */}
            <div className={`flex items-center gap-3 ${isRTL ? 'flex-row-reverse' : ''}`}>
              {/* Language Switcher */}
              <div className="relative group hidden sm:block" data-testid="language-switcher">
                <button className="flex items-center gap-2 px-3 py-2 font-medium transition-colors rounded-full" style={{ color:
 'var(--text-primary)' }}>
                  <span className="text-lg">🌐</span>
                  <span className="text-sm" suppressHydrationWarning>
                    {language === 'en' ? 'English' : language === 'ar' ? 'العربية' : 'کوردی'}
                  </span>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7-7 7-7" />
                  </svg>
                </button>
                <div className={`absolute ${isRTL ? 'left-0' : 'right-0'} top-full mt-1 rounded-lg min-w-[160px] opacity-0 invis
ible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50`} style={{ background: 'var(--bg-secondary)',
border: '1px solid var(--events-color)' }}>
                  <button
                    onClick={() => setLanguage('en' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'en' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇺🇸 English
                  </button>
                  <button
                    onClick={() => setLanguage('ar' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'ar' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇮🇶 العربية
                  </button>
                  <button
                    onClick={() => setLanguage('ku' as any)}
                    className={`w-full px-4 py-2 text-left transition-colors rounded-lg`}
                    style={{ color: language === 'ku' ? 'var(--events-color)' : 'var(--text-primary)' }}
                  >
                    🇮🇶 کوردی
                  </button>
                </div>
              </div>

{/* Create Event Link styled as text pill (not a button) */}
              <Link
                href={session ? (language === 'en' ? '/dashboard' : `/${language}/dashboard`) : (language === 'en' ? '/register'
 : `/${language}/register`)}
                className="neon-button tourism tourism-glow"
                style={{ fontSize: '0.9rem', padding: '8px 16px' }}
              >
                <span>+</span>
                {t('navigation.createEvent')}
              </Link>

              {session ? (
                <div className="flex items-center gap-4">
                  <div className="hidden lg:flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify
-center">
                      <span className="text-white text-sm font-semibold">
                        {session.user?.name?.charAt(0) || session.user?.email?.charAt(0) || 'U'}
                      </span>
                    </div>
                    <div className="flex flex-col">
                      <span className="text-sm font-medium text-gray-800">
                        {session.user?.name || 'User'}
                      </span>
                      <span className="text-xs text-gray-500">
                        {session.user?.email}
                      </span>
                    </div>
                  </div>
<Link
                    href={language === 'en' ? '/dashboard' : `/${language}/dashboard`}
                    className="inline-block px-3 py-1.5 rounded-full bg-gray-900 text-white text-sm font-semibold hover:bg-gray-
800 transition-colors"
                  >
                    {t('navigation.dashboard')}
                  </Link>
                  <button
                    onClick={() => signOut()}
                    className="text-gray-600 hover:text-red-600 font-medium transition-colors hidden md:block"
                  >
                    {t('navigation.logout')}
                  </button>
                </div>
              ) : (
                <div className="flex items-center gap-3">
<Link
                    href={language === 'en' ? '/login' : `/${language}/login`}
                    className="inline-block px-4 py-1.5 rounded-full bg-gray-900 text-white text-sm font-semibold hover:bg-gray-
800 transition-colors"
                  >
                    {t('navigation.login')}
                  </Link>
                </div>
              )}

              {/* Mobile Menu Button */}
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="md:hidden text-gray-700 hover:text-purple-600 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              </button>
            </div>
          </div>

          {/* Mobile Menu */}
          <div className={`md:hidden py-4 border-t border-gray-100 bg-white/95 backdrop-blur-md ${isMenuOpen ? 'block' : 'hidden
'}`}>
            <div className="flex flex-col gap-4">
              <Link href={language === 'en' ? '/' : `/${language}`} className="text-gray-700 hover:text-purple-600 font-medium t
ransition-colors">
                  {t('navigation.home')}
                </Link>
                <Link href={language === 'en' ? '/events' : `/${language}/events`} className="text-gray-700 hover:text-purple-60
0 font-medium transition-colors">
                  {t('navigation.events')}
                </Link>
                <Link href={language === 'en' ? '/categories' : `/${language}/categories`} className="text-gray-700 hover:text-p
urple-600 font-medium transition-colors">
                  {t('navigation.categories')}
                </Link>
                <Link href={language === 'en' ? '/about' : `/${language}/about`} className="text-gray-700 hover:text-purple-600
font-medium transition-colors">
                  {t('navigation.about')}
                </Link>
                {!session && (
                  <div className="flex gap-3 pt-2">
                    <Link href={language === 'en' ? '/login' : `/${language}/login`} className="bg-gradient-to-r from-purple-600
 to-blue-600 text-white px-4 py-2 rounded-full font-semibold flex items-center gap-2">
                      <span>🔑</span>
The user wants all categories and subcategories listed. I'll check MultiCategoryGrid and locations.

root@fe8e7d45430e:/workspace/missinggold# sed -n '350,500p' public/locales/en/common.json
    "slide2": {
      "title": "Kurdish Music Festival",
      "subtitle": "National Arts & Culture",
      "description": "Experience the rich musical heritage of Kurdistan"
    },
    "slide3": {
      "title": "Business Leadership Workshop",
      "subtitle": "Business Growth",
      "description": "Learn essential leadership skills"
    },
    "slide4": {
      "title": "Modern Art Exhibition",
      "subtitle": "Art & Culture",
      "description": "Discover contemporary Iraqi and Kurdish art"
    },
    "attendees": "Attendees",
    "sessions": "Sessions",
    "days": "Days",
    "artists": "Artists",
    "stages": "Stages",
    "hours": "Hours",
    "leaders": "Leaders",
    "companies": "Companies",
    "workshops": "Workshops",
    "artworks": "Artworks",
    "galleries": "Galleries"
  },
  "meta": {
    "title": "IraqEvents - Discover Amazing Events in Iraq",
    "description": "The premier event platform for Iraq. Discover concerts, conferences, festivals, and community events across
Baghdad, Erbil, Basra, and all Iraqi cities.",
    "appTitle": "IraqEvents"
  },
  "categoryDescriptions": {
    "all": "All Categories",
    "technologyInnovation": "Latest in tech, AI, and digital innovation",
    "businessNetworking": "Professional development and networking opportunities",
    "musicConcerts": "Live music performances and concerts",
    "artsCulture": "Art exhibitions, cultural events, and heritage",
    "sportsFitness": "Sports events, fitness activities, and wellness",
    "foodDrink": "Culinary experiences, food festivals, and tastings",
    "learningDevelopment": "Educational workshops and skill development",
    "healthWellness": "Health, wellness, and mental health events",
    "communitySocial": "Community gatherings and social events",
    "gamingEsports": "Gaming tournaments and esports competitions",
    "spiritualReligious": "Religious ceremonies and spiritual gatherings",
    "familyKids": "Family-friendly events and kids activities",
    "outdoorAdventure": "Outdoor activities and adventure sports",
    "virtualEvents": "Online events and virtual experiences",
    "academicConferences": "Academic conferences and research presentations"
  },
  "categoriesPage": {
    "title": "Event Categories",
    "subtitle": "Discover events that match your interests",
    "ctaTitle": "Ready to Create Your Event?",
    "ctaSubtitle": "Join thousands of event organizers using our platform"
  },
  "reset": {
    "emailSent": "Reset email sent successfully",
    "sending": "Sending...",
    "sendResetLink": "Send Reset Link"
  },
  "demo": {
    "events": {
      "aiSummit": {
        "title": "AI Innovation Summit",
        "description": "Join us for a comprehensive exploration of artificial intelligence and machine learning technologies tha
t are shaping the future.",
        "location": "Baghdad Tech Center, Baghdad",
        "category": "Technology & Innovation"
      },
      "musicFestival": {
        "title": "Kurdish Music Festival",
        "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary Kurdish artists.",
        "location": "Central Park, Erbil",
        "category": "Music & Concerts"
      },
      "businessWorkshop": {
        "title": "Business Leadership Workshop",
        "description": "Learn essential leadership skills and networking strategies for business growth in the Middle East marke
t.",
        "location": "Business District, Basra",
        "category": "Business & Networking"
      },
      "artExhibition": {
        "title": "Modern Art Exhibition",
        "description": "Discover contemporary Iraqi and international art in this groundbreaking exhibition featuring 50+ artist
s.",
        "location": "Culture Center, Mosul",
        "category": "Arts & Culture"
      }
    }
  }
}root@fe8e7d45430e:/workspace/missinggold#
I’m looking for “subcategories” and checking if there’s data in categoryData, like arrays.

}root@fe8e7d45430e:/workspace/missinggold# rg "Community & Social" -n
src/app/components/SimpleLanguageProvider.tsx
38:  'categories.communitySocial': 'Community & Social',

scripts/csv-to-events-json.ts
62:  if (hit(['community','volunteer','meetup','social','charity','youth','family'])) return { key: 'community', display: 'Commu
nity & Social' };
63:  return { key: 'general', display: 'Community & Social' };

src/app/components/EventDetailsModal.tsx
45:    "Community & Social": "categories.communitySocial",

scripts/import-events-from-csv.ts
82:  if (hit(["community","volunteer","meetup","social","charity","youth","family"])) return { key: 'community', display: 'Commu
nity & Social' };
84:  return { key: 'general', display: 'Community & Social' };

public/data/events.json
100:    "category": "Community & Social",

public/locales/en/common.json
132:    "communitySocial": "Community & Social",

src/app/[locale]/events/page.tsx
305:      "Community & Social": "categories.communitySocial",
327:      "Community & Social": "community"

messages/en.json
110:    "communitySocial": "Community & Social",
I'll check public/data/events.json to locate where subcategories are defined.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' public/data/events.json
[
  {
    "id": "1",
    "publicId": "ai-summit-2025",
    "title": "AI Innovation Summit",
    "description": "Explore AI and machine learning breakthroughs with talks, workshops, and networking.",
    "date": "2025-10-10T10:00:00Z",
    "location": "Baghdad Tech Center, Baghdad",
    "category": "Technology & Innovation",
    "price": 50,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Tech Events Iraq", "email": "tech@iraqevents.com" }
  },
  {
    "id": "2",
    "publicId": "music-festival-erbil",
    "title": "Kurdish Music Festival",
    "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary artists.",
    "date": "2025-10-15T18:00:00Z",
    "location": "Citadel Park, Erbil",
    "category": "Music & Concerts",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Kurdistan Arts Council", "email": "arts@kurdistan.org" }
  },
  {
    "id": "3",
    "publicId": "business-workshop-basra",
    "title": "Business Leadership Workshop",
    "description": "Learn essential leadership skills and networking strategies for growth in the Middle East.",
    "date": "2025-10-20T09:00:00Z",
    "location": "Business District, Basra",
    "category": "Business",
    "price": 75,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Business Development Iraq", "email": "business@iraq.com" }
  },
  {
    "id": "4",
    "publicId": "art-exhibition-mosul",
    "title": "Modern Art Exhibition",
    "description": "Contemporary Iraqi and international art featuring 50+ artists.",
    "date": "2025-11-01T14:00:00Z",
    "location": "Culture Center, Mosul",
    "category": "Arts & Culture",
    "price": 30,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
    "user": { "name": "Mosul Cultural Foundation", "email": "culture@mosul.org" }
  },
  {
    "id": "5",
    "publicId": "food-festival-baghdad",
    "title": "Iraqi Food Festival",
    "description": "Taste authentic Iraqi cuisine from various regions with live cooking demos.",
    "date": "2025-11-05T12:00:00Z",
    "location": "Al-Zawra Park, Baghdad",
    "category": "Food & Drink",
    "price": 15,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Baghdad Culinary Society", "email": "food@baghdad.com" }
  },
  {
    "id": "6",
    "publicId": "sports-tournament-sulaymaniyah",
    "title": "Football Championship",
    "description": "Regional football tournament featuring teams across Kurdistan and Iraq.",
    "date": "2025-11-10T16:00:00Z",
    "location": "Sulaymaniyah Stadium, Sulaymaniyah",
    "category": "Sports & Fitness",
    "price": 25,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Kurdistan Football League", "email": "sports@kurdistan.com" }
  },
  {
    "id": "7",
    "publicId": "health-expo-karbala",
    "title": "Health & Wellness Expo",
    "description": "Exhibitions and talks on wellness, nutrition, and preventive care.",
    "date": "2025-11-18T10:00:00Z",
    "location": "Convention Hall, Karbala",
    "category": "Health & Wellness",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
    "user": { "name": "Iraq Health Network", "email": "health@iraq.org" }
  },
  {
    "id": "8",
    "publicId": "community-day-najaf",
    "title": "Community Volunteering Day",
    "description": "Join local organizations for a day of volunteering and community service.",
    "date": "2025-11-22T09:00:00Z",
    "location": "Old City, Najaf",
    "category": "Community & Social",
    "price": 0,
    "isFree": true,
    "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Najaf Community Org", "email": "community@najaf.org" }
  },
  {
    "id": "9",
    "publicId": "startup-pitch-erbil",
    "title": "Startup Pitch Night",
    "description": "Early-stage startups pitch to mentors and investors. Open networking.",
    "date": "2025-11-25T19:00:00Z",
    "location": "Innovation Hub, Erbil",
    "category": "Business",
    "price": 10,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
    "user": { "name": "Erbil Startup Network", "email": "startups@erbil.io" }
  },
  {
    "id": "10",
    "publicId": "dance-night-duhok",
    "title": "Traditional Dance Night",
    "description": "An evening of Kurdish traditional dances and folk music.",
    "date": "2025-12-01T20:00:00Z",
    "location": "City Theatre, Duhok",
    "category": "Arts & Culture",
    "price": 5,
    "isFree": false,
    "imageUrl": "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
    "user": { "name": "Duhok Cultural Center", "email": "culture@duhok.org" }
  }
]
I'll search for "grid" and "categories" in the components, focusing on MultiVenue.

root@fe8e7d45430e:/workspace/missinggold# rg "grid" src/app/components -n | head
src/app/components/MultiVenueHomepage.tsx:134:                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:
grid-cols-4 gap-6">
src/app/components/NeonHomepage.tsx:119:          display: 'grid',
src/app/components/NeonHomepage.tsx:120:          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
src/app/components/NeonHomepage.tsx:183:            display: 'grid',
src/app/components/NeonHomepage.tsx:184:            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
src/app/components/NeonHomepage.tsx:274:            display: 'grid',
src/app/components/NeonHomepage.tsx:275:            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
src/app/components/EventDetailsModal.tsx:120:          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
src/app/components/EventDetailsModal.tsx:181:            <div className="grid grid-cols-1 gap-4">
src/app/components/SkeletonLoader.tsx:168:    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
I’ll check if NeonHomepage includes any categories that might be relevant.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/components/NeonHomepage.tsx
"use client";

import { useState } from 'react';
import Link from 'next/link';
import { useLanguage } from './LanguageProvider';
import { useTranslations } from '../hooks/useTranslations';

interface StoryUser {
  id: string;
  name: string;
  avatar: string;
  count: number;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: 'events' | 'hotels' | 'restaurants' | 'cafes' | 'tourism';
  count: number;
}

export default function NeonHomepage() {
  const { language, isRTL } = useLanguage();
  const { t } = useTranslations();
  const [selectedCity, setSelectedCity] = useState('Baghdad');

  // Story users (mock data)
  const storyUsers: StoryUser[] = [
    { id: '1', name: 'Ahmed M.', avatar: '/api/placeholder/64/64', count: 245 },
    { id: '2', name: 'Sara K.', avatar: '/api/placeholder/64/64', count: 89 },
    { id: '3', name: 'Omar H.', avatar: '/api/placeholder/64/64', count: 156 }
  ];

  // Categories with specific neon colors
  const categories: Category[] = [
    { id: 'events', name: 'Events', icon: '📅', color: 'events', count: 124 },
    { id: 'hotels', name: 'Hotels', icon: '🏨', color: 'hotels', count: 87 },
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156 },
    { id: 'cafes', name: 'Cafes', icon: '☕', color: 'cafes', count: 92 },
    { id: 'tourism', name: 'Tourism', icon: '📸', color: 'tourism', count: 73 }
  ];

  return (
    <div className="min-h-screen">
      {/* Stories Section */}
      <div className="story-section">
        <div className="story-container">
          {/* Add Story Button */}
          <div className="story-avatar add-story">
            <span>+</span>
            <div className="name">Add Story</div>
          </div>

          {/* User Stories */}
          {storyUsers.map((user) => (
            <div key={user.id} className="story-avatar events-glow">
              <img
                src={user.avatar}
                alt={user.name}
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.src = `data:image/svg+xml;base64,${btoa(`
                    <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <rect width="64" height="64" fill="#2D1B4E"/>
                      <circle cx="32" cy="24" r="8" fill="#B24BF3"/>
                      <path d="M16 48c0-8 7-16 16-16s16 8 16 16" fill="#B24BF3"/>
                    </svg>
                  `)}`;
                }}
              />
              <div className="name">{user.name}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Currently Exploring Section */}
      <div className="currently-exploring tourism-glow">
        <h2 className="neon-glow">Currently Exploring</h2>

        <div className="city-name">
          <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#00F0FF', textShadow: '0 0 10px #00F0FF' }}>
            Baghdad
          </div>
          <div className="arabic-name">بغداد</div>
          <div style={{ marginTop: '8px', opacity: 0.8 }}>Central Iraq</div>
        </div>

        <p style={{ margin: '16px 0', fontSize: '1.1rem' }}>
          The vibrant capital city
        </p>

        <button className="neon-button tourism" style={{ marginTop: '16px' }}>
          Change City
        </button>

        <button
          className="neon-button tourism"
          style={{ marginTop: '8px', marginLeft: '12px' }}
        >
          Select a City
        </button>
      </div>

      {/* Categories Section */}
      <div style={{ padding: '40px 20px' }}>
        <h2 style={{
          textAlign: 'center',
          fontSize: '2rem',
          marginBottom: '32px',
          color: 'var(--text-primary)',
          textShadow: '0 0 10px var(--events-color)'
        }}>
          Categories
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '24px',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          {categories.map((category) => (
            <Link
              key={category.id}
              href={`/${category.id}`}
              className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
              style={{
                textDecoration: 'none',
                animationDelay: `${categories.indexOf(category) * 0.2}s`
              }}
            >
              <div className="icon" style={{
                fontSize: '3rem',
                filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
              }}>
                {category.icon}
              </div>
              <div className="label" style={{
                fontSize: '1.1rem',
                fontWeight: 'bold',
                color: `var(--${category.color}-color)`,
                textShadow: `0 0 5px var(--${category.color}-color)`
              }}>
                {category.name}
              </div>
              <div style={{
                fontSize: '0.9rem',
                color: 'var(--text-secondary)',
                marginTop: '4px'
              }}>
                {category.count}+ places
              </div>
            </Link>
          ))}
        </div>
      </div>

      {/* Featured Content Sections */}
      <div style={{ padding: '40px 20px' }}>
        {/* Featured Events */}
        <section style={{ marginBottom: '48px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
            <h3 style={{
              fontSize: '1.8rem',
              color: 'var(--text-primary)',
              textShadow: '0 0 5px var(--events-color)'
            }}>
              Featured Events in {selectedCity}
            </h3>
            <Link
              href="/events"
              className="neon-button events"
              style={{ fontSize: '0.9rem', padding: '8px 16px' }}
            >
              See All
            </Link>
          </div>

          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
            gap: '20px'
          }}>
            {/* Sample Featured Event Cards */}
            <div className="neon-card events events-glow featured">
              <div style={{ padding: '20px' }}>
                <div style={{
                  width: '100%',
                  height: '150px',
                  background: 'linear-gradient(135deg, var(--events-color), var(--bg-secondary))',
                  borderRadius: '8px',
                  marginBottom: '16px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '3rem'
                }}>
I'll look for the term "MainCategories" in case it's defined in a dataset or component.

root@fe8e7d45430e:/workspace/missinggold# rg "mainCategories" -n
I'll check 'src' directories with a command to find category-related files.

root@fe8e7d45430e:/workspace/missinggold# find src -iname '*category*'
I’ll take a look at public/data/categories.json to verify if the data’s there.

root@fe8e7d45430e:/workspace/missinggold# find public -maxdepth 2 -type f -iname '*category*'
I think I’ll check src/app/page-original.tsx for category definitions in the TypeScript type file.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/page-original.tsx
"use client";

import Link from "next/link";
import React, { useState, useEffect } from "react";
import ImagePlaceholder from "./components/ImagePlaceholder";
import LazyImage from "./components/LazyImage";
import LoadingScreen from "./components/LoadingScreen";
import SearchSuggest from "./components/SearchSuggest";
import EventImage from "./components/EventImage";
import ResponsiveButton from "./components/ResponsiveButton";
import { trackCityScrollerImpression, trackCityScrollerSelect, trackCityScrollerSnap, trackPageView } from "../lib/analytics";
import CityScroller from "./components/CityScroller";
import { useNetworkStatus, useImagePreloader, usePerformanceMonitor } from "./hooks/usePerformance";
import { useTranslations } from "./hooks/useTranslations";
import { useLanguage } from "./components/LanguageProvider";

export default function Home() {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCity, setSelectedCity] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [showMainContent, setShowMainContent] = useState(false);
  const [events, setEvents] = useState<any[]>([]);

  // Performance and network hooks
  const { isOnline, connectionSpeed } = useNetworkStatus();
  const { preloadImages, isImageLoaded } = useImagePreloader();
  const performanceMetrics = usePerformanceMonitor();

  // Translation and language hooks
  const { t } = useTranslations();
  const { language, isRTL } = useLanguage();

  // Initialize filter states
  useEffect(() => {
    if (t && !selectedCity) {
      setSelectedCity(t('common.allCities'));
      setSelectedCategory(t('common.allCategories'));
    }
  }, [t, selectedCity]);

  // Use translated cities and categories
  const cities = [
    t('common.allCities'),
    t('cities.baghdad'),
    t('cities.basra'),
    t('cities.mosul'),
    t('cities.erbil'),
    t('cities.sulaymaniyah'),
    t('cities.duhok'),
    t('cities.kirkuk'),
    t('cities.anbar'),
    t('cities.najaf'),
    t('cities.karbala')
  ];

  const categories = [
    { name: t('common.allCategories'), icon: "🎉" },
    { name: t('categories.technologyInnovation'), icon: "💻" },
    { name: t('categories.businessNetworking'), icon: "💼" },
    { name: t('categories.musicConcerts'), icon: "🎵" },
    { name: t('categories.artsCulture'), icon: "🎨" },
    { name: t('categories.sportsFitness'), icon: "⚽" },
    { name: t('categories.foodDrink'), icon: "🍽️" },
    { name: t('categories.learningDevelopment'), icon: "📚" },
    { name: t('categories.healthWellness'), icon: "🏥" },
    { name: t('categories.communitySocial'), icon: "👥" },
    { name: t('categories.gamingEsports'), icon: "🎮" },
    { name: t('categories.spiritualReligious'), icon: "🕌" },
    { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦" },
    { name: t('categories.outdoorAdventure'), icon: "🏔️" },
    { name: t('categories.virtualEvents'), icon: "📱" },
    { name: t('categories.academicConferences'), icon: "🎓" }
  ];

  const heroSlides = [
    {
      id: 1,
      title: t('heroSlides.slide1.title'),
      subtitle: t('heroSlides.slide1.subtitle'),
      description: t('heroSlides.slide1.description'),
      gradient: "from-purple-900 via-blue-900 to-cyan-900",
      buttonText: t('hero.registerNow'),
      buttonColor: "from-yellow-400 via-orange-500 to-red-500",
      stats: [{ label: t('heroSlides.attendees'), value: "5K+", color: "text-yellow-400" }, { label: t('heroSlides.sessions'), v
alue: "100+", color: "text-cyan-400" }, { label: t('heroSlides.days'), value: "3", color: "text-purple-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "tech"
    },
    {
      id: 2,
      title: t('heroSlides.slide2.title'),
      subtitle: t('heroSlides.slide2.subtitle'),
      description: t('heroSlides.slide2.description'),
      gradient: "from-pink-900 via-purple-900 to-indigo-900",
      buttonText: t('hero.getTickets'),
      buttonColor: "from-pink-500 via-purple-500 to-indigo-500",
      stats: [{ label: t('heroSlides.artists'), value: "50+", color: "text-pink-400" }, { label: t('heroSlides.stages'), value:
"5", color: "text-purple-400" }, { label: t('heroSlides.hours'), value: "72", color: "text-indigo-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "music"
    },
    {
      id: 3,
      title: t('heroSlides.slide3.title'),
      subtitle: t('heroSlides.slide3.subtitle'),
      description: t('heroSlides.slide3.description'),
      gradient: "from-emerald-900 via-teal-900 to-cyan-900",
      buttonText: t('heroSlides.joinSummit'),
      buttonColor: "from-emerald-500 via-teal-500 to-cyan-500",
      stats: [{ label: t('heroSlides.leaders'), value: "200+", color: "text-emerald-400" }, { label: t('heroSlides.companies'),
value: "150+", color: "text-teal-400" }, { label: t('heroSlides.workshops'), value: "25", color: "text-cyan-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=1920&h=1080&fit=crop&crop=center&auto=for
mat&q=80",
      category: "business"
    },
    {
      id: 4,
      title: t('heroSlides.slide4.title'),
      subtitle: t('heroSlides.slide4.subtitle'),
      description: t('heroSlides.slide4.description'),
      gradient: "from-orange-900 via-red-900 to-pink-900",
      buttonText: t('heroSlides.exploreArt'),
      buttonColor: "from-orange-500 via-red-500 to-pink-500",
      stats: [{ label: t('heroSlides.artists'), value: "300+", color: "text-orange-400" }, { label: t('heroSlides.artworks'), va
lue: "1K+", color: "text-red-400" }, { label: t('heroSlides.galleries'), value: "15", color: "text-pink-400" }],
      backgroundImage: "https://images.unsplash.com/photo-1549490349-8643362247b5?w=1920&h=1080&fit=crop&crop=center&auto=format
&q=80",
      category: "art"
    }
  ];

  // Initialize loading sequence
  useEffect(() => {
    // Simulate initial app loading (DOM ready, critical resources)
    const initTimer = setTimeout(() => {
      setIsLoading(false);
    }, 1500); // 1.5 seconds minimum loading time

    return () => clearTimeout(initTimer);
  }, []);

  // Handle loading completion
  const handleLoadingComplete = () => {
    // LoadingScreen handles its own completion, just make sure content is visible
    setShowMainContent(true);
  };

  // Preload critical images on fast connections
  useEffect(() => {
    if (connectionSpeed === 'fast' && isOnline) {
      // Preload hero carousel images (placeholder for now since we don't have real images)
      // In production, you would preload actual image URLs here
      const criticalImages: string[] = [
        // '/images/hero/tech-summit.jpg',
        // '/images/hero/music-festival.jpg',
        // etc...
      ];
      if (criticalImages.length > 0) {
        preloadImages(criticalImages);
      }
    }
  }, [connectionSpeed, isOnline, preloadImages]);

  // Auto-scroll carousel
  React.useEffect(() => {
    const timer = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % heroSlides.length);
    }, 5000);
    return () => clearInterval(timer);
  }, [heroSlides.length]);

  const goToSlide = (index: number) => {
    setCurrentSlide(index);
  };

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % heroSlides.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + heroSlides.length) % heroSlides.length);
  };

  // Helper functions
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const locale = language === 'ar' ? 'ar-IQ' : 'ckb-IQ';
    return date.toLocaleDateString(locale, {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getCategoryIcon = (category: string) => {
    const icons: { [key: string]: string } = {
      'technologyinnovation': '💻',
      'businessnetworking': '💼',
      'musicconcerts': '🎵',
      'artsculture': '🎨',
      'sportsfitness': '⚽',
      'fooddrink': '🍽️',
      'learningdevelopment': '📚',
      'healthwellness': '🏥',
I wonder if the question refers to public/locales/en/common.json. I should check CategoryGrid.tsx.

root@fe8e7d45430e:/workspace/missinggold# ls src/app/components
CityScroller.tsx       EventImage.tsx        MultiVenueHomepage.tsx     PWAInstallPrompt.tsx        SkeletonLoader.tsx
ClientLayout.tsx       ImagePlaceholder.tsx  Navigation.tsx             ResponsiveButton.tsx
DynamicHTML.tsx        LanguageProvider.tsx  NeonHomepage.tsx           SearchSuggest.tsx
ErrorBoundary.tsx      LazyImage.tsx         OptimizedNavigation.tsx    SessionProviderWrapper.tsx
EventDetailsModal.tsx  LoadingScreen.tsx     OptimizedNeonHomepage.tsx  SimpleLanguageProvider.tsx
I'll look at the categories defined in OptimizedNeonHomepage to verify.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/components/OptimizedNeonHomepage.tsx
"use client";

/**
 * Optimized Neon Homepage Component
 *
 * Performance Optimizations:
 * - Separated business logic from UI (Functional Core, Imperative Shell)
 * - Debounced window resize handlers
 * - Memoized components with React.memo
 * - useMemo for expensive computations
 * - useCallback for stable function references
 * - Lazy loading for images
 * - Intersection Observer for visibility-based rendering
 */

import { useState, useMemo, useCallback, memo } from 'react';
import Link from 'next/link';
import { useLanguage } from './LanguageProvider';
import { useTranslations } from '../hooks/useTranslations';
import { usePersistedState } from '../hooks/useOptimizedState';

// ==================== TYPES ====================

interface StoryUser {
  id: string;
  name: string;
  avatar: string;
  count: number;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: 'events' | 'hotels' | 'restaurants' | 'cafes' | 'tourism';
  count: number;
  href: string;
}

interface FeaturedEvent {
  id: string;
  title: string;
  description: string;
  icon: string;
  date: string;
  category: string;
}

// ==================== BUSINESS LOGIC ====================

/**
 * Hook for story users data
 * Memoized to prevent unnecessary re-computations
 */
function useStoryUsers(): StoryUser[] {
  return useMemo(() => [
    { id: '1', name: 'Ahmed M.', avatar: '/api/placeholder/64/64', count: 245 },
    { id: '2', name: 'Sara K.', avatar: '/api/placeholder/64/64', count: 89 },
    { id: '3', name: 'Omar H.', avatar: '/api/placeholder/64/64', count: 156 }
  ], []);
}

/**
 * Hook for categories data with proper typing and memoization
 */
function useCategories(): Category[] {
  return useMemo(() => [
    { id: 'events', name: 'Events', icon: '📅', color: 'events', count: 124, href: '/events' },
    { id: 'hotels', name: 'Hotels', icon: '🏨', color: 'hotels', count: 87, href: '/hotels' },
    { id: 'restaurants', name: 'Restaurants', icon: '🍽️', color: 'restaurants', count: 156, href: '/restaurants' },
    { id: 'cafes', name: 'Cafes', icon: '☕', color: 'cafes', count: 92, href: '/cafes' },
    { id: 'tourism', name: 'Tourism', icon: '📸', color: 'tourism', count: 73, href: '/tourism' }
  ], []);
}

/**
 * Hook for featured events data
 */
function useFeaturedEvents(): FeaturedEvent[] {
  return useMemo(() => [
    {
      id: '1',
      title: 'Baghdad Cultural Night',
      description: 'Experience traditional Iraqi culture with music, dance, and art',
      icon: '🎭',
      date: 'Oct 15, 2024',
      category: 'events'
    },
    {
      id: '2',
      title: 'Tech Innovation Summit',
      description: 'Join leading tech experts for the future of technology in Iraq',
      icon: '🎪',
      date: 'Oct 28, 2024',
      category: 'events'
    }
  ], []);
}

// ==================== UI COMPONENTS ====================

/**
 * Story Avatar Component - Memoized for performance
 */
const StoryAvatar = memo(({ user }: { user: StoryUser }) => {
  const handleImageError = useCallback((e: React.SyntheticEvent<HTMLImageElement>) => {
    const target = e.currentTarget;
    target.src = `data:image/svg+xml;base64,${btoa(`
      <svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="64" height="64" fill="#2D1B4E"/>
        <circle cx="32" cy="24" r="8" fill="#B24BF3"/>
        <path d="M16 48c0-8 7-16 16-16s16 8 16 16" fill="#B24BF3"/>
      </svg>
    `)}`;
  }, []);

  return (
    <div className="story-avatar events-glow">
      <img
        src={user.avatar}
        alt={user.name}
        loading="lazy"
        onError={handleImageError}
      />
      <div className="name">{user.name}</div>
    </div>
  );
});
StoryAvatar.displayName = 'StoryAvatar';

/**
 * Category Card Component - Memoized for performance
 */
const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
  return (
    <Link
      href={category.href}
      className={`category-icon ${category.color} ${category.color}-glow neon-pulse`}
      style={{
        textDecoration: 'none',
        animationDelay: `${index * 0.2}s`
      }}
    >
      <div
        className="icon"
        style={{
          fontSize: '3rem',
          filter: `drop-shadow(0 0 10px var(--${category.color}-color))`
        }}
      >
        {category.icon}
      </div>
      <div
        className="label"
        style={{
          fontSize: '1.1rem',
          fontWeight: 'bold',
          color: `var(--${category.color}-color)`,
          textShadow: `0 0 5px var(--${category.color}-color)`
        }}
      >
        {category.name}
      </div>
      <div style={{
        fontSize: '0.9rem',
        color: 'var(--text-secondary)',
        marginTop: '4px'
      }}>
        {category.count}+ places
      </div>
    </Link>
  );
});
CategoryCard.displayName = 'CategoryCard';

/**
 * Event Card Component - Memoized for performance
 */
const EventCard = memo(({ event, featured = false }: { event: FeaturedEvent; featured?: boolean }) => {
  return (
    <div className={`neon-card events events-glow ${featured ? 'featured' : ''}`}>
      <div style={{ padding: '20px' }}>
        <div style={{
          width: '100%',
          height: '150px',
          background: 'linear-gradient(135deg, var(--events-color), var(--bg-secondary))',
          borderRadius: '8px',
          marginBottom: '16px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '3rem'
        }}>
          {event.icon}
        </div>
        <h4 style={{ color: 'var(--text-primary)', marginBottom: '8px', fontSize: '1.2rem' }}>
          {event.title}
        </h4>
        <p style={{ color: 'var(--text-secondary)', fontSize: '0.9rem', marginBottom: '12px' }}>
          {event.description}
I need to locate the nine categories and subcategories, possibly in docs like README.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' README.md
# Missinggold - Event Management Platform

A comprehensive event management and venue platform for Iraq & Kurdistan, featuring hotels, restaurants, activities, and enterta
inment venues.

## Features

- 🎯 **Multi-language Support**: English, Arabic, and Kurdish
- 🏨 **Venue Management**: Hotels, restaurants, cafes, and tourism activities
- 📱 **Progressive Web App**: Offline-capable mobile experience
- 🔐 **Authentication**: Secure user authentication with NextAuth.js
- 💎 **Modern Stack**: Next.js 15, React 19, TypeScript, Prisma
- 🎨 **Beautiful UI**: Tailwind CSS with responsive design
- 🌍 **RTL Support**: Full right-to-left language support

## Quick Start

### Prerequisites

- Node.js 18+
- PostgreSQL database
- Prisma CLI

### Installation

```bash
# Clone the repository
git clone https://github.com/absulysuly/missinggold.git
cd missinggold

# Install dependencies
npm ci

# Set up environment variables
cp .env.example .env.local
# Edit .env.local with your database URL and other secrets

# Set up the database
npm run db:deploy
npm run db:seed

# Start development server
npm run dev
```

Visit [http://localhost:3000](http://localhost:3000) to see the application.

## Environment Variables

Create a `.env.local` file in the root directory with the following variables:

```bash
# Database
DATABASE_URL="postgresql://user:password@localhost:5432/missinggold"

# Authentication
NEXTAUTH_SECRET="your-nextauth-secret-here"
NEXTAUTH_URL="http://localhost:3000"

# Rate Limiting (Upstash Redis)
UPSTASH_REDIS_REST_URL="your-upstash-url"
UPSTASH_REDIS_REST_TOKEN="your-upstash-token"

# Email (Resend)
RESEND_API_KEY="your-resend-api-key"

# Analytics (Optional)
SENTRY_DSN="your-sentry-dsn"
```

## Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint
- `npm run type-check` - Run TypeScript checking
- `npm run db:migrate` - Run database migrations
- `npm run db:seed` - Seed database with initial data

## Deployment

See [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed production deployment instructions.

## Project Structure

```
├── src/
│   ├── app/              # Next.js app router pages
│   ├── components/       # Reusable React components
│   ├── lib/              # Utility libraries
│   └── types/            # TypeScript type definitions
├── prisma/              # Database schema and migrations
├── public/              # Static assets
├── messages/            # i18n translation files
└── scripts/             # Build and maintenance scripts
```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Security

If you discover any security issues, please email [security@example.com](mailto:security@example.com) instead of using the issue
 tracker.

**Note**: After deployment, rotate all secrets that were removed during repository extraction.
I need to confirm categories and inspect src/app/[locale]/page.tsx for details.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/[locale]/page.tsx
sed: can't read src/app/[locale]/page.tsx: No such file or directory
I’m checking if the [locale]/page.tsx file exists—there’s a [locale] directory.

root@fe8e7d45430e:/workspace/missinggold# ls src/app/'[locale]'
categories  event  events  register
I'm looking for where the nine categories and their subcategories are defined in the repo, maybe in messages/en.json. I'll also check places like public/data/venues.json.

root@fe8e7d45430e:/workspace/missinggold# ls src/app/hotels
page.tsx
root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/hotels/page.tsx
"use client";

import Link from 'next/link';

export default function HotelsPage() {
  const hotels = [
    {
      id: '1',
      name: 'Baghdad Palace Hotel',
      description: 'Luxury accommodation in the heart of Baghdad',
      rating: 4.8,
      price: '$120/night',
      image: '🏰',
      location: 'Central Baghdad'
    },
    {
      id: '2',
      name: 'Erbil Grand Hotel',
      description: 'Modern hotel with stunning city views',
      rating: 4.6,
      price: '$95/night',
      image: '🏨',
      location: 'Erbil Center'
    },
    {
      id: '3',
      name: 'Basra Riverside Hotel',
      description: 'Peaceful riverside accommodation',
      rating: 4.4,
      price: '$80/night',
      image: '🌊',
      location: 'Basra Waterfront'
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 46, 151, 0.1)',
          border: '2px solid var(--hotels-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--hotels-color)',
            textShadow: '0 0 10px var(--hotels-color)',
            marginBottom: '16px'
          }}>
            🏨 Hotels
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Find the perfect place to stay in Iraq & Kurdistan
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button hotels">
          ← Back to Home
        </Link>
      </div>

      {/* Hotels Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
        gap: '24px',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {hotels.map((hotel) => (
          <div key={hotel.id} className="neon-card hotels hotels-glow">
            <div style={{ padding: '24px' }}>
              {/* Hotel Image/Icon */}
              <div style={{
                width: '100%',
                height: '200px',
                background: 'linear-gradient(135deg, var(--hotels-color), var(--bg-secondary))',
                borderRadius: '12px',
                marginBottom: '20px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '4rem'
              }}>
                {hotel.image}
              </div>

              {/* Hotel Info */}
              <h3 style={{
                color: 'var(--text-primary)',
                fontSize: '1.5rem',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--hotels-color)'
              }}>
                {hotel.name}
              </h3>

              <p style={{
                color: 'var(--text-secondary)',
                marginBottom: '16px',
                lineHeight: '1.6'
              }}>
                {hotel.description}
              </p>

              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginBottom: '16px'
              }}>
                <span style={{
                  color: 'var(--hotels-color)',
                  fontSize: '1.1rem',
                  fontWeight: 'bold'
                }}>
                  ⭐ {hotel.rating}
                </span>
                <span style={{
                  color: 'var(--text-tertiary)',
                  fontSize: '0.9rem'
                }}>
                  📍 {hotel.location}
                </span>
              </div>

              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{
                  color: 'var(--hotels-color)',
                  fontSize: '1.3rem',
                  fontWeight: 'bold',
                  textShadow: '0 0 5px var(--hotels-color)'
                }}>
                  {hotel.price}
                </span>
                <button className="neon-button hotels">
                  Book Now
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card hotels hotels-glow" style={{
          maxWidth: '600px',
          margin: '0 auto',
          padding: '32px'
        }}>
          <h2 style={{
            color: 'var(--hotels-color)',
            fontSize: '2rem',
            marginBottom: '16px',
            textShadow: '0 0 10px var(--hotels-color)'
          }}>
            Can&apos;t find what you&apos;re looking for?
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            marginBottom: '24px',
            fontSize: '1.1rem'
          }}>
            Contact us to find more hotel options in your preferred location
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button hotels">
              Contact Us
            </button>
            <button className="neon-button tourism">
              Browse All Categories
            </button>
Hmm, the user might want to check out the whole doc. Let’s look for "grid".

root@fe8e7d45430e:/workspace/missinggold# rg "grid" STEP_4_COMPLETION_REPORT.md
I think I should search the repo for any mention of '9' to find docs.

root@fe8e7d45430e:/workspace/missinggold# rg "grid" -n
DEPLOYMENT_VERIFICATION.md
141:- ✅ CategoryGridSkeleton (category grids)

PERFORMANCE_OPTIMIZATION_REPORT.md
181:- `CategoryGridSkeleton` - For category grids

IMPLEMENTATION_GUIDE.md
182:    <div className="grid grid-cols-3 gap-4">

QUICK_REFERENCE.md
125:// Card grids

src/app/categories/page.tsx
45:        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">

src/app/restaurants/page.tsx
91:        display: 'grid',
92:        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
134:                display: 'grid',
135:                gridTemplateColumns: '1fr 1fr',
213:          display: 'grid',
214:          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',

src/app/hotels/page.tsx
78:        display: 'grid',
79:        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',

src/app/components/MultiVenueHomepage.tsx
134:                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">

src/app/components/NeonHomepage.tsx
119:          display: 'grid',
120:          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
183:            display: 'grid',
184:            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
274:            display: 'grid',
275:            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',

src/app/components/SkeletonLoader.tsx
168:    <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
289:          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

src/app/components/OptimizedNeonHomepage.tsx
333:        <div className="grid-layout categories">
368:          <div className="grid-layout events">
465:              display: 'grid',
466:              gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',

src/app/globals.css
1222:.grid-layout {
1223:  display: grid;
1230:.grid-layout {
1231:  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
1236:  .grid-layout.categories {
1237:    grid-template-columns: repeat(2, 1fr);
1240:  .grid-layout.events {
1241:    grid-template-columns: 1fr;
1247:  .grid-layout.categories {
1248:    grid-template-columns: repeat(3, 1fr);
1251:  .grid-layout.events {
1252:    grid-template-columns: repeat(2, 1fr);
1258:  .grid-layout.categories {
1259:    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
1262:  .grid-layout.events {
1263:    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));

src/app/components/EventDetailsModal.tsx
120:          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
181:            <div className="grid grid-cols-1 gap-4">

src/app/page-original.tsx
707:              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
751:              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">

src/app/tourism/page.tsx
129:          display: 'grid',
130:          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
175:          display: 'grid',
176:          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
218:                  display: 'grid',
219:                  gridTemplateColumns: '1fr 1fr',
298:          display: 'grid',
299:          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',

src/app/dashboard/EventList.tsx
43:    <div className="mt-4 grid gap-4">

src/app/dashboard/content/page.tsx
78:          <div className="grid md:grid-cols-3 gap-4 mb-4">

src/app/dashboard/EventForm.tsx
107:      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
230:      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

src/app/[locale]/categories/page.tsx
60:        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">

src/app/[locale]/event/[publicId]/page.tsx
202:            <div className="grid md:grid-cols-2 gap-8 mb-8">

src/app/[locale]/events/page.tsx
380:            <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
449:          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
509:          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">

src/app/cafes/page.tsx
113:          display: 'grid',
114:          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
156:                  display: 'grid',
157:                  gridTemplateColumns: '1fr 1fr',
236:          display: 'grid',
237:          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',

src/app/admin/monitor/MonitorClient.tsx
53:    <div className="grid grid-cols-1 gap-4">

src/app/about/page.tsx
117:          <div className="grid grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8">
133:          <div className="lg:grid lg:grid-cols-2 lg:gap-16 lg:items-center">
174:          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12">
201:          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">
236:          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-16">
342:          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">

public/mockups/explore.html
22:    .tiles{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:14px}

UI_IMPROVEMENTS.md
62:- ✅ Responsive grid layouts
125:   - Added responsive grid classes

_backup/iraq-events-multilingual.html.backup
295:        .events-grid {
296:            display: grid;
297:            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
440:        .months-grid {
441:            display: grid;
442:            grid-template-columns: repeat(6, 1fr);
622:            display: grid;
718:            .events-grid {
719:                grid-template-columns: 1fr;
722:            .months-grid {
723:                grid-template-columns: repeat(3, 1fr);
778:        .rtl .events-grid {
786:        .rtl .months-grid {
867:        <div class="months-grid">
882:        <div class="events-grid" id="events-container">

_backup/mockups/mobile-explore-hub.html
13:    .brand .logo{width:36px;height:36px;border-radius:12px;background:linear-gradient(135deg,#22d3ee,#a78bfa);display:grid;pl
ace-items:center;}
19:    .tiles{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:16px}
73:          <a href="#" class="tile" id="t-event" style="grid-column:1/-1;">

_backup/eventmaster-multilingual-clean.html
151:        .events-grid {
152:            display: grid;
153:            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
237:        .months-grid {
238:            display: grid;
239:            grid-template-columns: repeat(6, 1fr);
336:            display: grid;
384:            .events-grid {
385:                grid-template-columns: 1fr;
388:            .months-grid {
389:                grid-template-columns: repeat(3, 1fr);
446:        <div class="months-grid">
461:        <div class="events-grid">

_backup/mockups/mobile-explore-hub-segments.html
12:    .seg{display:grid;grid-template-columns:repeat(5,1fr);gap:4px;background:#0d1530;border-radius:12px;padding:4px;border:1p
x solid rgba(255,255,255,.06);margin:0 16px}
15:    .list{padding:10px 16px;display:grid;gap:8px}

_backup/mockups/mobile-explore-hub-v2.html
13:    .logo{width:32px;height:32px;border-radius:10px;background:linear-gradient(135deg,#22d3ee,#a78bfa);display:grid;place-ite
ms:center}
23:    .tiles{display:grid;grid-template-columns:1fr 1fr;gap:10px;padding:12px 16px 16px}
50:        <!-- Compact grid with smaller icons -->

_backup/mockups/mobile-list-restaurants.html
16:    .list{padding:10px 16px;display:grid;gap:10px}

_backup/mockups/mobile-explore-hub-events-focused.html
22:    .tiles{display:grid;grid-template-columns:1fr 1fr;gap:12px;padding:14px}
I'm looking for a structure describing the nine categories, possibly in translations or components.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/page-neon.tsx
"use client";

export const dynamic = 'force-dynamic';
import NeonHomepage from "./components/NeonHomepage";

export default function Home() {
  return <NeonHomepage />;
}root@fe8e7d45430e:/workspace/missinggold#
I’ll check the src/app/utils folder to see if the dataset is there.

}root@fe8e7d45430e:/workspace/missinggold# ls src/app/utils
pwa.ts
I’ll check if there’s a dataset or category list in the prisma/schema.prisma file.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' prisma/schema.prisma
// Prisma schema for Eventra MVP (User, Event)
// SQLite for local/dev

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  events    Event[]
  venues    Venue[]  // Multi-venue platform support
  resets    PasswordResetToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id            String   @id @default(cuid())
  // Base fields not localized
  date          DateTime
  category      String?
  imageUrl      String?
  whatsappGroup String?
  whatsappPhone String?
  contactMethod String?
  sourceUrl     String?
  publicId      String   @unique
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  // New city code (display via translations file)
  city          String?
  // Geocoded coordinates (optional)
  latitude      Float?
  longitude     Float?
  // Localized content via translations
  translations  EventTranslation[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Locale {
  en
  ar
  ku
}

model EventTranslation {
  id          String  @id @default(cuid())
  locale      Locale
  title       String
  description String
  location    String
  event       Event   @relation(fields: [eventId], references: [id])
  eventId     String

  @@unique([eventId, locale])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Venue types for multi-platform support
enum VenueType {
  EVENT
  HOTEL
  RESTAURANT
  ACTIVITY
  SERVICE
}

enum VenueStatus {
  ACTIVE
  PENDING
  SUSPENDED
  CLOSED
}

// Multi-venue platform model
model Venue {
  id            String       @id @default(cuid())
  // Core venue info
  type          VenueType
  status        VenueStatus  @default(PENDING)
  publicId      String       @unique

  // Pricing and availability
  priceRange    String?      // e.g., "$25-50", "$$", "Free"
  availability  String?      // JSON string for complex availability

  // Business info
  businessEmail String?
  businessPhone String?
  website       String?
  socialLinks   String?      // JSON array of social media links

  // Location and contact
  address       String?
  city          String?
  latitude      Float?
  longitude     Float?

  // Images and media
  imageUrl      String?
  galleryUrls   String?      // JSON array of additional images
  videoUrl      String?

  // Booking and contact
  bookingUrl    String?
  whatsappPhone String?
  contactMethod String?

  // For events: date/time info
  eventDate     DateTime?

  // For hotels: amenities and features
  amenities     String?      // JSON array of amenities
  features      String?      // JSON array of features

  // For restaurants: cuisine and dietary info
  cuisineType   String?
  dietaryOptions String?     // JSON array (vegan, halal, etc.)

  // SEO and discovery
  tags          String?      // JSON array of tags
  category      String?      // main category
  subcategory   String?

  // Platform management
  featured      Boolean      @default(false)
  verified      Boolean      @default(false)

  // Relations
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  translations  VenueTranslation[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Venue translations for multi-language support
model VenueTranslation {
  id          String  @id @default(cuid())
  locale      Locale

  // Core content
  title       String
  description String
  location    String?

  // Additional localized content
  amenities   String? // JSON array of localized amenities
  features    String? // JSON array of localized features

  // Relations
  venue       Venue   @relation(fields: [venueId], references: [id])
  venueId     String

  @@unique([venueId, locale])
}

// Simple CMS-style content overrides per locale and key
model Content {
  id        String   @id @default(cuid())
  key       String
  locale    Locale
  data      String   // JSON or plain text content
  updatedAt DateTime @updatedAt

  @@unique([key, locale])
}
Looks like the subcategory field exists; I'll search for relevant data in scripts or samples.

root@fe8e7d45430e:/workspace/missinggold# rg "subcategory" -n
prisma/schema.prisma
139:  subcategory   String?

prisma/migrations/20250921112738_add_multi_venue_support/migration.sql
30:    "subcategory" TEXT,

src/app/api/venues/route.ts
70:        subcategory: venue.subcategory,
188:        subcategory: data.subcategory || '',
I'll check the public/data directory to verify subcategory data.

root@fe8e7d45430e:/workspace/missinggold# ls public/data
events.json
I'll check scripts/csv-to-events-json to see if there's any mapping there.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' scripts/csv-to-events-json.ts
/*
  Convert a Google Sheets CSV (or local CSV) into public/data/events.json
  for a safe, DB-less deployment (served when NEXT_PUBLIC_EVENTS_STATIC=1).

  Usage:
    npx tsx scripts/csv-to-events-json.ts --url "https://docs.google.com/spreadsheets/d/FILE_ID/export?format=csv"
    npx tsx scripts/csv-to-events-json.ts --file "./data/events.csv"

  Spreadsheet columns supported (best-effort):
    - City
    - Event title
    - Category
    - Date(s) & time
    - Venue (full address)
    - Organizer / contact
    - Short description
    - Ticket / price / booking link
    - Source URL(s)
    - Confidence flag

  The output JSON array uses the same fields used by the UI and /api/events static mode:
    id, publicId, date, category, imageUrl, whatsappGroup, whatsappPhone, contactMethod, city, user, title, description, locatio
n
*/

import { parse as parseCsv } from 'csv-parse/sync';
import { readFile, writeFile, mkdir } from 'fs/promises';
import path from 'path';

function log(msg: string) { process.stdout.write(`[csv2json] ${msg}\n`); }

function normalizeHeader(h: string): string {
  return (h || '')
    .toLowerCase()
    .replace(/\s+/g, '_')
    .replace(/[^a-z0-9_]/g, '')
    .trim();
}

function pick(row: Record<string, any>, candidates: string[]): string {
  for (const c of candidates) {
    const norm = normalizeHeader(c);
    for (const key in row) {
      if (normalizeHeader(key) === norm) {
        const v = row[key];
        if (v !== undefined && v !== null && String(v).trim() !== '') return String(v).trim();
      }
    }
  }
  return '';
}

function classifyCategory(rawTitle: string, rawCategory: string): { key: string, display: string } {
  const text = `${rawTitle} ${rawCategory}`.toLowerCase();
  const hit = (words: string[]) => words.some(w => text.includes(w));
  if (hit(['music','concert','festival','dj','band','song'])) return { key: 'music', display: 'Music & Concerts' };
  if (hit(['sport','football','soccer','basketball','match','marathon','fitness'])) return { key: 'sports', display: 'Sports & F
itness' };
  if (hit(['food','restaurant','cafe','dinner','kitchen','cook','culinary','taste'])) return { key: 'food', display: 'Food & Dri
nk' };
  if (hit(['business','startup','marketing','finance','sales','leadership','workshop'])) return { key: 'business', display: 'Bus
iness' };
  if (hit(['tech','technology','developer','program','coding','ai','ml','data','innovation'])) return { key: 'tech', display: 'T
echnology & Innovation' };
  if (hit(['art','gallery','exhibit','painting','sculpture','museum','culture'])) return { key: 'art', display: 'Arts & Culture'
 };
  if (hit(['health','medical','clinic','wellness','yoga','mental'])) return { key: 'health', display: 'Health & Wellness' };
  if (hit(['community','volunteer','meetup','social','charity','youth','family'])) return { key: 'community', display: 'Communit
y & Social' };
  return { key: 'general', display: 'Community & Social' };
}

function placeholderImage(type: string = 'general', width = 1200, height = 630) {
  const base: Record<string, string> = {
    tech: `https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=${width}&h=${height}&fit=crop&crop=center&auto=format&
q=80`,
    music: `https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=${width}&h=${height}&fit=crop&crop=center&auto=format
&q=80`,
    business: `https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=${width}&h=${height}&fit=crop&crop=center&auto=for
mat&q=80`,
    art: `https://images.unsplash.com/photo-1549490349-8643362247b5?w=${width}&h=${height}&fit=crop&crop=center&auto=format&q=80
`,
    food: `https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=${width}&h=${height}&fit=crop&crop=center&auto=format&
q=80`,
    sports: `https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=${width}&h=${height}&fit=crop&crop=center&auto=forma
t&q=80`,
    health: `https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=${width}&h=${height}&fit=crop&crop=center&auto=format&q
=80`,
    community: `https://images.unsplash.com/photo-1529156069898-49953e39b3ac?w=${width}&h=${height}&fit=crop&crop=center&auto=fo
rmat&q=80`,
    general: `https://images.unsplash.com/photo-1492684223066-81342ee5ff30?w=${width}&h=${height}&fit=crop&crop=center&auto=form
at&q=80`,
  };
  return base[type] || base.general;
}

function parseDateField(row: Record<string, any>): string | null {
  // Try various date headers used by the sheet
  const candidates = [
    'date(s)_&_time', // normalized "Date(s) & time"
    'datetime', 'date_time', 'date_and_time', 'date', 'event_date'
  ];
  let raw = '';
  for (const c of candidates) {
    for (const key in row) {
      if (normalizeHeader(key) === c) { raw = String(row[key] || '').trim(); break; }
    }
    if (raw) break;
  }
  if (!raw) return null;
  // Basic parse; if includes ranges, take first date-like segment
  const firstPart = raw.split(/[–—-]|to/i)[0].trim();
  const parsed = new Date(firstPart);
  if (isNaN(parsed.getTime())) return null;
  return parsed.toISOString();
}

async function main() {
  const args = process.argv.slice(2);
  let src = '';
  let isUrl = false;
  for (let i = 0; i < args.length; i++) {
    if (args[i] === '--url' && args[i+1]) { src = args[i+1]; isUrl = true; i++; }
    else if (args[i] === '--file' && args[i+1]) { src = args[i+1]; isUrl = false; i++; }
  }
  if (!src) {
    log('Provide --url <csv_url> or --file <path>');
    process.exit(1);
  }

  let csvText = '';
  if (isUrl) {
    log(`Fetching CSV: ${src}`);
    const res = await fetch(src);
    if (!res.ok) { throw new Error(`CSV fetch failed: ${res.status} ${res.statusText}`); }
    csvText = await res.text();
  } else {
    const absolute = path.isAbsolute(src) ? src : path.join(process.cwd(), src);
    log(`Reading CSV file: ${absolute}`);
    csvText = await readFile(absolute, 'utf8');
  }

  const rows = parseCsv(csvText, { columns: true, skip_empty_lines: true, bom: true, relax_quotes: true, trim: true }) as Record
<string, any>[];
  log(`Rows parsed: ${rows.length}`);

  const out: any[] = [];
  for (const row of rows) {
    const city = pick(row, ['City','city']);
    const title = pick(row, ['Event title','title','event_title']);
    const categoryIn = pick(row, ['Category','category']);
    const dateIso = parseDateField(row);
    const location = pick(row, ['Venue (full address)','venue (full address)','venue_full_address','venue','address','location']
);
    const organizer = pick(row, ['Organizer / contact','organizer_contact','organizer','contact']);
    const description = pick(row, ['Short description','short_description','description','details','about']);
    const ticket = pick(row, ['Ticket / price / booking link','ticket_price_booking_link','price','ticket']);
    const source = pick(row, ['Source URL(s)','source_url(s)','source_urls','source_url','source','link']);
    const confidence = pick(row, ['Confidence flag','confidence_flag','status']);

    // Skip pending/placeholder rows
    const line = `${title} ${description} ${confidence}`.toLowerCase();
    if (!title || !dateIso) continue;
    if (line.includes('research pending') || line.includes('pending')) continue;

    const cat = classifyCategory(title, categoryIn);
    const imageUrl = placeholderImage(cat.key);

    out.push({
      id: Math.random().toString(36).slice(2),
      publicId: Math.random().toString(36).slice(2, 10),
      date: dateIso,
      category: cat.display,
      imageUrl,
      whatsappGroup: '',
      whatsappPhone: '',
      contactMethod: organizer || '',
      city: city || '',
      user: { name: 'Imported', email: 'import@events.local' },
      title,
      description,
      location,
      sourceUrl: source || ticket || ''
    });
  }

  const outDir = path.join(process.cwd(), 'public', 'data');
  await mkdir(outDir, { recursive: true });
  const outPath = path.join(outDir, 'events.json');
  await writeFile(outPath, JSON.stringify(out, null, 2), 'utf8');
  log(`Wrote ${out.length} events -> ${outPath}`);
}

main().catch((e) => { console.error(e); process.exit(1); });root@fe8e7d45430e:/workspace/missinggold#
I should look into the marketing docs to confirm if the 9 categories exist there.

main().catch((e) => { console.error(e); process.exit(1); });root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' MARKETING_
REVENUE_STRATEGY.md
# 🚀 EVENTRA: COMPREHENSIVE MARKETING & REVENUE STRATEGY
## Iraq Launch → Global Expansion Roadmap

---

## 🎯 **EXECUTIVE SUMMARY**

**Mission**: Launch Eventra as the dominant event platform in Iraq, then rapidly scale across the Middle East using AI-powered a
utomation and intelligent localization.

**Strategy**: Start with Iraq's underserved Kurdish and Arabic markets, build automated revenue streams, then replicate the mode
l across 20+ countries with minimal manual intervention.

**Goal**: $10M ARR by Year 2, $50M ARR by Year 3, across 10+ countries.

---

## 🌍 **INTELLIGENT LOCALIZATION STRATEGY**

### **🧠 AI-POWERED GEO-LANGUAGE DETECTION**

#### **Smart Language Selection System**
```javascript
// Auto-detect user's optimal language
const detectOptimalLanguage = (userLocation, browserLang, userHistory) => {
  // Priority order:
  1. User's saved preference (highest priority)
  2. Geo-location + cultural mapping
  3. Browser language detection
  4. Fallback to region default

  // Iraq Example:
  Baghdad → Arabic (default)
  Erbil/Sulaymaniyah → Kurdish (default)
  Tourist areas → English option prominent
}
```

#### **Geo-Cultural Intelligence Map**
```
IRAQ LOCALIZATION:
🏙️ Baghdad: Arabic (primary), English (business)
🏔️ Erbil: Kurdish (primary), Arabic (secondary), English (business)
🏛️ Sulaymaniyah: Kurdish (primary), Arabic (secondary)
🌍 Tourist hotspots: English prominent with local language

UAE LOCALIZATION:
🏙️ Dubai: English (primary), Arabic (secondary)
🏛️ Abu Dhabi: Arabic (primary), English (business)
🏖️ Tourist areas: English (primary), Arabic (cultural events)

TURKEY LOCALIZATION:
🏙️ Istanbul: Turkish (primary), English (business), Kurdish (southeast)
🏔️ Southeast regions: Kurdish (primary), Turkish (secondary)
```

### **🎨 CULTURAL ADAPTATION ENGINE**

#### **Content Customization by Region**
```
EVENT CATEGORIES (Auto-adapted by location):

IRAQ:
- Kurdish Cultural Events (Newroz, traditional festivals)
- Islamic Religious Events (Ramadan, Eid celebrations)
- Business Conferences (oil, tech, trade)
- Family Events (wedding halls, gatherings)
- Educational Seminars (universities, training)

UAE:
- International Business Events (trade shows, conferences)
- Cultural Festivals (multicultural celebrations)
- Sports Events (Formula 1, football)
- Luxury Events (galas, exhibitions)
- Tech & Innovation (startup events, AI conferences)

TURKEY:
- Cultural Heritage Events (historical celebrations)
- Business Conferences (manufacturing, tourism)
- Kurdish Cultural Events (southeast regions)
- International Events (connecting Europe-Asia)
```

---

## 💰 **EXHAUSTIVE REVENUE STREAM ARCHITECTURE**

### **🏆 PRIMARY REVENUE STREAMS (High-Volume)**

#### **1. Event Ticketing Commission (40% of revenue)**
```
PRICING MODEL:
- Free events: $0 commission (build user base)
- Paid events: 2.5% commission (competitive vs Eventbrite's 3-5%)
- Premium events: 3.5% commission (high-value events)
- Corporate events: 4.5% commission (enterprise pricing)

VOLUME PROJECTIONS (Iraq Year 1):
- 1,000 events/month × $50 average ticket × 2.5% = $1,250/month
- Growing to 10,000 events/month × $75 average = $18,750/month
- Annual potential: $150K-$225K from Iraq alone
```

#### **2. Hotel Booking Integration (25% of revenue)**
```
PARTNERSHIP MODEL:
- Commission: 8-12% from hotel bookings
- Average booking: $80/night × 2 nights = $160
- Commission per booking: $13-19
- Cross-sell rate: 15% of event attendees

AUTOMATION:
- AI suggests hotels near event venues
- Dynamic pricing based on event dates
- Package deals (event ticket + hotel)
- Instant booking through API integration

PROJECTED REVENUE:
- 100 hotel bookings/month × $15 commission = $1,500/month
- Growing to 1,000 bookings/month = $15,000/month
- Annual potential: $120K-$180K from Iraq alone
```

#### **3. Travel Package Commissions (15% of revenue)**
```
SERVICES:
- Flight bookings (5-8% commission)
- Car rentals (10-15% commission)
- Tour packages (15-20% commission)
- Complete travel itineraries

AI AUTOMATION:
- Auto-generate travel packages based on events
- Cross-country event recommendations
- Dynamic pricing optimization
- Partnership with regional airlines

REVENUE EXAMPLE:
- Flight booking: $400 × 5% = $20 commission
- Car rental: $100 × 12% = $12 commission
- Tour package: $200 × 18% = $36 commission
- Total per package: $68 commission
- 50 packages/month = $3,400/month
```

### **🎯 SECONDARY REVENUE STREAMS (High-Margin)**

#### **4. Premium Event Listings (10% of revenue)**
```
PREMIUM FEATURES:
- Featured placement: $20-50/event
- Homepage banner: $100-200/event
- Social media promotion: $30-80/event
- Email marketing inclusion: $25-60/event

AUTOMATION:
- Self-service premium upgrade portal
- AI-optimized placement based on user behavior
- Automated social media posting
- Performance analytics dashboard

MONTHLY POTENTIAL:
- 100 premium listings × $35 average = $3,500/month
```

#### **5. Corporate Event Management (8% of revenue)**
```
ENTERPRISE SERVICES:
- Custom event pages: $200-500 per event
- Branded microsites: $500-1,500 per client
- Advanced analytics: $100-300/month per client
- Dedicated support: $200-500/month per client

TARGET CLIENTS (Iraq):
- Oil companies (ExxonMobil, BP, local firms)
- Government agencies (trade ministries)
- International NGOs (UN, World Bank)
- Universities (Baghdad University, American University)

REVENUE POTENTIAL:
- 20 enterprise clients × $400/month = $8,000/month
```

#### **6. Advertising & Sponsored Content (2% of revenue)**
```
AD FORMATS:
- Banner ads: $5-15 CPM
- Sponsored event listings: $50-200 per listing
- Newsletter sponsorships: $100-500 per edition
- Video ads: $10-25 CPM

TARGET ADVERTISERS:
- Event venues (wedding halls, hotels)
- Catering companies
- Photography services
- Travel agencies
- Local businesses

AUTOMATION:
- Programmatic ad serving
- AI-optimized ad placement
- Performance tracking
I'll search the docs for a list of categories and subcategories.

root@fe8e7d45430e:/workspace/missinggold# rg "Categories" -n *.md
STEP_3_COMPLETION_REPORT.md
75:- ✅ **Lines 17-18:** `"All Cities"` and `"All Categories"` → Dynamic initialization with `t()`

PERFORMANCE_OPTIMIZATION_REPORT.md
112:│   ├── useCategories() - Data transformation

I18N_IMPLEMENTATION_SUMMARY.md
20:- **✅ Navigation Menu**: All nav items translated (Home, Events, Categories, etc.)

NAVIGATION_LOCALE_FIX_MEMORY.md
90:2. **Categories Page 404 Error**:
109:2. **Categories Page 404**: ✅ `/ku/categories` now works (200 response)

QUICK_REFERENCE.md
134:// Categories

PRACTICAL_MULTI_COUNTRY_GUIDE.md
33:// Categories: Luxury Events, Business Networking, Desert Adventures
69:import { getCountryCities, getCountryCategories } from '../lib/countries';
77:  const categories = getCountryCategories(countryCode);
120:Categories: Tech, Music, Business
128:Categories: Luxury Events, Desert Adventures, Business Networking

UI_IMPROVEMENTS.md
90:- **Categories**: Events, Hotels, Restaurants, Cafes, Tourism
I'll open the file to see if it contains country-specific categories.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' PRACTICAL_MULTI_COUNTRY_GUIDE.md
# 🚀 PRACTICAL MULTI-COUNTRY IMPLEMENTATION GUIDE

## ❓ **YOUR QUESTION ANSWERED**

**Q: "Do we need to do the job from beginning or it's easier to adapt it and clone it?"**

**A: It's MUCH easier to adapt! Here's exactly how:**

---

## 🎯 **THE SIMPLE ANSWER**

**90% of your code stays exactly the same!** Only these things change per country:
1. **Cities list** (Dubai vs Baghdad)
2. **Currency** (AED vs IQD)
3. **Local categories** (Desert Adventures vs Kurdish Events)
4. **Translation files** (UAE Arabic vs Iraqi Arabic)

**That's literally it!**

---

## 🛠️ **EXACT STEPS TO ADD UAE (2-3 days work)**

### **Step 1: Add UAE Configuration (30 minutes)**

I already created `src/lib/countries.ts` with UAE ready! Just add it to your project:

```typescript
// UAE is already configured in countries.ts
// Cities: Dubai, Abu Dhabi, Sharjah, etc.
// Currency: AED (د.إ)
// Categories: Luxury Events, Business Networking, Desert Adventures
```

### **Step 2: Create UAE Translation File (2 hours)**

```bash
# Copy your existing Arabic file
Copy-Item messages/ar.json messages/ar-AE.json
```

Then edit `messages/ar-AE.json` with UAE-specific terms:
```json
{
  "cities": {
    "dubai": "دبي",
    "abudhabi": "أبو ظبي",
    "sharjah": "الشارقة"
  },
  "categories": {
    "luxury": "فعاليات فاخرة",
    "desert": "مغامرات صحراوية",
    "business": "شبكات الأعمال"
  },
  "currency": {
    "symbol": "د.إ",
    "name": "درهم إماراتي"
  }
}
```

### **Step 3: Update Your Event Form (1 hour)**

Your existing `EventForm.tsx` automatically adapts! Just import the country config:

```typescript
// In src/app/dashboard/EventForm.tsx
import { getCountryCities, getCountryCategories } from '../lib/countries';

export default function EventForm() {
  // Get current country (from URL or user selection)
  const countryCode = 'AE'; // This comes from routing

  // Your form automatically uses UAE cities and categories!
  const cities = getCountryCities(countryCode);
  const categories = getCountryCategories(countryCode);

  // Rest of your code stays EXACTLY the same!
  return (
    <form>
      <select>
        {cities.map(city => (
          <option key={city} value={city}>{city}</option>
        ))}
      </select>
      <select>
        {categories.map(cat => (
          <option key={cat.key} value={cat.key}>
            {cat.icon} {cat.name}
          </option>
        ))}
      </select>
    </form>
  );
}
```

### **Step 4: Update Routing (30 minutes)**

Add UAE to your existing routing:

```typescript
// In your existing routing file
const SUPPORTED_COUNTRIES = ['IQ', 'AE']; // Just add AE!

// Your existing middleware automatically handles UAE
// No code changes needed!
```

---

## 📸 **BEFORE/AFTER COMPARISON**

### **Iraq (Current)**
```
URL: eventra.com/iraq/events
Cities: Baghdad, Basra, Erbil
Currency: IQD (د.ع)
Categories: Tech, Music, Business
```

### **UAE (After 2 days)**
```
URL: eventra.com/uae/events
Cities: Dubai, Abu Dhabi, Sharjah
Currency: AED (د.إ)
Categories: Luxury Events, Desert Adventures, Business Networking
```

**Same code, different data!** 🎉

---

## 💻 **WHAT DOESN'T CHANGE (90% of your code)**

### ✅ **These Stay Exactly The Same:**
- All your React components
- Authentication system (NextAuth)
- Database schema (Prisma)
- Security (rate limiting, CSP)
- Image optimization
- PWA features
- Language switching (Arabic/English)
- All your beautiful UI

### ✅ **Your Existing Features Work Immediately:**
- User registration/login ✅
- Event creation ✅
- Image upload ✅
- WhatsApp integration ✅
- Public event pages ✅
- Search and filtering ✅
- Mobile responsiveness ✅

---

## 🔧 **TECHNICAL PROOF: Update Your EventForm**

Here's how to make your current EventForm work for multiple countries:

<function_calls>
<invoke name="edit_files">
<parameter name="title">EXAMPLE: Update EventForm for multi-country supportroot@fe8e7d45430e:/workspace/missinggold#
I'm checking src/lib/countries.ts for the actual data structure related to categories.

<parameter name="title">EXAMPLE: Update EventForm for multi-country supportroot@fe8e7d45430e:/workspace/missinggold# sed -n '1,2
00p' src/lib/countries.ts
// Multi-country configuration for Eventra
// Add new countries here with their specific settings

export interface CountryConfig {
  name: string;
  code: string;
  currency: string;
  currencySymbol: string;
  languages: string[];
  defaultLanguage: string;
  cities: string[];
  timezone: string;
  dateFormat: string;
  features: string[];
  paymentMethods: string[];
  categories: Array<{
    key: string;
    name: string;
    icon: string;
  }>;
}

export const COUNTRY_CONFIGS: Record<string, CountryConfig> = {
  // EXISTING: Iraq (your current setup)
  IQ: {
    name: 'Iraq',
    code: 'IQ',
    currency: 'IQD',
    currencySymbol: 'د.ع',
    languages: ['ar', 'ku', 'en'],
    defaultLanguage: 'ar',
    cities: [
      'Baghdad', 'Basra', 'Erbil', 'Sulaymaniyah',
      'Mosul', 'Duhok', 'Kirkuk', 'Anbar', 'Najaf', 'Karbala'
    ],
    timezone: 'Asia/Baghdad',
    dateFormat: 'DD/MM/YYYY',
    features: ['whatsapp_integration', 'cash_payments', 'multilingual'],
    paymentMethods: ['cash', 'bank_transfer'],
    categories: [
      { key: 'tech', name: 'Technology', icon: '💻' },
      { key: 'music', name: 'Music', icon: '🎵' },
      { key: 'business', name: 'Business', icon: '💼' },
      { key: 'art', name: 'Arts & Culture', icon: '🎨' },
      { key: 'sports', name: 'Sports', icon: '⚽' },
      { key: 'food', name: 'Food & Dining', icon: '🍽️' },
      { key: 'health', name: 'Health & Wellness', icon: '🏥' },
      { key: 'community', name: 'Community', icon: '👥' }
    ]
  },

  // NEW: UAE
  AE: {
    name: 'United Arab Emirates',
    code: 'AE',
    currency: 'AED',
    currencySymbol: 'د.إ',
    languages: ['ar', 'en'],
    defaultLanguage: 'ar',
    cities: [
      'Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman',
      'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain'
    ],
    timezone: 'Asia/Dubai',
    dateFormat: 'DD/MM/YYYY',
    features: ['credit_cards', 'luxury_events', 'international_speakers'],
    paymentMethods: ['credit_card', 'apple_pay', 'google_pay', 'cash'],
    categories: [
      { key: 'business', name: 'Business Networking', icon: '💼' },
      { key: 'luxury', name: 'Luxury Events', icon: '💎' },
      { key: 'tech', name: 'Technology', icon: '💻' },
      { key: 'desert', name: 'Desert Adventures', icon: '🏜️' },
      { key: 'finance', name: 'Finance & Investment', icon: '💰' },
      { key: 'art', name: 'Arts & Culture', icon: '🎨' },
      { key: 'food', name: 'Fine Dining', icon: '🍽️' },
      { key: 'wellness', name: 'Wellness & Spa', icon: '🧘' }
    ]
  },

  // NEW: Saudi Arabia (for future)
  SA: {
    name: 'Saudi Arabia',
    code: 'SA',
    currency: 'SAR',
    currencySymbol: '﷼',
    languages: ['ar', 'en'],
    defaultLanguage: 'ar',
    cities: [
      'Riyadh', 'Jeddah', 'Mecca', 'Medina', 'Dammam',
      'Khobar', 'Tabuk', 'Abha', 'Taif'
    ],
    timezone: 'Asia/Riyadh',
    dateFormat: 'DD/MM/YYYY',
    features: ['vision_2030', 'mega_events', 'cultural_events'],
    paymentMethods: ['credit_card', 'mada', 'apple_pay', 'stc_pay'],
    categories: [
      { key: 'business', name: 'Business', icon: '💼' },
      { key: 'culture', name: 'Cultural Events', icon: '🏛️' },
      { key: 'sports', name: 'Sports', icon: '⚽' },
      { key: 'tech', name: 'Technology', icon: '💻' },
      { key: 'entertainment', name: 'Entertainment', icon: '🎭' },
      { key: 'education', name: 'Education', icon: '📚' }
    ]
  }
};

// Helper functions
export const getCountryConfig = (countryCode: string): CountryConfig | null => {
  return COUNTRY_CONFIGS[countryCode.toUpperCase()] || null;
};

export const getAllCountries = (): CountryConfig[] => {
  return Object.values(COUNTRY_CONFIGS);
};

export const getCountryCities = (countryCode: string): string[] => {
  const config = getCountryConfig(countryCode);
  return config ? config.cities : [];
};

export const getCountryCategories = (countryCode: string) => {
  const config = getCountryConfig(countryCode);
  return config ? config.categories : [];
};root@fe8e7d45430e:/workspace/missinggold#
I'll search for "sub-categories" or similar terms in docs to find the lists.

};root@fe8e7d45430e:/workspace/missinggold# rg -i "subcat" -n
prisma/schema.prisma
139:  subcategory   String?

prisma/migrations/20250921112738_add_multi_venue_support/migration.sql
30:    "subcategory" TEXT,

src/app/api/venues/route.ts
70:        subcategory: venue.subcategory,
188:        subcategory: data.subcategory || '',
I’ll check public/mockups for a dataset. Also need to review src/app/restaurants/page.tsx for categories.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/restaurants/page.tsx
"use client";

import Link from 'next/link';

export default function RestaurantsPage() {
  const restaurants = [
    {
      id: '1',
      name: 'Al-Mansour Palace Restaurant',
      description: 'Authentic Iraqi cuisine in an elegant setting',
      rating: 4.7,
      priceRange: '$$$',
      image: '🍽️',
      cuisine: 'Traditional Iraqi',
      location: 'Baghdad Center'
    },
    {
      id: '2',
      name: 'Kurdistan Grill House',
      description: 'Famous for kebabs and Kurdish specialties',
      rating: 4.5,
      priceRange: '$$',
      image: '🥩',
      cuisine: 'Kurdish Grills',
      location: 'Erbil'
    },
    {
      id: '3',
      name: 'Mesopotamia Fine Dining',
      description: 'Modern Iraqi cuisine with a contemporary twist',
      rating: 4.8,
      priceRange: '$$$$',
      image: '🍷',
      cuisine: 'Modern Iraqi',
      location: 'Baghdad'
    },
    {
      id: '4',
      name: 'Basra Fish Market',
      description: 'Fresh seafood from the Persian Gulf',
      rating: 4.4,
      priceRange: '$$',
      image: '🐟',
      cuisine: 'Seafood',
      location: 'Basra'
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 107, 53, 0.1)',
          border: '2px solid var(--restaurants-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--restaurants-color)',
            textShadow: '0 0 10px var(--restaurants-color)',
            marginBottom: '16px'
          }}>
            🍽️ Restaurants
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Discover the finest dining experiences in Iraq & Kurdistan
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button restaurants">
          ← Back to Home
        </Link>
      </div>

      {/* Restaurants Grid */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
        gap: '24px',
        maxWidth: '1200px',
        margin: '0 auto'
      }}>
        {restaurants.map((restaurant) => (
          <div key={restaurant.id} className="neon-card restaurants restaurants-glow">
            <div style={{ padding: '24px' }}>
              {/* Restaurant Image/Icon */}
              <div style={{
                width: '100%',
                height: '200px',
                background: 'linear-gradient(135deg, var(--restaurants-color), var(--bg-secondary))',
                borderRadius: '12px',
                marginBottom: '20px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '4rem'
              }}>
                {restaurant.image}
              </div>

              {/* Restaurant Info */}
              <h3 style={{
                color: 'var(--text-primary)',
                fontSize: '1.5rem',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--restaurants-color)'
              }}>
                {restaurant.name}
              </h3>

              <p style={{
                color: 'var(--text-secondary)',
                marginBottom: '16px',
                lineHeight: '1.6'
              }}>
                {restaurant.description}
              </p>

              <div style={{
                display: 'grid',
                gridTemplateColumns: '1fr 1fr',
                gap: '12px',
                marginBottom: '16px'
              }}>
                <div>
                  <span style={{
                    color: 'var(--restaurants-color)',
                    fontSize: '1.1rem',
                    fontWeight: 'bold'
                  }}>
                    ⭐ {restaurant.rating}
                  </span>
                </div>
                <div>
                  <span style={{
                    color: 'var(--text-tertiary)',
                    fontSize: '0.9rem'
                  }}>
                    📍 {restaurant.location}
                  </span>
                </div>
                <div>
                  <span style={{
                    color: 'var(--restaurants-color)',
                    fontSize: '0.9rem',
                    fontWeight: '600'
                  }}>
                    🍴 {restaurant.cuisine}
                  </span>
                </div>
                <div>
                  <span style={{
                    color: 'var(--text-tertiary)',
                    fontSize: '0.9rem'
                  }}>
                    💰 {restaurant.priceRange}
                  </span>
                </div>
              </div>

              <div style={{
                display: 'flex',
                gap: '12px',
                justifyContent: 'center'
              }}>
                <button className="neon-button restaurants" style={{
                  fontSize: '0.9rem',
                  padding: '8px 16px'
                }}>
                  View Menu
                </button>
                <button className="neon-button tourism" style={{
                  fontSize: '0.9rem',
                  padding: '8px 16px'
                }}>
                  Reserve Table
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Food Categories */}
      <div style={{
        marginTop: '60px',
root@fe8e7d45430e:/workspace/missinggold# sed -n '200,400p' src/app/restaurants/page.tsx
        marginTop: '60px',
        textAlign: 'center'
      }}>
        <h2 style={{
          color: 'var(--restaurants-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--restaurants-color)'
        }}>
          Browse by Cuisine
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '20px',
          maxWidth: '800px',
          margin: '0 auto'
        }}>
          {[
            { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
            { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
            { name: 'Middle Eastern', icon: '🧆', count: 15 },
            { name: 'Seafood', icon: '🦐', count: 12 },
            { name: 'International', icon: '🍝', count: 20 },
            { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
          ].map((cuisine, index) => (
            <div
              key={index}
              className="category-icon restaurants restaurants-glow"
              style={{
                cursor: 'pointer',
                animationDelay: `${index * 0.1}s`
              }}
            >
              <div style={{ fontSize: '2.5rem', marginBottom: '8px' }}>
                {cuisine.icon}
              </div>
              <div style={{
                color: 'var(--restaurants-color)',
                fontWeight: '600',
                marginBottom: '4px'
              }}>
                {cuisine.name}
              </div>
              <div style={{
                color: 'var(--text-tertiary)',
                fontSize: '0.9rem'
              }}>
                {cuisine.count} places
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card restaurants restaurants-glow" style={{
          maxWidth: '600px',
          margin: '0 auto',
          padding: '32px'
        }}>
          <h2 style={{
            color: 'var(--restaurants-color)',
            fontSize: '2rem',
            marginBottom: '16px',
            textShadow: '0 0 10px var(--restaurants-color)'
          }}>
            Own a Restaurant?
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            marginBottom: '24px',
            fontSize: '1.1rem'
          }}>
            Join Eventra and showcase your restaurant to thousands of food lovers
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button restaurants">
              List Your Restaurant
            </button>
            <button className="neon-button cafes">
              Browse Cafes
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}root@fe8e7d45430e:/workspace/missinggold#
Noting that there are subcategories under "Browse by Cuisine." Should I check similar for hotels?

}root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/tourism/page.tsx
"use client";

import Link from 'next/link';

export default function TourismPage() {
  const attractions = [
    {
      id: '1',
      name: 'Ancient Babylon',
      description: 'Explore the legendary ruins of one of history\'s greatest civilizations',
      rating: 4.9,
      category: 'Historical Site',
      image: '🏛️',
      location: 'Babylon, Iraq',
      duration: 'Full Day'
    },
    {
      id: '2',
      name: 'Kurdish Mountains',
      description: 'Breathtaking mountain landscapes and traditional villages',
      rating: 4.8,
      category: 'Nature & Adventure',
      image: '🏔️',
      location: 'Kurdistan Region',
      duration: '2-3 Days'
    },
    {
      id: '3',
      name: 'Marsh Arab Culture',
      description: 'Unique wetland ecosystem and ancient way of life',
      rating: 4.7,
      category: 'Cultural Experience',
      image: '🌾',
      location: 'Southern Iraq',
      duration: '1-2 Days'
    },
    {
      id: '4',
      name: 'Baghdad Museums',
      description: 'World-class artifacts and Iraqi heritage collections',
      rating: 4.6,
      category: 'Museums & Culture',
      image: '🏺',
      location: 'Baghdad',
      duration: 'Half Day'
    }
  ];

  const tourismCategories = [
    { name: 'Historical Sites', icon: '🏛️', count: 45, description: 'Ancient civilizations & monuments' },
    { name: 'Natural Wonders', icon: '🌄', count: 32, description: 'Mountains, rivers & landscapes' },
    { name: 'Cultural Experiences', icon: '🎭', count: 28, description: 'Local traditions & customs' },
    { name: 'Adventure Tours', icon: '🧗', count: 24, description: 'Outdoor activities & exploration' },
    { name: 'Religious Sites', icon: '🕌', count: 38, description: 'Sacred places & pilgrimage sites' },
    { name: 'City Tours', icon: '🏙️', count: 22, description: 'Urban exploration & city life' }
  ];

  const highlights = [
    {
      title: "Mesopotamian Heritage",
      description: "Walk through the cradle of civilization and discover 5,000 years of history",
      icon: "📜"
    },
    {
      title: "Kurdish Nature",
      description: "Experience pristine mountain landscapes and traditional mountain culture",
      icon: "🌲"
    },
    {
      title: "Tigris & Euphrates",
      description: "Explore the legendary rivers that shaped human civilization",
      icon: "🌊"
    }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(0, 240, 255, 0.1)',
          border: '2px solid var(--tourism-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--tourism-color)',
            textShadow: '0 0 10px var(--tourism-color)',
            marginBottom: '16px'
          }}>
            📸 Tourism
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Discover the wonders of Iraq & Kurdistan - Where history meets adventure
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button tourism">
          ← Back to Home
        </Link>
      </div>

      {/* Highlights Section */}
      <div style={{ marginBottom: '60px' }}>
        <h2 style={{
          textAlign: 'center',
          color: 'var(--tourism-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--tourism-color)'
        }}>
          Why Visit Iraq & Kurdistan?
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
          gap: '24px',
          maxWidth: '1000px',
          margin: '0 auto',
          marginBottom: '40px'
        }}>
          {highlights.map((highlight, index) => (
            <div key={index} className="neon-card tourism tourism-glow">
              <div style={{ padding: '24px', textAlign: 'center' }}>
                <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
                  {highlight.icon}
                </div>
                <h3 style={{
                  color: 'var(--tourism-color)',
                  fontSize: '1.5rem',
                  marginBottom: '12px',
                  textShadow: '0 0 5px var(--tourism-color)'
                }}>
                  {highlight.title}
                </h3>
                <p style={{
                  color: 'var(--text-secondary)',
                  lineHeight: '1.6'
                }}>
                  {highlight.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Featured Attractions */}
      <div style={{ marginBottom: '60px' }}>
        <h2 style={{
          textAlign: 'center',
          color: 'var(--tourism-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--tourism-color)'
        }}>
          Featured Attractions
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
          gap: '24px',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          {attractions.map((attraction) => (
            <div key={attraction.id} className="neon-card tourism tourism-glow">
              <div style={{ padding: '24px' }}>
                {/* Attraction Image/Icon */}
                <div style={{
                  width: '100%',
                  height: '200px',
                  background: 'linear-gradient(135deg, var(--tourism-color), var(--bg-secondary))',
                  borderRadius: '12px',
                  marginBottom: '20px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '4rem'
                }}>
                  {attraction.image}
                </div>

                {/* Attraction Info */}
                <h3 style={{
root@fe8e7d45430e:/workspace/missinggold# sed -n '200,400p' src/app/tourism/page.tsx
                <h3 style={{
                  color: 'var(--text-primary)',
                  fontSize: '1.5rem',
                  marginBottom: '8px',
                  textShadow: '0 0 5px var(--tourism-color)'
                }}>
                  {attraction.name}
                </h3>

                <p style={{
                  color: 'var(--text-secondary)',
                  marginBottom: '16px',
                  lineHeight: '1.6'
                }}>
                  {attraction.description}
                </p>

                <div style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr',
                  gap: '12px',
                  marginBottom: '16px'
                }}>
                  <div>
                    <span style={{
                      color: 'var(--tourism-color)',
                      fontSize: '1.1rem',
                      fontWeight: 'bold'
                    }}>
                      ⭐ {attraction.rating}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--text-tertiary)',
                      fontSize: '0.9rem'
                    }}>
                      📍 {attraction.location}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--tourism-color)',
                      fontSize: '0.9rem',
                      fontWeight: '600'
                    }}>
                      🎯 {attraction.category}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--text-tertiary)',
                      fontSize: '0.9rem'
                    }}>
                      ⏱️ {attraction.duration}
                    </span>
                  </div>
                </div>

                <div style={{
                  display: 'flex',
                  gap: '12px',
                  justifyContent: 'center'
                }}>
                  <button className="neon-button tourism" style={{
                    fontSize: '0.9rem',
                    padding: '8px 16px'
                  }}>
                    Learn More
                  </button>
                  <button className="neon-button events" style={{
                    fontSize: '0.9rem',
                    padding: '8px 16px'
                  }}>
                    Book Tour
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Tourism Categories */}
      <div style={{
        marginTop: '60px',
        textAlign: 'center'
      }}>
        <h2 style={{
          color: 'var(--tourism-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--tourism-color)'
        }}>
          Explore by Category
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
          gap: '24px',
          maxWidth: '1000px',
          margin: '0 auto'
        }}>
          {tourismCategories.map((category, index) => (
            <div
              key={index}
              className="neon-card tourism tourism-glow"
              style={{
                cursor: 'pointer',
                animationDelay: `${index * 0.1}s`,
                padding: '24px',
                textAlign: 'center',
                transition: 'all 0.3s ease'
              }}
            >
              <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
                {category.icon}
              </div>
              <h3 style={{
                color: 'var(--tourism-color)',
                fontSize: '1.3rem',
                fontWeight: '600',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--tourism-color)'
              }}>
                {category.name}
              </h3>
              <p style={{
                color: 'var(--text-secondary)',
                fontSize: '0.9rem',
                marginBottom: '12px'
              }}>
                {category.description}
              </p>
              <div style={{
                color: 'var(--text-tertiary)',
                fontSize: '0.8rem'
              }}>
                {category.count} places
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Travel Information */}
      <div style={{
        marginTop: '80px',
        textAlign: 'center'
      }}>
        <div className="neon-card events events-glow" style={{
          maxWidth: '800px',
          margin: '0 auto',
          padding: '40px'
        }}>
          <h2 style={{
            color: 'var(--events-color)',
            fontSize: '2.2rem',
            marginBottom: '20px',
            textShadow: '0 0 10px var(--events-color)'
          }}>
            🗺️ Plan Your Journey
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.1rem',
            lineHeight: '1.8',
            marginBottom: '24px'
          }}>
            Iraq and Kurdistan offer incredible diversity - from ancient Mesopotamian sites to Kurdish mountain
            adventures. Whether you&apos;re interested in history, culture, nature, or adventure, we&apos;ll help you
            discover the hidden gems of this remarkable region.
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button tourism">
              Travel Guide
            </button>
            <button className="neon-button hotels">
              Find Hotels
            </button>
            <button className="neon-button restaurants">
              Local Cuisine
            </button>
          </div>
        </div>
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card tourism tourism-glow" style={{
          maxWidth: '600px',
I'm reviewing top-level directories and considering app categories like Events, Restaurants, Hotels, etc.

root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/cafes/page.tsx
"use client";

import Link from 'next/link';

export default function CafesPage() {
  const cafes = [
    {
      id: '1',
      name: 'Baghdad Coffee House',
      description: 'Traditional Iraqi coffee in a cozy atmosphere',
      rating: 4.6,
      priceRange: '$$',
      image: '☕',
      specialty: 'Turkish Coffee',
      location: 'Baghdad Old City'
    },
    {
      id: '2',
      name: 'Kurdish Mountain Cafe',
      description: 'Authentic Kurdish tea and sweets with mountain views',
      rating: 4.8,
      priceRange: '$',
      image: '🫖',
      specialty: 'Kurdish Tea',
      location: 'Erbil Hills'
    },
    {
      id: '3',
      name: 'Tigris River Cafe',
      description: 'Riverside cafe with fresh pastries and specialty drinks',
      rating: 4.5,
      priceRange: '$$',
      image: '🧁',
      specialty: 'Pastries & Desserts',
      location: 'Baghdad Riverside'
    },
    {
      id: '4',
      name: 'Modern Brew Co.',
      description: 'Contemporary cafe with international coffee blends',
      rating: 4.7,
      priceRange: '$$$',
      image: '🥤',
      specialty: 'Specialty Coffee',
      location: 'Erbil Center'
    }
  ];

  const cafeTypes = [
    { name: 'Traditional Coffee Houses', icon: '☕', count: 32, description: 'Authentic Iraqi coffee culture' },
    { name: 'Tea Gardens', icon: '🍵', count: 28, description: 'Kurdish tea traditions' },
    { name: 'Modern Cafes', icon: '🥤', count: 24, description: 'International coffee & vibes' },
    { name: 'Shisha Lounges', icon: '💨', count: 18, description: 'Relaxing hookah experience' },
    { name: 'Bakery Cafes', icon: '🥐', count: 22, description: 'Fresh pastries & coffee' },
    { name: 'Rooftop Cafes', icon: '🌆', count: 15, description: 'City views & coffee' }
  ];

  return (
    <div className="min-h-screen" style={{ padding: '20px' }}>
      {/* Header */}
      <div style={{
        textAlign: 'center',
        marginBottom: '40px',
        padding: '40px 20px'
      }}>
        <div style={{
          display: 'inline-block',
          background: 'rgba(255, 237, 78, 0.1)',
          border: '2px solid var(--cafes-color)',
          borderRadius: '15px',
          padding: '24px',
          backdropFilter: 'blur(10px)'
        }}>
          <h1 style={{
            fontSize: '3rem',
            color: 'var(--cafes-color)',
            textShadow: '0 0 10px var(--cafes-color)',
            marginBottom: '16px'
          }}>
            ☕ Cafes
          </h1>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.2rem'
          }}>
            Experience the rich coffee culture of Iraq & Kurdistan
          </p>
        </div>
      </div>

      {/* Back Button */}
      <div style={{ marginBottom: '32px' }}>
        <Link href="/" className="neon-button cafes">
          ← Back to Home
        </Link>
      </div>

      {/* Featured Cafes Grid */}
      <div style={{
        marginBottom: '60px'
      }}>
        <h2 style={{
          textAlign: 'center',
          color: 'var(--cafes-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--cafes-color)'
        }}>
          Featured Cafes
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
          gap: '24px',
          maxWidth: '1200px',
          margin: '0 auto'
        }}>
          {cafes.map((cafe) => (
            <div key={cafe.id} className="neon-card cafes cafes-glow">
              <div style={{ padding: '24px' }}>
                {/* Cafe Image/Icon */}
                <div style={{
                  width: '100%',
                  height: '200px',
                  background: 'linear-gradient(135deg, var(--cafes-color), var(--bg-secondary))',
                  borderRadius: '12px',
                  marginBottom: '20px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '4rem'
                }}>
                  {cafe.image}
                </div>

                {/* Cafe Info */}
                <h3 style={{
                  color: 'var(--text-primary)',
                  fontSize: '1.5rem',
                  marginBottom: '8px',
                  textShadow: '0 0 5px var(--cafes-color)'
                }}>
                  {cafe.name}
                </h3>

                <p style={{
                  color: 'var(--text-secondary)',
                  marginBottom: '16px',
                  lineHeight: '1.6'
                }}>
                  {cafe.description}
                </p>

                <div style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr',
                  gap: '12px',
                  marginBottom: '16px'
                }}>
                  <div>
                    <span style={{
                      color: 'var(--cafes-color)',
                      fontSize: '1.1rem',
                      fontWeight: 'bold'
                    }}>
                      ⭐ {cafe.rating}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--text-tertiary)',
                      fontSize: '0.9rem'
                    }}>
                      📍 {cafe.location}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--cafes-color)',
                      fontSize: '0.9rem',
                      fontWeight: '600'
                    }}>
                      ✨ {cafe.specialty}
                    </span>
                  </div>
                  <div>
                    <span style={{
                      color: 'var(--text-tertiary)',
                      fontSize: '0.9rem'
                    }}>
                      💰 {cafe.priceRange}
                    </span>
                  </div>
                </div>

                <div style={{
                  display: 'flex',
                  gap: '12px',
                  justifyContent: 'center'
I'll keep going, reviewing the rest for any other category details.

root@fe8e7d45430e:/workspace/missinggold# sed -n '200,400p' src/app/cafes/page.tsx
                  justifyContent: 'center'
                }}>
                  <button className="neon-button cafes" style={{
                    fontSize: '0.9rem',
                    padding: '8px 16px'
                  }}>
                    Visit Cafe
                  </button>
                  <button className="neon-button tourism" style={{
                    fontSize: '0.9rem',
                    padding: '8px 16px'
                  }}>
                    View Menu
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Cafe Types */}
      <div style={{
        marginTop: '60px',
        textAlign: 'center'
      }}>
        <h2 style={{
          color: 'var(--cafes-color)',
          fontSize: '2.5rem',
          marginBottom: '32px',
          textShadow: '0 0 10px var(--cafes-color)'
        }}>
          Explore Cafe Types
        </h2>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
          gap: '24px',
          maxWidth: '1000px',
          margin: '0 auto'
        }}>
          {cafeTypes.map((type, index) => (
            <div
              key={index}
              className="neon-card cafes cafes-glow"
              style={{
                cursor: 'pointer',
                animationDelay: `${index * 0.1}s`,
                padding: '24px',
                textAlign: 'center',
                transition: 'all 0.3s ease'
              }}
            >
              <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
                {type.icon}
              </div>
              <h3 style={{
                color: 'var(--cafes-color)',
                fontSize: '1.3rem',
                fontWeight: '600',
                marginBottom: '8px',
                textShadow: '0 0 5px var(--cafes-color)'
              }}>
                {type.name}
              </h3>
              <p style={{
                color: 'var(--text-secondary)',
                fontSize: '0.9rem',
                marginBottom: '12px'
              }}>
                {type.description}
              </p>
              <div style={{
                color: 'var(--text-tertiary)',
                fontSize: '0.8rem'
              }}>
                {type.count} places
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Coffee Culture Section */}
      <div style={{
        marginTop: '80px',
        textAlign: 'center'
      }}>
        <div className="neon-card tourism tourism-glow" style={{
          maxWidth: '800px',
          margin: '0 auto',
          padding: '40px'
        }}>
          <h2 style={{
            color: 'var(--tourism-color)',
            fontSize: '2.2rem',
            marginBottom: '20px',
            textShadow: '0 0 10px var(--tourism-color)'
          }}>
            ☕ Iraqi Coffee Culture
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            fontSize: '1.1rem',
            lineHeight: '1.8',
            marginBottom: '24px'
          }}>
            From traditional Baghdad coffee houses serving strong Turkish coffee to modern Kurdish tea gardens
            nestled in the mountains, Iraq and Kurdistan offer a rich tapestry of coffee and tea culture.
            Each cup tells a story of hospitality, tradition, and the timeless art of gathering over good drinks.
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button cafes">
              Learn More
            </button>
            <button className="neon-button restaurants">
              Try Local Dishes
            </button>
          </div>
        </div>
      </div>

      {/* Call to Action */}
      <div style={{
        textAlign: 'center',
        marginTop: '60px',
        padding: '40px 20px'
      }}>
        <div className="neon-card cafes cafes-glow" style={{
          maxWidth: '600px',
          margin: '0 auto',
          padding: '32px'
        }}>
          <h2 style={{
            color: 'var(--cafes-color)',
            fontSize: '2rem',
            marginBottom: '16px',
            textShadow: '0 0 10px var(--cafes-color)'
          }}>
            Own a Cafe?
          </h2>
          <p style={{
            color: 'var(--text-secondary)',
            marginBottom: '24px',
            fontSize: '1.1rem'
          }}>
            Join our platform and connect with coffee lovers across Iraq & Kurdistan
          </p>
          <div style={{
            display: 'flex',
            gap: '16px',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button className="neon-button cafes">
              List Your Cafe
            </button>
            <button className="neon-button hotels">
              Explore Hotels
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}root@fe8e7d45430e:/workspace/missinggold#
I’m thinking through the 9 categories, maybe combining from the overall platform categories or documentation.

}root@fe8e7d45430e:/workspace/missinggold# sed -n '80,160p' UI_IMPROVEMENTS.md
3. Modal pops up with all cities
4. Click any city card
5. Watch the interface update instantly!

### Language Switcher:
1. Look for 🌐 globe icon in navigation
2. Hover to see language options
3. Select: English, العربية, or کوردی

### Browse Content:
- **Categories**: Events, Hotels, Restaurants, Cafes, Tourism
- **Featured Events**: See upcoming events in selected city
- **Quick Actions**: Create Event, Explore, Find Hotels

---

## 📁 Files Modified

1. `src/app/components/OptimizedNeonHomepage.tsx`
   - Added CITIES array
   - Implemented city selector modal
   - Dynamic city/region display

2. `src/app/components/LanguageProvider.tsx`
   - Fixed hydration mismatch
   - Consistent initial state

3. `src/app/components/Navigation.tsx`
   - Added suppressHydrationWarning
   - Fixed language display

4. `src/app/components/SessionProviderWrapper.tsx`
   - New file for NextAuth

5. `src/app/components/ClientLayout.tsx`
   - Wrapped with SessionProvider

6. `src/app/layout.tsx`
   - Server-side session fetching
   - Async layout

7. `src/lib/auth.ts`
   - Enhanced error logging

8. `src/app/globals.css`
   - Added responsive grid classes
   - CSS media queries for mobile/tablet/desktop

9. `src/app/hooks/useOptimizedState.ts`
   - Fixed useWindowSize SSR issue

10. `.env.local`
    - Database and auth configuration

11. `public/`
    - Created favicon.ico
    - Created icon.svg
    - Created apple-touch-icon.png

---

## 🎯 Testing Checklist

- [x] City selector opens on button click
- [x] All 8 cities are selectable
- [x] City name updates in "Currently Exploring"
- [x] Arabic name updates correctly
- [x] Region name updates correctly
- [x] Selection persists on page reload
- [x] Modal closes on X button
- [x] Modal closes on outside click
- [x] No hydration warnings
- [x] No console errors
- [x] Responsive on mobile/tablet/desktop
- [x] Language switcher works
- [x] All icons load correctly

---

## 🔧 Future Enhancements
root@fe8e7d45430e:/workspace/missinggold# ls src/app/venues
page.tsx
root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/venues/page.tsx
import MultiVenueHomepage from '../components/MultiVenueHomepage';

export default function VenuesPage() {
  return <MultiVenueHomepage />;
}

export const metadata = {
  title: 'Discover Iraq & Kurdistan - Events, Hotels, Restaurants & Activities',
  description: 'Complete platform for discovering events, booking hotels, finding restaurants, and exploring activities in Iraq
and Kurdistan Region.',
  keywords: 'Iraq, Kurdistan, events, hotels, restaurants, activities, travel, booking',
  openGraph: {
    title: 'Discover Iraq & Kurdistan - Complete Travel Platform',
    description: 'Events, Hotels, Restaurants & Activities all in one place',
    images: ['/og-venues.jpg'],
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Discover Iraq & Kurdistan - Complete Travel Platform',
    description: 'Events, Hotels, Restaurants & Activities all in one place',
  },
};root@fe8e7d45430e:/workspace/missinggold#
I'm considering if I should limit categories to events, perhaps with a filter in page.tsx.

};root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/events/page.tsx
import { redirect } from 'next/navigation';
import { headers } from 'next/headers';

export default async function EventsRedirectPage() {
  // Get user's preferred language from headers
  const headersList = await headers();
  const acceptLanguage = headersList.get('accept-language') || '';

  // Determine the best locale
  let locale = 'en'; // default

  if (acceptLanguage.includes('ar')) {
    locale = 'ar';
  } else if (acceptLanguage.includes('ku')) {
    locale = 'ku';
  }

  // Redirect to the localized events page
  redirect(`/${locale}/events`);
}root@fe8e7d45430e:/workspace/missinggold#
I'll check the src/app/[locale]/events/page.tsx file for categories now.

}root@fe8e7d45430e:/workspace/missinggold# sed -n '1,200p' src/app/[locale]/events/page.tsx
"use client";

import Link from "next/link";
import React, { useState, useEffect } from "react";
import EventImage from "../../components/EventImage";
import EventDetailsModal from "../../components/EventDetailsModal";
import ResponsiveButton from "../../components/ResponsiveButton";
import { useLanguage } from "../../components/LanguageProvider";
import { useTranslations } from "../../hooks/useTranslations";

interface Event {
  id: string;
  publicId: string;
  title: string;
  description: string;
  date: string;
  location: string;
  category?: string;
  price?: number;
  isFree?: boolean;
  imageUrl?: string;
  user?: {
    name?: string;
    email: string;
  };
}

interface EventsPageProps {
  params: Promise<{ locale: string }>;
}

export default function EventsPage({ params }: EventsPageProps) {
  const [events, setEvents] = useState<Event[]>([]);
  const [filteredEvents, setFilteredEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedCity, setSelectedCity] = useState("");
  const [selectedMonth, setSelectedMonth] = useState("");
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [locale, setLocale] = useState<string>("en");

  const { language, isRTL, setLanguage } = useLanguage();
  const { t } = useTranslations();

  // Get locale from params
  useEffect(() => {
    const getLocale = async () => {
      const resolvedParams = await params;
      setLocale(resolvedParams.locale);
      // Update language context to match the URL locale
      if (['en', 'ar', 'ku'].includes(resolvedParams.locale)) {
        setLanguage(resolvedParams.locale as 'en' | 'ar' | 'ku');
      }
    };
    getLocale();
  }, [params, setLanguage]);

  // Use translated categories
  const categories = [
    { name: t('common.allCategories'), icon: "🎉", key: 'all' },
    { name: t('categories.technologyInnovation'), icon: "💻", key: 'technologyInnovation' },
    { name: t('categories.businessNetworking'), icon: "💼", key: 'businessNetworking' },
    { name: t('categories.musicConcerts'), icon: "🎵", key: 'musicConcerts' },
    { name: t('categories.artsCulture'), icon: "🎨", key: 'artsCulture' },
    { name: t('categories.sportsFitness'), icon: "⚽", key: 'sportsFitness' },
    { name: t('categories.foodDrink'), icon: "🍽️", key: 'foodDrink' },
    { name: t('categories.learningDevelopment'), icon: "📚", key: 'learningDevelopment' },
    { name: t('categories.healthWellness'), icon: "🏥", key: 'healthWellness' },
    { name: t('categories.communitySocial'), icon: "👥", key: 'communitySocial' },
    { name: t('categories.gamingEsports'), icon: "🎮", key: 'gamingEsports' },
    { name: t('categories.spiritualReligious'), icon: "🕌", key: 'spiritualReligious' },
    { name: t('categories.familyKids'), icon: "👨‍👩‍👧‍👦", key: 'familyKids' },
    { name: t('categories.outdoorAdventure'), icon: "🏔️", key: 'outdoorAdventure' },
    { name: t('categories.virtualEvents'), icon: "📱", key: 'virtualEvents' },
    { name: t('categories.academicConferences'), icon: "🎓", key: 'academicConferences' }
  ];

  // Use translated cities
  const cities = [
    t('common.allCities'),
    t('cities.baghdad'),
    t('cities.basra'),
    t('cities.mosul'),
    t('cities.erbil'),
    t('cities.sulaymaniyah'),
    t('cities.duhok'),
    t('cities.kirkuk'),
    t('cities.anbar'),
    t('cities.najaf'),
    t('cities.karbala')
  ];

  // Use translated months (memoized)
  const months = React.useMemo(() => ([
    t('common.allMonths'),
    t('months.january'), t('months.february'), t('months.march'),
    t('months.april'), t('months.may'), t('months.june'),
    t('months.july'), t('months.august'), t('months.september'),
    t('months.october'), t('months.november'), t('months.december')
  ]), [language]);

  // Initialize filter states with translations when they're loaded
  useEffect(() => {
    if (t && selectedCategory === '') {
      setSelectedCategory(t('common.allCategories'));
      setSelectedCity(t('common.allCities'));
      setSelectedMonth(t('common.allMonths'));
    }
  }, [t, selectedCategory, selectedCity, selectedMonth]);

  // Fetch events
  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await fetch(`/api/events?type=public&lang=${locale}`);
        if (response.ok) {
          const eventsData = await response.json();
          setEvents(eventsData);
          setFilteredEvents(eventsData);
        } else {
          console.error('Failed to fetch events');
          // Set some demo events for now
          setEvents(demoEvents);
          setFilteredEvents(demoEvents);
        }
      } catch (error) {
        console.error('Error fetching events:', error);
        // Set some demo events for now
        setEvents(demoEvents);
        setFilteredEvents(demoEvents);
      } finally {
        setLoading(false);
      }
    };

    if (locale) {
      fetchEvents();
    }
  }, [locale]);

  // Demo events for when database is empty
  const demoEvents: Event[] = [
    {
      id: "1",
      publicId: "ai-summit-2025",
      title: t('demo.events.aiSummit.title'),
      description: t('demo.events.aiSummit.description'),
      date: "2025-03-15T10:00:00Z",
      location: t('demo.events.aiSummit.location'),
      category: t('demo.events.aiSummit.category'),
      price: 50,
      isFree: false,
      imageUrl: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
      user: { name: "Tech Events Iraq", email: "tech@iraqevents.com" }
    },
    {
      id: "2",
      publicId: "music-festival-erbil",
      title: t('demo.events.musicFestival.title'),
      description: t('demo.events.musicFestival.description'),
      date: "2025-03-20T18:00:00Z",
      location: t('demo.events.musicFestival.location'),
      category: t('demo.events.musicFestival.category'),
      price: 0,
      isFree: true,
      imageUrl: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
      user: { name: "Kurdistan Arts Council", email: "arts@kurdistan.org" }
    },
    {
      id: "3",
      publicId: "business-workshop-basra",
      title: t('demo.events.businessWorkshop.title'),
      description: t('demo.events.businessWorkshop.description'),
      date: "2025-03-25T09:00:00Z",
      location: t('demo.events.businessWorkshop.location'),
      category: t('demo.events.businessWorkshop.category'),
      price: 75,
      isFree: false,
      imageUrl: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&crop=center&auto=format&q=80"
,
      user: { name: "Business Development Iraq", email: "business@iraq.com" }
    },
    {
      id: "4",
      publicId: "art-exhibition-mosul",
      title: t('demo.events.artExhibition.title'),
      description: t('demo.events.artExhibition.description'),
      date: "2025-04-01T14:00:00Z",
      location: t('demo.events.artExhibition.location'),
      category: t('demo.events.artExhibition.category'),
      price: 30,
      isFree: false,
      imageUrl: "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&q=80",
      user: { name: "Mosul Cultural Foundation", email: "culture@mosul.org" }
    },
    {
      id: "5",
      publicId: "food-festival-baghdad",
      title: "Iraqi Food Festival",
User may want 9 categories from a larger list—perhaps from a homepage grid. I’ll check NeonHomepage and messages/en.json for relevant details.

root@fe8e7d45430e:/workspace/missinggold# rg "Category" src/app/components -n
src/app/components/NeonHomepage.tsx
15:interface Category {
36:  const categories: Category[] = [

src/app/components/OptimizedNeonHomepage.tsx
31:interface Category {
66:function useCategories(): Category[] {
132: * Category Card Component - Memoized for performance
134:const CategoryCard = memo(({ category, index }: { category: Category; index: number }) => {
174:CategoryCard.displayName = 'CategoryCard';
335:            <CategoryCard key={category.id} category={category} index={index} />

src/app/components/SkeletonLoader.tsx
164: * Category Grid Skeleton - For category cards
166:export function CategoryGridSkeleton({ count = 5 }: { count?: number }) {
284:          <CategoryGridSkeleton count={5} />

src/app/components/EventDetailsModal.tsx
33:function translateCategoryLabel(categoryName?: string): string {
143:            {/* Category */}
151:                  {translateCategoryLabel(event.category)}
I'm considering 9 main categories with possible subcategories, including Events, Hotels, Cafes, and others.

root@fe8e7d45430e:/workspace/missinggold# sed -n '200,400p' src/app/components/MultiVenueHomepage.tsx
  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
      {/* Image */}
      <div className="relative h-48 bg-gray-200">
        {venue.imageUrl ? (
          <Image
            src={venue.imageUrl}
            alt={venue.title}
            fill
            className="object-cover"
          />
        ) : (
          <div className="flex items-center justify-center h-full text-4xl">
            {getVenueTypeIcon(venue.type)}
          </div>
        )}

        {/* Badges */}
        <div className="absolute top-3 left-3 flex gap-2">
          {venue.featured && (
            <span className="bg-yellow-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
              ⭐ Featured
            </span>
          )}
          {venue.verified && (
            <span className="bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
              ✓ Verified
            </span>
          )}
        </div>

        {/* Type Badge */}
        <div className="absolute top-3 right-3">
          <span className="bg-blue-600 text-white px-3 py-1 rounded-full text-xs font-semibold">
            {getVenueTypeIcon(venue.type)} {venue.type}
          </span>
        </div>
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-bold text-lg text-gray-900 mb-2 line-clamp-1">
          {venue.title}
        </h3>

        <p className="text-gray-600 text-sm mb-3 line-clamp-2">
          {venue.description}
        </p>

        {/* Location */}
        <div className="flex items-center text-gray-500 text-sm mb-2">
          <span className="mr-1">📍</span>
          <span className="line-clamp-1">{venue.location}</span>
        </div>

        {/* Event Date */}
        {venue.type === 'EVENT' && venue.eventDate && (
          <div className="flex items-center text-blue-600 text-sm mb-2">
            <span className="mr-1">📅</span>
            <span>{getEventDate(venue.eventDate)}</span>
          </div>
        )}

        {/* Cuisine Type */}
        {venue.type === 'RESTAURANT' && venue.cuisineType && (
          <div className="flex items-center text-orange-600 text-sm mb-2">
            <span className="mr-1">🍴</span>
            <span>{venue.cuisineType}</span>
          </div>
        )}

        {/* Price Range */}
        {venue.priceRange && (
          <div className="flex items-center text-green-600 text-sm mb-3">
            <span className="mr-1">💰</span>
            <span>{formatPrice(venue.priceRange)}</span>
          </div>
        )}

        {/* Action Button */}
        <Link
          href={`/venue/${venue.publicId}`}
          className="block w-full bg-blue-600 text-white text-center py-2 rounded-lg font-semibold hover:bg-blue-700 transition-
colors"
        >
          View Details
        </Link>
      </div>
    </div>
  );
}root@fe8e7d45430e:/workspace/missinggold#
I'm checking for 9 grid categories, like events, hotels, restaurants, and others. Let’s find them!

I’ll get line numbers for categories with nl and sed to guide my citations.

}root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/categories/page.tsx | sed -n '1,200p'
     1  'use client';
     2
     3  import React from 'react';
     4  import Link from 'next/link';
     5  import { useTranslations } from "../hooks/useTranslations";
     6  import { useContentOverride } from "../hooks/useContent";
     7
     8  export default function CategoriesPage() {
     9    const { t } = useTranslations();
    10    const categoriesSubtitle = useContentOverride('categoriesPage.subtitle');
    11
    12    const categories = [
    13      { name: t('homepage.allEvents'), key: 'all', icon: '🎉', description: t('categoryDescriptions.all'), color: 'from-pu
rple-500 to-pink-500' },
    14      { name: t('categories.technologyInnovation'), key: 'technologyInnovation', icon: '💻', description: t('categoryDescr
iptions.technologyInnovation'), color: 'from-indigo-500 to-purple-500' },
    15      { name: t('categories.businessNetworking'), key: 'businessNetworking', icon: '💼', description: t('categoryDescripti
ons.businessNetworking'), color: 'from-blue-500 to-cyan-500' },
    16      { name: t('categories.musicConcerts'), key: 'musicConcerts', icon: '🎵', description: t('categoryDescriptions.musicC
oncerts'), color: 'from-pink-500 to-red-500' },
    17      { name: t('categories.artsCulture'), key: 'artsCulture', icon: '🎨', description: t('categoryDescriptions.artsCultur
e'), color: 'from-teal-500 to-blue-500' },
    18      { name: t('categories.sportsFitness'), key: 'sportsFitness', icon: '⚽', description: t('categoryDescriptions.sports
Fitness'), color: 'from-green-500 to-emerald-500' },
    19      { name: t('categories.foodDrink'), key: 'foodDrink', icon: '🍽️', description: t('categoryDescriptions.foodDrink'), co
lor: 'from-yellow-500 to-orange-500' },
    20      { name: t('categories.learningDevelopment'), key: 'learningDevelopment', icon: '📚', description: t('categoryDescrip
tions.learningDevelopment'), color: 'from-violet-500 to-purple-500' },
    21      { name: t('categories.healthWellness'), key: 'healthWellness', icon: '🏥', description: t('categoryDescriptions.heal
thWellness'), color: 'from-emerald-500 to-teal-500' },
    22      { name: t('categories.communitySocial'), key: 'communitySocial', icon: '👥', description: t('categoryDescriptions.co
mmunitySocial'), color: 'from-orange-500 to-red-500' },
    23      { name: t('categories.gamingEsports'), key: 'gamingEsports', icon: '🎮', description: t('categoryDescriptions.gaming
Esports'), color: 'from-red-500 to-pink-500' },
    24      { name: t('categories.spiritualReligious'), key: 'spiritualReligious', icon: '🕌', description: t('categoryDescripti
ons.spiritualReligious'), color: 'from-amber-500 to-yellow-500' },
    25      { name: t('categories.familyKids'), key: 'familyKids', icon: '👨‍👩‍👧‍👦', description: t('categoryDescriptions.family
Kids'), color: 'from-sky-500 to-blue-500' },
    26      { name: t('categories.outdoorAdventure'), key: 'outdoorAdventure', icon: '🏔️', description: t('categoryDescriptions.o
utdoorAdventure'), color: 'from-lime-500 to-green-500' },
    27      { name: t('categories.virtualEvents'), key: 'virtualEvents', icon: '💻', description: t('categoryDescriptions.virtua
lEvents'), color: 'from-slate-500 to-gray-500' },
    28      { name: t('categories.academicConferences'), key: 'academicConferences', icon: '🎓', description: t('categoryDescrip
tions.academicConferences'), color: 'from-rose-500 to-red-500' }
    29    ];
    30
    31    return (
    32      <div className="min-h-screen bg-gray-50 py-8">
    33        {/* Hero Section */}
    34        <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 py-16">
    35          <div className="max-w-7xl mx-auto px-4 text-center">
    36            <h1 className="text-5xl font-bold text-white mb-6">{t('categoriesPage.title')}</h1>
    37            <p className="text-xl text-white/90 max-w-3xl mx-auto">
    38              {categoriesSubtitle?.value || t('categoriesPage.subtitle')}
    39            </p>
    40          </div>
    41        </div>
    42
    43        {/* Categories Grid */}
    44        <div className="max-w-7xl mx-auto px-4 py-16">
    45          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
    46            {categories.map((category, index) => (
    47              <div
    48                key={category.name}
    49                className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 transform hover
:scale-105 group"
    50              >
    51                <div className={`w-20 h-20 bg-gradient-to-br ${category.color} rounded-2xl flex items-center justify-cente
r mb-6 group-hover:scale-110 transition-transform duration-300`}>
    52                  <span className="text-3xl">{category.icon}</span>
    53                </div>
    54
    55                <h3 className="text-2xl font-bold text-gray-900 mb-4 group-hover:text-purple-600 transition-colors">
    56                  {category.name}
    57                </h3>
    58
    59                <p className="text-gray-600 leading-relaxed mb-6">
    60                  {category.description}
    61                </p>
    62
    63                <Link
    64                  href={`/events?category=${encodeURIComponent(category.key)}`}
    65                  className={`inline-flex items-center gap-2 bg-gradient-to-r ${category.color} text-white px-6 py-3 round
ed-full font-semibold hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
    66                >
    67                  <span>{t('homepage.exploreEvents')}</span>
    68                  <span>→</span>
    69                </Link>
    70              </div>
    71            ))}
    72          </div>
    73        </div>
    74
    75        {/* CTA Section */}
    76        <div className="bg-gradient-to-r from-yellow-400 via-orange-500 to-red-500 py-16">
    77          <div className="max-w-4xl mx-auto px-4 text-center">
    78            <h2 className="text-4xl font-bold text-white mb-6">
    79              {t('categoriesPage.ctaTitle')}
    80            </h2>
    81            <p className="text-xl text-white/90 mb-8">
    82              {t('categoriesPage.ctaSubtitle')}
    83            </p>
    84            <Link
    85              href="/register"
    86              className="bg-white text-orange-600 px-8 py-4 rounded-full font-bold text-lg hover:shadow-xl transition-all
duration-300 transform hover:scale-105 inline-flex items-center gap-3"
    87            >
    88              <span className="text-2xl">🎆</span>
    89              {t('events.createYourEvent')}
    90            </Link>
    91          </div>
    92        </div>
    93      </div>
    94    );
    95  }
I'll gather translations for categoryDescriptions and relevant sections using nl -ba public/locales/en/common.json.

root@fe8e7d45430e:/workspace/missinggold# nl -ba public/locales/en/common.json | sed -n '110,180p'
   110      "whatsappGroup": "WhatsApp Group Link",
   111      "whatsappPlaceholder": "https://chat.whatsapp.com/...",
   112      "whatsappPhone": "WhatsApp Phone Number",
   113      "whatsappPhonePlaceholder": "+964 XXX XXX XXXX",
   114      "contactMethod": "Contact Method",
   115      "contactPlaceholder": "Email, phone, or other contact method for attendees",
   116      "creating": "Creating...",
   117      "createEvent": "Create Event",
   118      "imageUploadError": "Failed to upload image. Please try again.",
   119      "createEventError": "An error occurred while creating the event.",
   120      "uploadImageFailed": "Failed to upload image"
   121    },
   122    "categories": {
   123      "${event.category}": "",
   124      "technologyInnovation": "Technology & Innovation",
   125      "businessNetworking": "Business & Networking",
   126      "musicConcerts": "Music & Concerts",
   127      "artsCulture": "Arts & Culture",
   128      "sportsFitness": "Sports & Fitness",
   129      "foodDrink": "Food & Drink",
   130      "learningDevelopment": "Learning & Development",
   131      "healthWellness": "Health & Wellness",
   132      "communitySocial": "Community & Social",
   133      "gamingEsports": "Gaming & Esports",
   134      "spiritualReligious": "Spiritual & Religious",
   135      "familyKids": "Family & Kids",
   136      "outdoorAdventure": "Outdoor & Adventure",
   137      "virtualEvents": "Virtual Events",
   138      "academicConferences": "Academic and Conferences"
   139    },
   140    "login": {
   141      "welcomeBack": "Welcome Back",
   142      "subtitle": "Sign in to your IraqEvents account",
   143      "continueWithGoogle": "Continue with Google",
   144      "orContinueWith": "Or continue with email",
   145      "emailAddress": "Email Address",
   146      "emailPlaceholder": "Enter your email",
   147      "password": "Password",
   148      "passwordPlaceholder": "Enter your password",
   149      "signingIn": "Signing in...",
   150      "signIn": "Sign In",
   151      "noAccount": "Don't have an account?",
   152      "createAccount": "Create one here",
   153      "invalidCredentials": "Invalid email or password",
   154      "googleSignInError": "Failed to sign in with Google",
   155      "forgotPassword": "Forgot password?"
   156    },
   157    "register": {
   158      "joinIraqEvents": "Join IraqEvents",
   159      "createAccountSubtitle": "Create your account to start discovering and creating amazing events",
   160      "continueWithGoogle": "Continue with Google",
   161      "orCreateAccount": "Or create account with email",
   162      "fullNameOptional": "Full Name (Optional)",
   163      "enterFullName": "Enter your full name",
   164      "enterEmail": "Enter your email address",
   165      "createPassword": "Create a strong password",
   166      "creatingAccount": "Creating account...",
   167      "createAccount": "Create Account",
   168      "alreadyHaveAccount": "Already have an account?",
   169      "signInHere": "Sign in here",
   170      "registrationSuccess": "Registration successful! Redirecting...",
   171      "googleSignInError": "Failed to sign in with Google"
   172    },
   173    "about": {
   174      "title": "About IraqEvents",
   175      "subtitle": "Connecting communities through amazing events",
   176      "stats": {
   177        "eventsCreated": "Events Created",
   178        "happyUsers": "Happy Users",
   179        "citiesCovered": "Cities Covered",
   180        "languagesSupported": "Languages Supported"
I'll use sed -n '320,380p' with nl to grab those categoryDescriptions lines.

root@fe8e7d45430e:/workspace/missinggold# nl -ba public/locales/en/common.json | sed -n '360,420p'
   360      "slide4": {
   361        "title": "Modern Art Exhibition",
   362        "subtitle": "Art & Culture",
   363        "description": "Discover contemporary Iraqi and Kurdish art"
   364      },
   365      "attendees": "Attendees",
   366      "sessions": "Sessions",
   367      "days": "Days",
   368      "artists": "Artists",
   369      "stages": "Stages",
   370      "hours": "Hours",
   371      "leaders": "Leaders",
   372      "companies": "Companies",
   373      "workshops": "Workshops",
   374      "artworks": "Artworks",
   375      "galleries": "Galleries"
   376    },
   377    "meta": {
   378      "title": "IraqEvents - Discover Amazing Events in Iraq",
   379      "description": "The premier event platform for Iraq. Discover concerts, conferences, festivals, and community events
 across Baghdad, Erbil, Basra, and all Iraqi cities.",
   380      "appTitle": "IraqEvents"
   381    },
   382    "categoryDescriptions": {
   383      "all": "All Categories",
   384      "technologyInnovation": "Latest in tech, AI, and digital innovation",
   385      "businessNetworking": "Professional development and networking opportunities",
   386      "musicConcerts": "Live music performances and concerts",
   387      "artsCulture": "Art exhibitions, cultural events, and heritage",
   388      "sportsFitness": "Sports events, fitness activities, and wellness",
   389      "foodDrink": "Culinary experiences, food festivals, and tastings",
   390      "learningDevelopment": "Educational workshops and skill development",
   391      "healthWellness": "Health, wellness, and mental health events",
   392      "communitySocial": "Community gatherings and social events",
   393      "gamingEsports": "Gaming tournaments and esports competitions",
   394      "spiritualReligious": "Religious ceremonies and spiritual gatherings",
   395      "familyKids": "Family-friendly events and kids activities",
   396      "outdoorAdventure": "Outdoor activities and adventure sports",
   397      "virtualEvents": "Online events and virtual experiences",
   398      "academicConferences": "Academic conferences and research presentations"
   399    },
   400    "categoriesPage": {
   401      "title": "Event Categories",
   402      "subtitle": "Discover events that match your interests",
   403      "ctaTitle": "Ready to Create Your Event?",
   404      "ctaSubtitle": "Join thousands of event organizers using our platform"
   405    },
   406    "reset": {
   407      "emailSent": "Reset email sent successfully",
   408      "sending": "Sending...",
   409      "sendResetLink": "Send Reset Link"
   410    },
   411    "demo": {
   412      "events": {
   413        "aiSummit": {
   414          "title": "AI Innovation Summit",
   415          "description": "Join us for a comprehensive exploration of artificial intelligence and machine learning technolo
gies that are shaping the future.",
   416          "location": "Baghdad Tech Center, Baghdad",
   417          "category": "Technology & Innovation"
   418        },
   419        "musicFestival": {
   420          "title": "Kurdish Music Festival",
I'll use nl -ba src/app/restaurants/page.tsx to identify the line numbers.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/restaurants/page.tsx | sed -n '1,220p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function RestaurantsPage() {
     6    const restaurants = [
     7      {
     8        id: '1',
     9        name: 'Al-Mansour Palace Restaurant',
    10        description: 'Authentic Iraqi cuisine in an elegant setting',
    11        rating: 4.7,
    12        priceRange: '$$$',
    13        image: '🍽️',
    14        cuisine: 'Traditional Iraqi',
    15        location: 'Baghdad Center'
    16      },
    17      {
    18        id: '2',
    19        name: 'Kurdistan Grill House',
    20        description: 'Famous for kebabs and Kurdish specialties',
    21        rating: 4.5,
    22        priceRange: '$$',
    23        image: '🥩',
    24        cuisine: 'Kurdish Grills',
    25        location: 'Erbil'
    26      },
    27      {
    28        id: '3',
    29        name: 'Mesopotamia Fine Dining',
    30        description: 'Modern Iraqi cuisine with a contemporary twist',
    31        rating: 4.8,
    32        priceRange: '$$$$',
    33        image: '🍷',
    34        cuisine: 'Modern Iraqi',
    35        location: 'Baghdad'
    36      },
    37      {
    38        id: '4',
    39        name: 'Basra Fish Market',
    40        description: 'Fresh seafood from the Persian Gulf',
    41        rating: 4.4,
    42        priceRange: '$$',
    43        image: '🐟',
    44        cuisine: 'Seafood',
    45        location: 'Basra'
    46      }
    47    ];
    48
    49    return (
    50      <div className="min-h-screen" style={{ padding: '20px' }}>
    51        {/* Header */}
    52        <div style={{
    53          textAlign: 'center',
    54          marginBottom: '40px',
    55          padding: '40px 20px'
    56        }}>
    57          <div style={{
    58            display: 'inline-block',
    59            background: 'rgba(255, 107, 53, 0.1)',
    60            border: '2px solid var(--restaurants-color)',
    61            borderRadius: '15px',
    62            padding: '24px',
    63            backdropFilter: 'blur(10px)'
    64          }}>
    65            <h1 style={{
    66              fontSize: '3rem',
    67              color: 'var(--restaurants-color)',
    68              textShadow: '0 0 10px var(--restaurants-color)',
    69              marginBottom: '16px'
    70            }}>
    71              🍽️ Restaurants
    72            </h1>
    73            <p style={{
    74              color: 'var(--text-secondary)',
    75              fontSize: '1.2rem'
    76            }}>
    77              Discover the finest dining experiences in Iraq & Kurdistan
    78            </p>
    79          </div>
    80        </div>
    81
    82        {/* Back Button */}
    83        <div style={{ marginBottom: '32px' }}>
    84          <Link href="/" className="neon-button restaurants">
    85            ← Back to Home
    86          </Link>
    87        </div>
    88
    89        {/* Restaurants Grid */}
    90        <div style={{
    91          display: 'grid',
    92          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
    93          gap: '24px',
    94          maxWidth: '1200px',
    95          margin: '0 auto'
    96        }}>
    97          {restaurants.map((restaurant) => (
    98            <div key={restaurant.id} className="neon-card restaurants restaurants-glow">
    99              <div style={{ padding: '24px' }}>
   100                {/* Restaurant Image/Icon */}
   101                <div style={{
   102                  width: '100%',
   103                  height: '200px',
   104                  background: 'linear-gradient(135deg, var(--restaurants-color), var(--bg-secondary))',
   105                  borderRadius: '12px',
   106                  marginBottom: '20px',
   107                  display: 'flex',
   108                  alignItems: 'center',
   109                  justifyContent: 'center',
   110                  fontSize: '4rem'
   111                }}>
   112                  {restaurant.image}
   113                </div>
   114
   115                {/* Restaurant Info */}
   116                <h3 style={{
   117                  color: 'var(--text-primary)',
   118                  fontSize: '1.5rem',
   119                  marginBottom: '8px',
   120                  textShadow: '0 0 5px var(--restaurants-color)'
   121                }}>
   122                  {restaurant.name}
   123                </h3>
   124
   125                <p style={{
   126                  color: 'var(--text-secondary)',
   127                  marginBottom: '16px',
   128                  lineHeight: '1.6'
   129                }}>
   130                  {restaurant.description}
   131                </p>
   132
   133                <div style={{
   134                  display: 'grid',
   135                  gridTemplateColumns: '1fr 1fr',
   136                  gap: '12px',
   137                  marginBottom: '16px'
   138                }}>
   139                  <div>
   140                    <span style={{
   141                      color: 'var(--restaurants-color)',
   142                      fontSize: '1.1rem',
   143                      fontWeight: 'bold'
   144                    }}>
   145                      ⭐ {restaurant.rating}
   146                    </span>
   147                  </div>
   148                  <div>
   149                    <span style={{
   150                      color: 'var(--text-tertiary)',
   151                      fontSize: '0.9rem'
   152                    }}>
   153                      📍 {restaurant.location}
   154                    </span>
   155                  </div>
   156                  <div>
   157                    <span style={{
   158                      color: 'var(--restaurants-color)',
   159                      fontSize: '0.9rem',
   160                      fontWeight: '600'
   161                    }}>
   162                      🍴 {restaurant.cuisine}
   163                    </span>
   164                  </div>
   165                  <div>
   166                    <span style={{
   167                      color: 'var(--text-tertiary)',
   168                      fontSize: '0.9rem'
   169                    }}>
   170                      💰 {restaurant.priceRange}
   171                    </span>
   172                  </div>
   173                </div>
   174
   175                <div style={{
   176                  display: 'flex',
   177                  gap: '12px',
   178                  justifyContent: 'center'
   179                }}>
   180                  <button className="neon-button restaurants" style={{
   181                    fontSize: '0.9rem',
   182                    padding: '8px 16px'
   183                  }}>
   184                    View Menu
   185                  </button>
   186                  <button className="neon-button tourism" style={{
   187                    fontSize: '0.9rem',
   188                    padding: '8px 16px'
   189                  }}>
   190                    Reserve Table
   191                  </button>
   192                </div>
   193              </div>
   194            </div>
   195          ))}
   196        </div>
   197
   198        {/* Food Categories */}
   199        <div style={{
   200          marginTop: '60px',
   201          textAlign: 'center'
   202        }}>
   203          <h2 style={{
   204            color: 'var(--restaurants-color)',
   205            fontSize: '2.5rem',
   206            marginBottom: '32px',
   207            textShadow: '0 0 10px var(--restaurants-color)'
   208          }}>
   209            Browse by Cuisine
   210          </h2>
   211
   212          <div style={{
   213            display: 'grid',
   214            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
   215            gap: '20px',
   216            maxWidth: '800px',
   217            margin: '0 auto'
   218          }}>
   219            {[
   220              { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
I'll fetch the line ranges for the subcategory changes.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/restaurants/page.tsx | sed -n '220,320p'
   220              { name: 'Iraqi Traditional', icon: '🥘', count: 24 },
   221              { name: 'Kurdish Specialties', icon: '🍖', count: 18 },
   222              { name: 'Middle Eastern', icon: '🧆', count: 15 },
   223              { name: 'Seafood', icon: '🦐', count: 12 },
   224              { name: 'International', icon: '🍝', count: 20 },
   225              { name: 'Desserts & Sweets', icon: '🍯', count: 16 }
   226            ].map((cuisine, index) => (
   227              <div
   228                key={index}
   229                className="category-icon restaurants restaurants-glow"
   230                style={{
   231                  cursor: 'pointer',
   232                  animationDelay: `${index * 0.1}s`
   233                }}
   234              >
   235                <div style={{ fontSize: '2.5rem', marginBottom: '8px' }}>
   236                  {cuisine.icon}
   237                </div>
   238                <div style={{
   239                  color: 'var(--restaurants-color)',
   240                  fontWeight: '600',
   241                  marginBottom: '4px'
   242                }}>
   243                  {cuisine.name}
   244                </div>
   245                <div style={{
   246                  color: 'var(--text-tertiary)',
   247                  fontSize: '0.9rem'
   248                }}>
   249                  {cuisine.count} places
   250                </div>
   251              </div>
   252            ))}
   253          </div>
   254        </div>
   255
   256        {/* Call to Action */}
   257        <div style={{
   258          textAlign: 'center',
   259          marginTop: '60px',
   260          padding: '40px 20px'
   261        }}>
   262          <div className="neon-card restaurants restaurants-glow" style={{
   263            maxWidth: '600px',
   264            margin: '0 auto',
   265            padding: '32px'
   266          }}>
   267            <h2 style={{
   268              color: 'var(--restaurants-color)',
   269              fontSize: '2rem',
   270              marginBottom: '16px',
   271              textShadow: '0 0 10px var(--restaurants-color)'
   272            }}>
   273              Own a Restaurant?
   274            </h2>
   275            <p style={{
   276              color: 'var(--text-secondary)',
   277              marginBottom: '24px',
   278              fontSize: '1.1rem'
   279            }}>
   280              Join Eventra and showcase your restaurant to thousands of food lovers
   281            </p>
   282            <div style={{
   283              display: 'flex',
   284              gap: '16px',
   285              justifyContent: 'center',
   286              flexWrap: 'wrap'
   287            }}>
   288              <button className="neon-button restaurants">
   289                List Your Restaurant
   290              </button>
   291              <button className="neon-button cafes">
   292                Browse Cafes
   293              </button>
   294            </div>
   295          </div>
   296        </div>
   297      </div>
   298    );
   299  }
I'll gather line numbers for hotels, cafes, and tourism. Starting with hotels.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/hotels/page.tsx | sed -n '1,220p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function HotelsPage() {
     6    const hotels = [
     7      {
     8        id: '1',
     9        name: 'Baghdad Palace Hotel',
    10        description: 'Luxury accommodation in the heart of Baghdad',
    11        rating: 4.8,
    12        price: '$120/night',
    13        image: '🏰',
    14        location: 'Central Baghdad'
    15      },
    16      {
    17        id: '2',
    18        name: 'Erbil Grand Hotel',
    19        description: 'Modern hotel with stunning city views',
    20        rating: 4.6,
    21        price: '$95/night',
    22        image: '🏨',
    23        location: 'Erbil Center'
    24      },
    25      {
    26        id: '3',
    27        name: 'Basra Riverside Hotel',
    28        description: 'Peaceful riverside accommodation',
    29        rating: 4.4,
    30        price: '$80/night',
    31        image: '🌊',
    32        location: 'Basra Waterfront'
    33      }
    34    ];
    35
    36    return (
    37      <div className="min-h-screen" style={{ padding: '20px' }}>
    38        {/* Header */}
    39        <div style={{
    40          textAlign: 'center',
    41          marginBottom: '40px',
    42          padding: '40px 20px'
    43        }}>
    44          <div style={{
    45            display: 'inline-block',
    46            background: 'rgba(255, 46, 151, 0.1)',
    47            border: '2px solid var(--hotels-color)',
    48            borderRadius: '15px',
    49            padding: '24px',
    50            backdropFilter: 'blur(10px)'
    51          }}>
    52            <h1 style={{
    53              fontSize: '3rem',
    54              color: 'var(--hotels-color)',
    55              textShadow: '0 0 10px var(--hotels-color)',
    56              marginBottom: '16px'
    57            }}>
    58              🏨 Hotels
    59            </h1>
    60            <p style={{
    61              color: 'var(--text-secondary)',
    62              fontSize: '1.2rem'
    63            }}>
    64              Find the perfect place to stay in Iraq & Kurdistan
    65            </p>
    66          </div>
    67        </div>
    68
    69        {/* Back Button */}
    70        <div style={{ marginBottom: '32px' }}>
    71          <Link href="/" className="neon-button hotels">
    72            ← Back to Home
    73          </Link>
    74        </div>
    75
    76        {/* Hotels Grid */}
    77        <div style={{
    78          display: 'grid',
    79          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
    80          gap: '24px',
    81          maxWidth: '1200px',
    82          margin: '0 auto'
    83        }}>
    84          {hotels.map((hotel) => (
    85            <div key={hotel.id} className="neon-card hotels hotels-glow">
    86              <div style={{ padding: '24px' }}>
    87                {/* Hotel Image/Icon */}
    88                <div style={{
    89                  width: '100%',
    90                  height: '200px',
    91                  background: 'linear-gradient(135deg, var(--hotels-color), var(--bg-secondary))',
    92                  borderRadius: '12px',
    93                  marginBottom: '20px',
    94                  display: 'flex',
    95                  alignItems: 'center',
    96                  justifyContent: 'center',
    97                  fontSize: '4rem'
    98                }}>
    99                  {hotel.image}
   100                </div>
   101
   102                {/* Hotel Info */}
   103                <h3 style={{
   104                  color: 'var(--text-primary)',
   105                  fontSize: '1.5rem',
   106                  marginBottom: '8px',
   107                  textShadow: '0 0 5px var(--hotels-color)'
   108                }}>
   109                  {hotel.name}
   110                </h3>
   111
   112                <p style={{
   113                  color: 'var(--text-secondary)',
   114                  marginBottom: '16px',
   115                  lineHeight: '1.6'
   116                }}>
   117                  {hotel.description}
   118                </p>
   119
   120                <div style={{
   121                  display: 'flex',
   122                  justifyContent: 'space-between',
   123                  alignItems: 'center',
   124                  marginBottom: '16px'
   125                }}>
   126                  <span style={{
   127                    color: 'var(--hotels-color)',
   128                    fontSize: '1.1rem',
   129                    fontWeight: 'bold'
   130                  }}>
   131                    ⭐ {hotel.rating}
   132                  </span>
   133                  <span style={{
   134                    color: 'var(--text-tertiary)',
   135                    fontSize: '0.9rem'
   136                  }}>
   137                    📍 {hotel.location}
   138                  </span>
   139                </div>
   140
   141                <div style={{
   142                  display: 'flex',
   143                  justifyContent: 'space-between',
   144                  alignItems: 'center'
   145                }}>
   146                  <span style={{
   147                    color: 'var(--hotels-color)',
   148                    fontSize: '1.3rem',
   149                    fontWeight: 'bold',
   150                    textShadow: '0 0 5px var(--hotels-color)'
   151                  }}>
   152                    {hotel.price}
   153                  </span>
   154                  <button className="neon-button hotels">
   155                    Book Now
   156                  </button>
   157                </div>
   158              </div>
   159            </div>
   160          ))}
   161        </div>
   162
   163        {/* Call to Action */}
   164        <div style={{
   165          textAlign: 'center',
   166          marginTop: '60px',
   167          padding: '40px 20px'
   168        }}>
   169          <div className="neon-card hotels hotels-glow" style={{
   170            maxWidth: '600px',
   171            margin: '0 auto',
   172            padding: '32px'
   173          }}>
   174            <h2 style={{
   175              color: 'var(--hotels-color)',
   176              fontSize: '2rem',
   177              marginBottom: '16px',
   178              textShadow: '0 0 10px var(--hotels-color)'
   179            }}>
   180              Can&apos;t find what you&apos;re looking for?
   181            </h2>
   182            <p style={{
   183              color: 'var(--text-secondary)',
   184              marginBottom: '24px',
   185              fontSize: '1.1rem'
   186            }}>
   187              Contact us to find more hotel options in your preferred location
   188            </p>
   189            <div style={{
   190              display: 'flex',
   191              gap: '16px',
   192              justifyContent: 'center',
   193              flexWrap: 'wrap'
   194            }}>
   195              <button className="neon-button hotels">
   196                Contact Us
   197              </button>
   198              <button className="neon-button tourism">
   199                Browse All Categories
   200              </button>
   201            </div>
   202          </div>
   203        </div>
   204      </div>
   205    );
   206  }
This page doesn't show subcategories; features like rating and price are given for hotels.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/cafes/page.tsx | sed -n '1,240p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function CafesPage() {
     6    const cafes = [
     7      {
     8        id: '1',
     9        name: 'Baghdad Coffee House',
    10        description: 'Traditional Iraqi coffee in a cozy atmosphere',
    11        rating: 4.6,
    12        priceRange: '$$',
    13        image: '☕',
    14        specialty: 'Turkish Coffee',
    15        location: 'Baghdad Old City'
    16      },
    17      {
    18        id: '2',
    19        name: 'Kurdish Mountain Cafe',
    20        description: 'Authentic Kurdish tea and sweets with mountain views',
    21        rating: 4.8,
    22        priceRange: '$',
    23        image: '🫖',
    24        specialty: 'Kurdish Tea',
    25        location: 'Erbil Hills'
    26      },
    27      {
    28        id: '3',
    29        name: 'Tigris River Cafe',
    30        description: 'Riverside cafe with fresh pastries and specialty drinks',
    31        rating: 4.5,
    32        priceRange: '$$',
    33        image: '🧁',
    34        specialty: 'Pastries & Desserts',
    35        location: 'Baghdad Riverside'
    36      },
    37      {
    38        id: '4',
    39        name: 'Modern Brew Co.',
    40        description: 'Contemporary cafe with international coffee blends',
    41        rating: 4.7,
    42        priceRange: '$$$',
    43        image: '🥤',
    44        specialty: 'Specialty Coffee',
    45        location: 'Erbil Center'
    46      }
    47    ];
    48
    49    const cafeTypes = [
    50      { name: 'Traditional Coffee Houses', icon: '☕', count: 32, description: 'Authentic Iraqi coffee culture' },
    51      { name: 'Tea Gardens', icon: '🍵', count: 28, description: 'Kurdish tea traditions' },
    52      { name: 'Modern Cafes', icon: '🥤', count: 24, description: 'International coffee & vibes' },
    53      { name: 'Shisha Lounges', icon: '💨', count: 18, description: 'Relaxing hookah experience' },
    54      { name: 'Bakery Cafes', icon: '🥐', count: 22, description: 'Fresh pastries & coffee' },
    55      { name: 'Rooftop Cafes', icon: '🌆', count: 15, description: 'City views & coffee' }
    56    ];
    57
    58    return (
    59      <div className="min-h-screen" style={{ padding: '20px' }}>
    60        {/* Header */}
    61        <div style={{
    62          textAlign: 'center',
    63          marginBottom: '40px',
    64          padding: '40px 20px'
    65        }}>
    66          <div style={{
    67            display: 'inline-block',
    68            background: 'rgba(255, 237, 78, 0.1)',
    69            border: '2px solid var(--cafes-color)',
    70            borderRadius: '15px',
    71            padding: '24px',
    72            backdropFilter: 'blur(10px)'
    73          }}>
    74            <h1 style={{
    75              fontSize: '3rem',
    76              color: 'var(--cafes-color)',
    77              textShadow: '0 0 10px var(--cafes-color)',
    78              marginBottom: '16px'
    79            }}>
    80              ☕ Cafes
    81            </h1>
    82            <p style={{
    83              color: 'var(--text-secondary)',
    84              fontSize: '1.2rem'
    85            }}>
    86              Experience the rich coffee culture of Iraq & Kurdistan
    87            </p>
    88          </div>
    89        </div>
    90
    91        {/* Back Button */}
    92        <div style={{ marginBottom: '32px' }}>
    93          <Link href="/" className="neon-button cafes">
    94            ← Back to Home
    95          </Link>
    96        </div>
    97
    98        {/* Featured Cafes Grid */}
    99        <div style={{
   100          marginBottom: '60px'
   101        }}>
   102          <h2 style={{
   103            textAlign: 'center',
   104            color: 'var(--cafes-color)',
   105            fontSize: '2.5rem',
   106            marginBottom: '32px',
   107            textShadow: '0 0 10px var(--cafes-color)'
   108          }}>
   109            Featured Cafes
   110          </h2>
   111
   112          <div style={{
   113            display: 'grid',
   114            gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
   115            gap: '24px',
   116            maxWidth: '1200px',
   117            margin: '0 auto'
   118          }}>
   119            {cafes.map((cafe) => (
   120              <div key={cafe.id} className="neon-card cafes cafes-glow">
   121                <div style={{ padding: '24px' }}>
   122                  {/* Cafe Image/Icon */}
   123                  <div style={{
   124                    width: '100%',
   125                    height: '200px',
   126                    background: 'linear-gradient(135deg, var(--cafes-color), var(--bg-secondary))',
   127                    borderRadius: '12px',
   128                    marginBottom: '20px',
   129                    display: 'flex',
   130                    alignItems: 'center',
   131                    justifyContent: 'center',
   132                    fontSize: '4rem'
   133                  }}>
   134                    {cafe.image}
   135                  </div>
   136
   137                  {/* Cafe Info */}
   138                  <h3 style={{
   139                    color: 'var(--text-primary)',
   140                    fontSize: '1.5rem',
   141                    marginBottom: '8px',
   142                    textShadow: '0 0 5px var(--cafes-color)'
   143                  }}>
   144                    {cafe.name}
   145                  </h3>
   146
   147                  <p style={{
   148                    color: 'var(--text-secondary)',
   149                    marginBottom: '16px',
   150                    lineHeight: '1.6'
   151                  }}>
   152                    {cafe.description}
   153                  </p>
   154
   155                  <div style={{
   156                    display: 'grid',
   157                    gridTemplateColumns: '1fr 1fr',
   158                    gap: '12px',
   159                    marginBottom: '16px'
   160                  }}>
   161                    <div>
   162                      <span style={{
   163                        color: 'var(--cafes-color)',
   164                        fontSize: '1.1rem',
   165                        fontWeight: 'bold'
   166                      }}>
   167                        ⭐ {cafe.rating}
   168                      </span>
   169                    </div>
   170                    <div>
   171                      <span style={{
   172                        color: 'var(--text-tertiary)',
   173                        fontSize: '0.9rem'
   174                      }}>
   175                        📍 {cafe.location}
   176                      </span>
   177                    </div>
   178                    <div>
   179                      <span style={{
   180                        color: 'var(--cafes-color)',
   181                        fontSize: '0.9rem',
   182                        fontWeight: '600'
   183                      }}>
   184                        ✨ {cafe.specialty}
   185                      </span>
   186                    </div>
   187                    <div>
   188                      <span style={{
   189                        color: 'var(--text-tertiary)',
   190                        fontSize: '0.9rem'
   191                      }}>
   192                        💰 {cafe.priceRange}
   193                      </span>
   194                    </div>
   195                  </div>
   196
   197                  <div style={{
   198                    display: 'flex',
   199                    gap: '12px',
   200                    justifyContent: 'center'
   201                  }}>
   202                    <button className="neon-button cafes" style={{
   203                      fontSize: '0.9rem',
   204                      padding: '8px 16px'
   205                    }}>
   206                      Visit Cafe
   207                    </button>
   208                    <button className="neon-button tourism" style={{
   209                      fontSize: '0.9rem',
   210                      padding: '8px 16px'
   211                    }}>
   212                      View Menu
   213                    </button>
   214                  </div>
   215                </div>
   216              </div>
   217            ))}
   218          </div>
   219        </div>
   220
   221        {/* Cafe Types */}
   222        <div style={{
   223          marginTop: '60px',
   224          textAlign: 'center'
   225        }}>
   226          <h2 style={{
   227            color: 'var(--cafes-color)',
   228            fontSize: '2.5rem',
   229            marginBottom: '32px',
   230            textShadow: '0 0 10px var(--cafes-color)'
   231          }}>
   232            Explore Cafe Types
   233          </h2>
   234
   235          <div style={{
   236            display: 'grid',
   237            gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
   238            gap: '24px',
   239            maxWidth: '1000px',
   240            margin: '0 auto'
I’ll continue capturing the rest of the lines for the cafeTypes mapping.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/cafes/page.tsx | sed -n '240,360p'
   240            margin: '0 auto'
   241          }}>
   242            {cafeTypes.map((type, index) => (
   243              <div
   244                key={index}
   245                className="neon-card cafes cafes-glow"
   246                style={{
   247                  cursor: 'pointer',
   248                  animationDelay: `${index * 0.1}s`,
   249                  padding: '24px',
   250                  textAlign: 'center',
   251                  transition: 'all 0.3s ease'
   252                }}
   253              >
   254                <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
   255                  {type.icon}
   256                </div>
   257                <h3 style={{
   258                  color: 'var(--cafes-color)',
   259                  fontSize: '1.3rem',
   260                  fontWeight: '600',
   261                  marginBottom: '8px',
   262                  textShadow: '0 0 5px var(--cafes-color)'
   263                }}>
   264                  {type.name}
   265                </h3>
   266                <p style={{
   267                  color: 'var(--text-secondary)',
   268                  fontSize: '0.9rem',
   269                  marginBottom: '12px'
   270                }}>
   271                  {type.description}
   272                </p>
   273                <div style={{
   274                  color: 'var(--text-tertiary)',
   275                  fontSize: '0.8rem'
   276                }}>
   277                  {type.count} places
   278                </div>
   279              </div>
   280            ))}
   281          </div>
   282        </div>
   283
   284        {/* Coffee Culture Section */}
   285        <div style={{
   286          marginTop: '80px',
   287          textAlign: 'center'
   288        }}>
   289          <div className="neon-card tourism tourism-glow" style={{
   290            maxWidth: '800px',
   291            margin: '0 auto',
   292            padding: '40px'
   293          }}>
   294            <h2 style={{
   295              color: 'var(--tourism-color)',
   296              fontSize: '2.2rem',
   297              marginBottom: '20px',
   298              textShadow: '0 0 10px var(--tourism-color)'
   299            }}>
   300              ☕ Iraqi Coffee Culture
   301            </h2>
   302            <p style={{
   303              color: 'var(--text-secondary)',
   304              fontSize: '1.1rem',
   305              lineHeight: '1.8',
   306              marginBottom: '24px'
   307            }}>
   308              From traditional Baghdad coffee houses serving strong Turkish coffee to modern Kurdish tea gardens
   309              nestled in the mountains, Iraq and Kurdistan offer a rich tapestry of coffee and tea culture.
   310              Each cup tells a story of hospitality, tradition, and the timeless art of gathering over good drinks.
   311            </p>
   312            <div style={{
   313              display: 'flex',
   314              gap: '16px',
   315              justifyContent: 'center',
   316              flexWrap: 'wrap'
   317            }}>
   318              <button className="neon-button cafes">
   319                Learn More
   320              </button>
   321              <button className="neon-button restaurants">
   322                Try Local Dishes
   323              </button>
   324            </div>
   325          </div>
   326        </div>
   327
   328        {/* Call to Action */}
   329        <div style={{
   330          textAlign: 'center',
   331          marginTop: '60px',
   332          padding: '40px 20px'
   333        }}>
   334          <div className="neon-card cafes cafes-glow" style={{
   335            maxWidth: '600px',
   336            margin: '0 auto',
   337            padding: '32px'
   338          }}>
   339            <h2 style={{
   340              color: 'var(--cafes-color)',
   341              fontSize: '2rem',
   342              marginBottom: '16px',
   343              textShadow: '0 0 10px var(--cafes-color)'
   344            }}>
   345              Own a Cafe?
   346            </h2>
   347            <p style={{
   348              color: 'var(--text-secondary)',
   349              marginBottom: '24px',
   350              fontSize: '1.1rem'
   351            }}>
   352              Join our platform and connect with coffee lovers across Iraq & Kurdistan
   353            </p>
   354            <div style={{
   355              display: 'flex',
   356              gap: '16px',
   357              justifyContent: 'center',
   358              flexWrap: 'wrap'
   359            }}>
   360              <button className="neon-button cafes">
root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/cafes/page.tsx | sed -n '360,440p'
   360              <button className="neon-button cafes">
   361                List Your Cafe
   362              </button>
   363              <button className="neon-button hotels">
   364                Explore Hotels
   365              </button>
   366            </div>
   367          </div>
   368        </div>
   369      </div>
   370    );
   371  }
root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/tourism/page.tsx | sed -n '1,240p'
     1  "use client";
     2
     3  import Link from 'next/link';
     4
     5  export default function TourismPage() {
     6    const attractions = [
     7      {
     8        id: '1',
     9        name: 'Ancient Babylon',
    10        description: 'Explore the legendary ruins of one of history\'s greatest civilizations',
    11        rating: 4.9,
    12        category: 'Historical Site',
    13        image: '🏛️',
    14        location: 'Babylon, Iraq',
    15        duration: 'Full Day'
    16      },
    17      {
    18        id: '2',
    19        name: 'Kurdish Mountains',
    20        description: 'Breathtaking mountain landscapes and traditional villages',
    21        rating: 4.8,
    22        category: 'Nature & Adventure',
    23        image: '🏔️',
    24        location: 'Kurdistan Region',
    25        duration: '2-3 Days'
    26      },
    27      {
    28        id: '3',
    29        name: 'Marsh Arab Culture',
    30        description: 'Unique wetland ecosystem and ancient way of life',
    31        rating: 4.7,
    32        category: 'Cultural Experience',
    33        image: '🌾',
    34        location: 'Southern Iraq',
    35        duration: '1-2 Days'
    36      },
    37      {
    38        id: '4',
    39        name: 'Baghdad Museums',
    40        description: 'World-class artifacts and Iraqi heritage collections',
    41        rating: 4.6,
    42        category: 'Museums & Culture',
    43        image: '🏺',
    44        location: 'Baghdad',
    45        duration: 'Half Day'
    46      }
    47    ];
    48
    49    const tourismCategories = [
    50      { name: 'Historical Sites', icon: '🏛️', count: 45, description: 'Ancient civilizations & monuments' },
    51      { name: 'Natural Wonders', icon: '🌄', count: 32, description: 'Mountains, rivers & landscapes' },
    52      { name: 'Cultural Experiences', icon: '🎭', count: 28, description: 'Local traditions & customs' },
    53      { name: 'Adventure Tours', icon: '🧗', count: 24, description: 'Outdoor activities & exploration' },
    54      { name: 'Religious Sites', icon: '🕌', count: 38, description: 'Sacred places & pilgrimage sites' },
    55      { name: 'City Tours', icon: '🏙️', count: 22, description: 'Urban exploration & city life' }
    56    ];
    57
    58    const highlights = [
    59      {
    60        title: "Mesopotamian Heritage",
    61        description: "Walk through the cradle of civilization and discover 5,000 years of history",
    62        icon: "📜"
    63      },
    64      {
    65        title: "Kurdish Nature",
    66        description: "Experience pristine mountain landscapes and traditional mountain culture",
    67        icon: "🌲"
    68      },
    69      {
    70        title: "Tigris & Euphrates",
    71        description: "Explore the legendary rivers that shaped human civilization",
    72        icon: "🌊"
    73      }
    74    ];
    75
    76    return (
    77      <div className="min-h-screen" style={{ padding: '20px' }}>
    78        {/* Header */}
    79        <div style={{
    80          textAlign: 'center',
    81          marginBottom: '40px',
    82          padding: '40px 20px'
    83        }}>
    84          <div style={{
    85            display: 'inline-block',
    86            background: 'rgba(0, 240, 255, 0.1)',
    87            border: '2px solid var(--tourism-color)',
    88            borderRadius: '15px',
    89            padding: '24px',
    90            backdropFilter: 'blur(10px)'
    91          }}>
    92            <h1 style={{
    93              fontSize: '3rem',
    94              color: 'var(--tourism-color)',
    95              textShadow: '0 0 10px var(--tourism-color)',
    96              marginBottom: '16px'
    97            }}>
    98              📸 Tourism
    99            </h1>
   100            <p style={{
   101              color: 'var(--text-secondary)',
   102              fontSize: '1.2rem'
   103            }}>
   104              Discover the wonders of Iraq & Kurdistan - Where history meets adventure
   105            </p>
   106          </div>
   107        </div>
   108
   109        {/* Back Button */}
   110        <div style={{ marginBottom: '32px' }}>
   111          <Link href="/" className="neon-button tourism">
   112            ← Back to Home
   113          </Link>
   114        </div>
   115
   116        {/* Highlights Section */}
   117        <div style={{ marginBottom: '60px' }}>
   118          <h2 style={{
   119            textAlign: 'center',
   120            color: 'var(--tourism-color)',
   121            fontSize: '2.5rem',
   122            marginBottom: '32px',
   123            textShadow: '0 0 10px var(--tourism-color)'
   124          }}>
   125            Why Visit Iraq & Kurdistan?
   126          </h2>
   127
   128          <div style={{
   129            display: 'grid',
   130            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
   131            gap: '24px',
   132            maxWidth: '1000px',
   133            margin: '0 auto',
   134            marginBottom: '40px'
   135          }}>
   136            {highlights.map((highlight, index) => (
   137              <div key={index} className="neon-card tourism tourism-glow">
   138                <div style={{ padding: '24px', textAlign: 'center' }}>
   139                  <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
   140                    {highlight.icon}
   141                  </div>
   142                  <h3 style={{
   143                    color: 'var(--tourism-color)',
   144                    fontSize: '1.5rem',
   145                    marginBottom: '12px',
   146                    textShadow: '0 0 5px var(--tourism-color)'
   147                  }}>
   148                    {highlight.title}
   149                  </h3>
   150                  <p style={{
   151                    color: 'var(--text-secondary)',
   152                    lineHeight: '1.6'
   153                  }}>
   154                    {highlight.description}
   155                  </p>
   156                </div>
   157              </div>
   158            ))}
   159          </div>
   160        </div>
   161
   162        {/* Featured Attractions */}
   163        <div style={{ marginBottom: '60px' }}>
   164          <h2 style={{
   165            textAlign: 'center',
   166            color: 'var(--tourism-color)',
   167            fontSize: '2.5rem',
   168            marginBottom: '32px',
   169            textShadow: '0 0 10px var(--tourism-color)'
   170          }}>
   171            Featured Attractions
   172          </h2>
   173
   174          <div style={{
   175            display: 'grid',
   176            gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
   177            gap: '24px',
   178            maxWidth: '1200px',
   179            margin: '0 auto'
   180          }}>
   181            {attractions.map((attraction) => (
   182              <div key={attraction.id} className="neon-card tourism tourism-glow">
   183                <div style={{ padding: '24px' }}>
   184                  {/* Attraction Image/Icon */}
   185                  <div style={{
   186                    width: '100%',
   187                    height: '200px',
   188                    background: 'linear-gradient(135deg, var(--tourism-color), var(--bg-secondary))',
   189                    borderRadius: '12px',
   190                    marginBottom: '20px',
   191                    display: 'flex',
   192                    alignItems: 'center',
   193                    justifyContent: 'center',
   194                    fontSize: '4rem'
   195                  }}>
   196                    {attraction.image}
   197                  </div>
   198
   199                  {/* Attraction Info */}
   200                  <h3 style={{
   201                    color: 'var(--text-primary)',
   202                    fontSize: '1.5rem',
   203                    marginBottom: '8px',
   204                    textShadow: '0 0 5px var(--tourism-color)'
   205                  }}>
   206                    {attraction.name}
   207                  </h3>
   208
   209                  <p style={{
   210                    color: 'var(--text-secondary)',
   211                    marginBottom: '16px',
   212                    lineHeight: '1.6'
   213                  }}>
   214                    {attraction.description}
   215                  </p>
   216
   217                  <div style={{
   218                    display: 'grid',
   219                    gridTemplateColumns: '1fr 1fr',
   220                    gap: '12px',
   221                    marginBottom: '16px'
   222                  }}>
   223                    <div>
   224                      <span style={{
   225                        color: 'var(--tourism-color)',
   226                        fontSize: '1.1rem',
   227                        fontWeight: 'bold'
   228                      }}>
   229                        ⭐ {attraction.rating}
   230                      </span>
   231                    </div>
   232                    <div>
   233                      <span style={{
   234                        color: 'var(--text-tertiary)',
   235                        fontSize: '0.9rem'
   236                      }}>
   237                        📍 {attraction.location}
   238                      </span>
   239                    </div>
   240                    <div>
I need additional lines to cover the remaining categories.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/tourism/page.tsx | sed -n '240,480p'
   240                    <div>
   241                      <span style={{
   242                        color: 'var(--tourism-color)',
   243                        fontSize: '0.9rem',
   244                        fontWeight: '600'
   245                      }}>
   246                        🎯 {attraction.category}
   247                      </span>
   248                    </div>
   249                    <div>
   250                      <span style={{
   251                        color: 'var(--text-tertiary)',
   252                        fontSize: '0.9rem'
   253                      }}>
   254                        ⏱️ {attraction.duration}
   255                      </span>
   256                    </div>
   257                  </div>
   258
   259                  <div style={{
   260                    display: 'flex',
   261                    gap: '12px',
   262                    justifyContent: 'center'
   263                  }}>
   264                    <button className="neon-button tourism" style={{
   265                      fontSize: '0.9rem',
   266                      padding: '8px 16px'
   267                    }}>
   268                      Learn More
   269                    </button>
   270                    <button className="neon-button events" style={{
   271                      fontSize: '0.9rem',
   272                      padding: '8px 16px'
   273                    }}>
   274                      Book Tour
   275                    </button>
   276                  </div>
   277                </div>
   278              </div>
   279            ))}
   280          </div>
   281        </div>
   282
   283        {/* Tourism Categories */}
   284        <div style={{
   285          marginTop: '60px',
   286          textAlign: 'center'
   287        }}>
   288          <h2 style={{
   289            color: 'var(--tourism-color)',
   290            fontSize: '2.5rem',
   291            marginBottom: '32px',
   292            textShadow: '0 0 10px var(--tourism-color)'
   293          }}>
   294            Explore by Category
   295          </h2>
   296
   297          <div style={{
   298            display: 'grid',
   299            gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
   300            gap: '24px',
   301            maxWidth: '1000px',
   302            margin: '0 auto'
   303          }}>
   304            {tourismCategories.map((category, index) => (
   305              <div
   306                key={index}
   307                className="neon-card tourism tourism-glow"
   308                style={{
   309                  cursor: 'pointer',
   310                  animationDelay: `${index * 0.1}s`,
   311                  padding: '24px',
   312                  textAlign: 'center',
   313                  transition: 'all 0.3s ease'
   314                }}
   315              >
   316                <div style={{ fontSize: '3rem', marginBottom: '16px' }}>
   317                  {category.icon}
   318                </div>
   319                <h3 style={{
   320                  color: 'var(--tourism-color)',
   321                  fontSize: '1.3rem',
   322                  fontWeight: '600',
   323                  marginBottom: '8px',
   324                  textShadow: '0 0 5px var(--tourism-color)'
   325                }}>
   326                  {category.name}
   327                </h3>
   328                <p style={{
   329                  color: 'var(--text-secondary)',
   330                  fontSize: '0.9rem',
   331                  marginBottom: '12px'
   332                }}>
   333                  {category.description}
   334                </p>
   335                <div style={{
   336                  color: 'var(--text-tertiary)',
   337                  fontSize: '0.8rem'
   338                }}>
   339                  {category.count} places
   340                </div>
   341              </div>
   342            ))}
   343          </div>
   344        </div>
   345
   346        {/* Travel Information */}
   347        <div style={{
   348          marginTop: '80px',
   349          textAlign: 'center'
   350        }}>
   351          <div className="neon-card events events-glow" style={{
   352            maxWidth: '800px',
   353            margin: '0 auto',
   354            padding: '40px'
   355          }}>
   356            <h2 style={{
   357              color: 'var(--events-color)',
   358              fontSize: '2.2rem',
   359              marginBottom: '20px',
   360              textShadow: '0 0 10px var(--events-color)'
   361            }}>
   362              🗺️ Plan Your Journey
   363            </h2>
   364            <p style={{
   365              color: 'var(--text-secondary)',
   366              fontSize: '1.1rem',
   367              lineHeight: '1.8',
   368              marginBottom: '24px'
   369            }}>
   370              Iraq and Kurdistan offer incredible diversity - from ancient Mesopotamian sites to Kurdish mountain
   371              adventures. Whether you&apos;re interested in history, culture, nature, or adventure, we&apos;ll help you
   372              discover the hidden gems of this remarkable region.
   373            </p>
   374            <div style={{
   375              display: 'flex',
   376              gap: '16px',
   377              justifyContent: 'center',
   378              flexWrap: 'wrap'
   379            }}>
   380              <button className="neon-button tourism">
   381                Travel Guide
   382              </button>
   383              <button className="neon-button hotels">
   384                Find Hotels
   385              </button>
   386              <button className="neon-button restaurants">
   387                Local Cuisine
   388              </button>
   389            </div>
   390          </div>
   391        </div>
   392
   393        {/* Call to Action */}
   394        <div style={{
   395          textAlign: 'center',
   396          marginTop: '60px',
   397          padding: '40px 20px'
   398        }}>
   399          <div className="neon-card tourism tourism-glow" style={{
   400            maxWidth: '600px',
   401            margin: '0 auto',
   402            padding: '32px'
   403          }}>
   404            <h2 style={{
   405              color: 'var(--tourism-color)',
   406              fontSize: '2rem',
   407              marginBottom: '16px',
   408              textShadow: '0 0 10px var(--tourism-color)'
   409            }}>
   410              Ready to Explore?
   411            </h2>
   412            <p style={{
   413              color: 'var(--text-secondary)',
   414              marginBottom: '24px',
   415              fontSize: '1.1rem'
   416            }}>
   417              Start planning your adventure in Iraq & Kurdistan today
   418            </p>
   419            <div style={{
   420              display: 'flex',
   421              gap: '16px',
   422              justifyContent: 'center',
   423              flexWrap: 'wrap'
   424            }}>
   425              <button className="neon-button tourism">
   426                Plan Your Trip
   427              </button>
   428              <button className="neon-button events">
   429                Find Events
   430              </button>
   431            </div>
   432          </div>
   433        </div>
   434      </div>
   435    );
   436  }
I'm considering categories like Events, Hotels, and Tourism, plus subcategories like cuisine and city types.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/components/CityScroller.tsx | sed -n '1,200p'
     1  "use client";
     2
     3  import React, { useEffect, useMemo, useRef, useState } from "react";
     4  import { trackCityScrollerImpression, trackCityScrollerSelect, trackCityScrollerSnap } from "../../lib/analytics";
     5
     6  interface Props {
     7    items: string[];
     8    selected?: string;
     9    onSelect: (value: string) => void;
    10  }
    11
    12  export default function CityScroller({ items, selected, onSelect }: Props) {
    13    const containerRef = useRef<HTMLDivElement | null>(null);
    14    const [activeIndex, setActiveIndex] = useState(0);
    15    const [prevIndex, setPrevIndex] = useState<number | null>(null);
    16
    17    // Map city to id-like slug
    18    const ids = useMemo(() => items.map((c) => slugify(c)), [items]);
    19
    20    useEffect(() => {
    21      // Initial impression: visible items
    22      const visible = getVisibleIds();
    23      if (visible.length > 0) {
    24        trackCityScrollerImpression({ city_list: visible });
    25      }
    26      // Observe visibility to emit impressions on change
    27      const el = containerRef.current;
    28      if (!el) return;
    29
    30      const onScroll = debounce(() => {
    31        const visibleNow = getVisibleIds();
    32        trackCityScrollerImpression({ city_list: visibleNow });
    33        // Determine snapped index
    34        const idx = nearestSnapIndex();
    35        if (idx !== activeIndex) {
    36          trackCityScrollerSnap({ city_id: ids[idx], previous_city_id: prevIndex !== null ? ids[prevIndex] : null });
    37          setPrevIndex(activeIndex);
    38          setActiveIndex(idx);
    39        }
    40      }, 200);
    41
    42      el.addEventListener('scroll', onScroll, { passive: true });
    43      return () => el.removeEventListener('scroll', onScroll as any);
    44      // eslint-disable-next-line react-hooks/exhaustive-deps
    45    }, [items, ids, activeIndex, prevIndex]);
    46
    47    function getVisibleIds(): string[] {
    48      const el = containerRef.current;
    49      if (!el) return [];
    50      const rect = el.getBoundingClientRect();
    51      const children = Array.from(el.children) as HTMLElement[];
    52      const visible: string[] = [];
    53      children.forEach((child, idx) => {
    54        const r = child.getBoundingClientRect();
    55        const visibleWidth = Math.min(r.right, rect.right) - Math.max(r.left, rect.left);
    56        if (visibleWidth > Math.min(120, r.width * 0.6)) {
    57          visible.push(ids[idx]);
    58        }
    59      });
    60      return visible;
    61    }
    62
    63    function nearestSnapIndex(): number {
    64      const el = containerRef.current;
    65      if (!el) return 0;
    66      const children = Array.from(el.children) as HTMLElement[];
    67      let bestIdx = 0;
    68      let minDist = Number.MAX_VALUE;
    69      const center = el.scrollLeft + el.clientWidth / 2;
    70      children.forEach((child, idx) => {
    71        const offset = (child as HTMLElement).offsetLeft + child.clientWidth / 2;
    72        const dist = Math.abs(offset - center);
    73        if (dist < minDist) {
    74          minDist = dist;
    75          bestIdx = idx;
    76        }
    77      });
    78      return bestIdx;
    79    }
    80
    81    function onKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {
    82      const el = containerRef.current;
    83      if (!el) return;
    84      if (e.key === 'ArrowRight') {
    85        e.preventDefault();
    86        const idx = Math.min(activeIndex + 1, items.length - 1);
    87        scrollToIndex(idx);
    88      } else if (e.key === 'ArrowLeft') {
    89        e.preventDefault();
    90        const idx = Math.max(activeIndex - 1, 0);
    91        scrollToIndex(idx);
    92      }
    93    }
    94
    95    function scrollToIndex(idx: number) {
    96      const el = containerRef.current;
    97      if (!el) return;
    98      const child = el.children[idx] as HTMLElement | undefined;
    99      if (child) {
   100        child.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
   101      }
   102    }
   103
   104    return (
   105      <div className="max-w-7xl mx-auto px-4">
   106        <div
   107          ref={containerRef}
   108          className="relative overflow-x-auto whitespace-nowrap snap-x snap-mandatory flex gap-3 md:gap-4 py-2 md:py-3 rou
nded-2xl bg-white/70 backdrop-blur border border-black/10 shadow-sm"
   109          style={{ height: '56px' }}
   110          role="listbox"
   111          aria-label="City scroller"
   112          tabIndex={0}
   113          onKeyDown={onKeyDown}
   114        >
   115          {items.map((city, index) => {
   116            const isActive = (selected ? city === selected : index === activeIndex);
   117            return (
   118              <button
   119                key={city}
   120                role="option"
   121                aria-selected={isActive}
   122                className={`snap-center inline-flex items-center justify-center px-4 md:px-5 h-12 md:h-14 rounded-xl font-
semibold text-sm md:text-base transition-all duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500
${
   123                  isActive
   124                    ? 'bg-indigo-600 text-white shadow-md scale-[1.05] underline decoration-2 underline-offset-4'
   125                    : 'bg-white text-gray-800 border border-black/10 hover:bg-gray-50'
   126                }`}
   127                onClick={() => {
   128                  onSelect(city);
   129                  const idx = index;
   130                  trackCityScrollerSelect({ city_id: ids[idx], user_id: null, entry_source: 'home_scroller' });
   131                  setPrevIndex(activeIndex);
   132                  setActiveIndex(idx);
   133                }}
   134              >
   135                <span className="truncate" title={city}>{city}</span>
   136              </button>
   137            );
   138          })}
   139        </div>
   140      </div>
   141    );
   142  }
   143
   144  function debounce<F extends (...args: any[]) => void>(fn: F, wait: number) {
   145    let t: any;
   146    return (...args: Parameters<F>) => {
   147      clearTimeout(t);
   148      t = setTimeout(() => fn(...args), wait);
   149    };
   150  }
   151
   152  function slugify(s: string): string {
   153    return s
   154      .toString()
   155      .normalize('NFKD')
   156      .replace(/[\u0300-\u036F]/g, '')
   157      .toLowerCase()
   158      .replace(/[^a-z0-9]+/g, '-')
   159      .replace(/(^-|-$)+/g, '');
   160  }
I'll treat the categories based on events, venues, cuisines, cafes, tourism, and cities for now. I'll check messages/en.json for more insights.

root@fe8e7d45430e:/workspace/missinggold# rg '"cities"' -n messages/en.json
276:  "cities": {
I'll check the line numbers for the city list.

root@fe8e7d45430e:/workspace/missinggold# nl -ba messages/en.json | sed -n '260,340p'
   260      "allPrices": "All Prices",
   261      "free": "Free",
   262      "paid": "Paid",
   263      "under25": "Under $25",
   264      "price25to50": "$25 - $50",
   265      "price50to100": "$50 - $100",
   266      "over100": "Over $100",
   267      "notSpecified": "Not specified",
   268      "contactInformation": "Contact Information",
   269      "joinWhatsAppGroup": "Join WhatsApp Group",
   270      "price": "Price",
   271      "imageUnavailable": "Image not available",
   272      "backToEvents": "Back to Events",
   273      "anonymous": "Anonymous",
   274      "general": "General"
   275    },
   276    "cities": {
   277      "baghdad": "Baghdad",
   278      "basra": "Basra",
   279      "mosul": "Mosul",
   280      "erbil": "Erbil",
   281      "sulaymaniyah": "Sulaymaniyah",
   282      "duhok": "Duhok",
   283      "kirkuk": "Kirkuk",
   284      "anbar": "Anbar",
   285      "najaf": "Najaf",
   286      "karbala": "Karbala"
   287    },
   288    "months": {
   289      "january": "January",
   290      "february": "February",
   291      "march": "March",
   292      "april": "April",
   293      "may": "May",
   294      "june": "June",
   295      "july": "July",
   296      "august": "August",
   297      "september": "September",
   298      "october": "October",
   299      "november": "November",
   300      "december": "December"
   301    },
   302    "categoriesPage": {
   303      "title": "Event Categories",
   304      "subtitle": "Discover amazing events across all categories. From music and technology to food and culture, find exac
tly what interests you.",
   305      "ctaTitle": "Cannot Find Your Category?",
   306      "ctaSubtitle": "Create your own event and start building your community today!"
   307    },
   308    "categoryDescriptions": {
   309      "all": "Discover all types of events happening around you",
   310      "technologyInnovation": "Tech talks, hackathons, and innovation showcases",
   311      "businessNetworking": "Networking events, professional meetups, and business conferences",
   312      "musicConcerts": "Live music, concerts, and musical performances",
   313      "artsCulture": "Art exhibitions, cultural events, and creative workshops",
   314      "sportsFitness": "Sports events, fitness classes, and athletic competitions",
   315      "foodDrink": "Culinary events, food festivals, and dining experiences",
   316      "learningDevelopment": "Educational workshops, skill development, and training sessions",
   317      "healthWellness": "Health seminars, wellness workshops, and medical events",
   318      "communitySocial": "Social gatherings, community events, and meetups",
   319      "gamingEsports": "Gaming tournaments, esports competitions, and gaming meetups",
   320      "spiritualReligious": "Spiritual gatherings, religious events, and faith-based meetings",
   321      "familyKids": "Family-friendly events, children's activities, and parenting workshops",
   322      "outdoorAdventure": "Outdoor activities, adventure sports, and nature experiences",
   323      "virtualEvents": "Online events, webinars, and virtual conferences",
   324      "academicConferences": "Academic conferences, research presentations, and scholarly meetings"
   325    },
   326    "hero": {
   327      "liveEventPlatform": "Live Event Platform",
   328      "registerNow": "Register Now",
   329      "getTickets": "Get Tickets",
   330      "joinSummit": "Join Summit",
   331      "exploreArt": "Explore Art",
   332      "eventStartsIn": "Event Starts In",
   333      "days": "DAYS",
   334      "hours": "HRS",
   335      "minutes": "MIN",
   336      "seconds": "SEC"
   337    },
   338    "register": {
   339      "joinIraqEvents": "Join IraqEvents",
   340      "createAccountSubtitle": "Create your account to start organizing amazing events",
I'll give an overview of the repo structure, highlighting key directories like src/app and components. I'll include event categories (16 in total), multi-venue categories (about 5), restaurant cuisines, cafe types, and tourism categories. The city list and sample events data (from public/data/events.json) will also be mentioned. Let's note that citations need to be collected.

root@fe8e7d45430e:/workspace/missinggold# nl -ba public/data/events.json | sed -n '1,200p'
     1  [
     2    {
     3      "id": "1",
     4      "publicId": "ai-summit-2025",
     5      "title": "AI Innovation Summit",
     6      "description": "Explore AI and machine learning breakthroughs with talks, workshops, and networking.",
     7      "date": "2025-10-10T10:00:00Z",
     8      "location": "Baghdad Tech Center, Baghdad",
     9      "category": "Technology & Innovation",
    10      "price": 50,
    11      "isFree": false,
    12      "imageUrl": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
    13      "user": { "name": "Tech Events Iraq", "email": "tech@iraqevents.com" }
    14    },
    15    {
    16      "id": "2",
    17      "publicId": "music-festival-erbil",
    18      "title": "Kurdish Music Festival",
    19      "description": "Experience the rich musical heritage of Kurdistan with traditional and contemporary artists.",
    20      "date": "2025-10-15T18:00:00Z",
    21      "location": "Citadel Park, Erbil",
    22      "category": "Music & Concerts",
    23      "price": 0,
    24      "isFree": true,
    25      "imageUrl": "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
    26      "user": { "name": "Kurdistan Arts Council", "email": "arts@kurdistan.org" }
    27    },
    28    {
    29      "id": "3",
    30      "publicId": "business-workshop-basra",
    31      "title": "Business Leadership Workshop",
    32      "description": "Learn essential leadership skills and networking strategies for growth in the Middle East.",
    33      "date": "2025-10-20T09:00:00Z",
    34      "location": "Business District, Basra",
    35      "category": "Business",
    36      "price": 75,
    37      "isFree": false,
    38      "imageUrl": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
    39      "user": { "name": "Business Development Iraq", "email": "business@iraq.com" }
    40    },
    41    {
    42      "id": "4",
    43      "publicId": "art-exhibition-mosul",
    44      "title": "Modern Art Exhibition",
    45      "description": "Contemporary Iraqi and international art featuring 50+ artists.",
    46      "date": "2025-11-01T14:00:00Z",
    47      "location": "Culture Center, Mosul",
    48      "category": "Arts & Culture",
    49      "price": 30,
    50      "isFree": false,
    51      "imageUrl": "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&
q=80",
    52      "user": { "name": "Mosul Cultural Foundation", "email": "culture@mosul.org" }
    53    },
    54    {
    55      "id": "5",
    56      "publicId": "food-festival-baghdad",
    57      "title": "Iraqi Food Festival",
    58      "description": "Taste authentic Iraqi cuisine from various regions with live cooking demos.",
    59      "date": "2025-11-05T12:00:00Z",
    60      "location": "Al-Zawra Park, Baghdad",
    61      "category": "Food & Drink",
    62      "price": 15,
    63      "isFree": false,
    64      "imageUrl": "https://images.unsplash.com/photo-1414235077428-338989a2e8c0?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
    65      "user": { "name": "Baghdad Culinary Society", "email": "food@baghdad.com" }
    66    },
    67    {
    68      "id": "6",
    69      "publicId": "sports-tournament-sulaymaniyah",
    70      "title": "Football Championship",
    71      "description": "Regional football tournament featuring teams across Kurdistan and Iraq.",
    72      "date": "2025-11-10T16:00:00Z",
    73      "location": "Sulaymaniyah Stadium, Sulaymaniyah",
    74      "category": "Sports & Fitness",
    75      "price": 25,
    76      "isFree": false,
    77      "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
    78      "user": { "name": "Kurdistan Football League", "email": "sports@kurdistan.com" }
    79    },
    80    {
    81      "id": "7",
    82      "publicId": "health-expo-karbala",
    83      "title": "Health & Wellness Expo",
    84      "description": "Exhibitions and talks on wellness, nutrition, and preventive care.",
    85      "date": "2025-11-18T10:00:00Z",
    86      "location": "Convention Hall, Karbala",
    87      "category": "Health & Wellness",
    88      "price": 0,
    89      "isFree": true,
    90      "imageUrl": "https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=800&h=600&fit=crop&crop=center&auto=format&
q=80",
    91      "user": { "name": "Iraq Health Network", "email": "health@iraq.org" }
    92    },
    93    {
    94      "id": "8",
    95      "publicId": "community-day-najaf",
    96      "title": "Community Volunteering Day",
    97      "description": "Join local organizations for a day of volunteering and community service.",
    98      "date": "2025-11-22T09:00:00Z",
    99      "location": "Old City, Najaf",
   100      "category": "Community & Social",
   101      "price": 0,
   102      "isFree": true,
   103      "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
   104      "user": { "name": "Najaf Community Org", "email": "community@najaf.org" }
   105    },
   106    {
   107      "id": "9",
   108      "publicId": "startup-pitch-erbil",
   109      "title": "Startup Pitch Night",
   110      "description": "Early-stage startups pitch to mentors and investors. Open networking.",
   111      "date": "2025-11-25T19:00:00Z",
   112      "location": "Innovation Hub, Erbil",
   113      "category": "Business",
   114      "price": 10,
   115      "isFree": false,
   116      "imageUrl": "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=800&h=600&fit=crop&crop=center&auto=form
at&q=80",
   117      "user": { "name": "Erbil Startup Network", "email": "startups@erbil.io" }
   118    },
   119    {
   120      "id": "10",
   121      "publicId": "dance-night-duhok",
   122      "title": "Traditional Dance Night",
   123      "description": "An evening of Kurdish traditional dances and folk music.",
   124      "date": "2025-12-01T20:00:00Z",
   125      "location": "City Theatre, Duhok",
   126      "category": "Arts & Culture",
   127      "price": 5,
   128      "isFree": false,
   129      "imageUrl": "https://images.unsplash.com/photo-1549490349-8643362247b5?w=800&h=600&fit=crop&crop=center&auto=format&
q=80",
   130      "user": { "name": "Duhok Cultural Center", "email": "culture@duhok.org" }
   131    }
   132  ]
I’ll list the tabs in MultiVenueHomepage.tsx using nl -ba.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/app/components/MultiVenueHomepage.tsx | sed -n '1,160p'
     1  'use client';
     2
     3  import { useState, useEffect } from 'react';
     4  import Image from 'next/image';
     5  import Link from 'next/link';
     6
     7  interface Venue {
     8    id: string;
     9    publicId: string;
    10    type: 'EVENT' | 'HOTEL' | 'RESTAURANT' | 'ACTIVITY' | 'SERVICE';
    11    title: string;
    12    description: string;
    13    location: string;
    14    city: string;
    15    category?: string;
    16    priceRange?: string;
    17    imageUrl?: string;
    18    featured: boolean;
    19    verified: boolean;
    20    cuisineType?: string;
    21    eventDate?: string;
    22    amenities?: string[];
    23  }
    24
    25  export default function MultiVenueHomepage() {
    26    const [activeTab, setActiveTab] = useState<string>('all');
    27    const [venues, setVenues] = useState<Venue[]>([]);
    28    const [loading, setLoading] = useState(true);
    29
    30    const tabs = [
    31      { id: 'all', label: 'All', icon: '🌟' },
    32      { id: 'EVENT', label: 'Events', icon: '🎉' },
    33      { id: 'HOTEL', label: 'Hotels', icon: '🏨' },
    34      { id: 'RESTAURANT', label: 'Restaurants', icon: '🍽️' },
    35      { id: 'ACTIVITY', label: 'Activities', icon: '🎯' },
    36    ];
    37
    38    useEffect(() => {
    39      fetchVenues();
    40    }, [activeTab]);
    41
    42    const fetchVenues = async () => {
    43      setLoading(true);
    44      try {
    45        const params = new URLSearchParams();
    46        if (activeTab !== 'all') {
    47          params.set('type', activeTab);
    48        }
    49        params.set('locale', 'en'); // TODO: Get from context
    50
    51        const response = await fetch(`/api/venues?${params}`);
    52        const data = await response.json();
    53
    54        if (data.success) {
    55          setVenues(data.venues || []);
    56        }
    57      } catch (error) {
    58        console.error('Error fetching venues:', error);
    59      } finally {
    60        setLoading(false);
    61      }
    62    };
    63
    64    const getVenueTypeIcon = (type: string) => {
    65      switch (type) {
    66        case 'EVENT': return '🎉';
    67        case 'HOTEL': return '🏨';
    68        case 'RESTAURANT': return '🍽️';
    69        case 'ACTIVITY': return '🎯';
    70        case 'SERVICE': return '🛎️';
    71        default: return '📍';
    72      }
    73    };
    74
    75    const formatPrice = (priceRange?: string) => {
    76      if (!priceRange) return null;
    77      return priceRange;
    78    };
    79
    80    return (
    81      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
    82        {/* Hero Section */}
    83        <section className="relative py-20 px-4 text-center">
    84          <div className="max-w-4xl mx-auto">
    85            <h1 className="text-5xl font-bold text-gray-900 mb-6">
    86              🏰 Discover Iraq & Kurdistan
    87            </h1>
    88            <p className="text-xl text-gray-600 mb-8">
    89              Events • Hotels • Restaurants • Activities - All in One Platform
    90            </p>
    91
    92            {/* Tab Navigation */}
    93            <div className="flex flex-wrap justify-center gap-2 mb-8">
    94              {tabs.map((tab) => (
    95                <button
    96                  key={tab.id}
    97                  onClick={() => setActiveTab(tab.id)}
    98                  className={`px-6 py-3 rounded-full font-semibold transition-all duration-300 ${
    99                    activeTab === tab.id
   100                      ? 'bg-blue-600 text-white shadow-lg transform scale-105'
   101                      : 'bg-white text-gray-700 hover:bg-blue-50 shadow-md'
   102                  }`}
   103                >
   104                  {tab.icon} {tab.label}
   105                </button>
   106              ))}
   107            </div>
   108          </div>
   109        </section>
   110
   111        {/* Venues Grid */}
   112        <section className="px-4 pb-20">
   113          <div className="max-w-7xl mx-auto">
   114            {loading ? (
   115              <div className="flex justify-center items-center py-20">
   116                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
   117              </div>
   118            ) : (
   119              <>
   120                {venues.length === 0 ? (
   121                  <div className="text-center py-20">
   122                    <div className="text-6xl mb-4">🏗️</div>
   123                    <h3 className="text-2xl font-bold text-gray-800 mb-2">
   124                      Coming Soon!
   125                    </h3>
   126                    <p className="text-gray-600">
   127                      {activeTab === 'all'
   128                        ? 'Venues are being added to our platform'
   129                        : `${tabs.find(t => t.id === activeTab)?.label} will be available soon`
   130                      }
   131                    </p>
   132                  </div>
   133                ) : (
   134                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
   135                    {venues.map((venue) => (
   136                      <VenueCard key={venue.id} venue={venue} />
   137                    ))}
   138                  </div>
   139                )}
   140              </>
   141            )}
   142          </div>
   143        </section>
   144
   145        {/* CTA Section */}
   146        <section className="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16 px-4">
   147          <div className="max-w-4xl mx-auto text-center">
   148            <h2 className="text-3xl font-bold mb-4">
   149              Join the Platform
   150            </h2>
   151            <p className="text-xl mb-8 opacity-90">
   152              List your business and reach thousands of customers
   153            </p>
   154            <div className="flex flex-wrap justify-center gap-4">
   155              <Link
   156                href="/register"
   157                className="bg-white text-blue-600 px-8 py-3 rounded-full font-semibold hover:bg-blue-50 transition-colors"
   158              >
   159                Sign Up Free
   160              </Link>
I’ve gathered the subcategory list for tabs. Now, I’ll address translation and mention countries.ts.

root@fe8e7d45430e:/workspace/missinggold# nl -ba src/lib/countries.ts | sed -n '1,160p'
     1  // Multi-country configuration for Eventra
     2  // Add new countries here with their specific settings
     3
     4  export interface CountryConfig {
     5    name: string;
     6    code: string;
     7    currency: string;
     8    currencySymbol: string;
     9    languages: string[];
    10    defaultLanguage: string;
    11    cities: string[];
    12    timezone: string;
    13    dateFormat: string;
    14    features: string[];
    15    paymentMethods: string[];
    16    categories: Array<{
    17      key: string;
    18      name: string;
    19      icon: string;
    20    }>;
    21  }
    22
    23  export const COUNTRY_CONFIGS: Record<string, CountryConfig> = {
    24    // EXISTING: Iraq (your current setup)
    25    IQ: {
    26      name: 'Iraq',
    27      code: 'IQ',
    28      currency: 'IQD',
    29      currencySymbol: 'د.ع',
    30      languages: ['ar', 'ku', 'en'],
    31      defaultLanguage: 'ar',
    32      cities: [
    33        'Baghdad', 'Basra', 'Erbil', 'Sulaymaniyah',
    34        'Mosul', 'Duhok', 'Kirkuk', 'Anbar', 'Najaf', 'Karbala'
    35      ],
    36      timezone: 'Asia/Baghdad',
    37      dateFormat: 'DD/MM/YYYY',
    38      features: ['whatsapp_integration', 'cash_payments', 'multilingual'],
    39      paymentMethods: ['cash', 'bank_transfer'],
    40      categories: [
    41        { key: 'tech', name: 'Technology', icon: '💻' },
    42        { key: 'music', name: 'Music', icon: '🎵' },
    43        { key: 'business', name: 'Business', icon: '💼' },
    44        { key: 'art', name: 'Arts & Culture', icon: '🎨' },
    45        { key: 'sports', name: 'Sports', icon: '⚽' },
    46        { key: 'food', name: 'Food & Dining', icon: '🍽️' },
    47        { key: 'health', name: 'Health & Wellness', icon: '🏥' },
    48        { key: 'community', name: 'Community', icon: '👥' }
    49      ]
    50    },
    51
    52    // NEW: UAE
    53    AE: {
    54      name: 'United Arab Emirates',
    55      code: 'AE',
    56      currency: 'AED',
    57      currencySymbol: 'د.إ',
    58      languages: ['ar', 'en'],
    59      defaultLanguage: 'ar',
    60      cities: [
    61        'Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman',
    62        'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain'
    63      ],
    64      timezone: 'Asia/Dubai',
    65      dateFormat: 'DD/MM/YYYY',
    66      features: ['credit_cards', 'luxury_events', 'international_speakers'],
    67      paymentMethods: ['credit_card', 'apple_pay', 'google_pay', 'cash'],
    68      categories: [
    69        { key: 'business', name: 'Business Networking', icon: '💼' },
    70        { key: 'luxury', name: 'Luxury Events', icon: '💎' },
    71        { key: 'tech', name: 'Technology', icon: '💻' },
    72        { key: 'desert', name: 'Desert Adventures', icon: '🏜️' },
    73        { key: 'finance', name: 'Finance & Investment', icon: '💰' },
    74        { key: 'art', name: 'Arts & Culture', icon: '🎨' },
    75        { key: 'food', name: 'Fine Dining', icon: '🍽️' },
    76        { key: 'wellness', name: 'Wellness & Spa', icon: '🧘' }
    77      ]
    78    },
    79
    80    // NEW: Saudi Arabia (for future)
    81    SA: {
    82      name: 'Saudi Arabia',
    83      code: 'SA',
    84      currency: 'SAR',
    85      currencySymbol: '﷼',
    86      languages: ['ar', 'en'],
    87      defaultLanguage: 'ar',
    88      cities: [
    89        'Riyadh', 'Jeddah', 'Mecca', 'Medina', 'Dammam',
    90        'Khobar', 'Tabuk', 'Abha', 'Taif'
    91      ],
    92      timezone: 'Asia/Riyadh',
    93      dateFormat: 'DD/MM/YYYY',
    94      features: ['vision_2030', 'mega_events', 'cultural_events'],
    95      paymentMethods: ['credit_card', 'mada', 'apple_pay', 'stc_pay'],
    96      categories: [
    97        { key: 'business', name: 'Business', icon: '💼' },
    98        { key: 'culture', name: 'Cultural Events', icon: '🏛️' },
    99        { key: 'sports', name: 'Sports', icon: '⚽' },
   100        { key: 'tech', name: 'Technology', icon: '💻' },
   101        { key: 'entertainment', name: 'Entertainment', icon: '🎭' },
   102        { key: 'education', name: 'Education', icon: '📚' }
   103      ]
   104    }
   105  };
   106
   107  // Helper functions
   108  export const getCountryConfig = (countryCode: string): CountryConfig | null => {
   109    return COUNTRY_CONFIGS[countryCode.toUpperCase()] || null;
   110  };
   111
   112  export const getAllCountries = (): CountryConfig[] => {
   113    return Object.values(COUNTRY_CONFIGS);
   114  };
   115
   116  export const getCountryCities = (countryCode: string): string[] => {
   117    const config = getCountryConfig(countryCode);
   118    return config ? config.cities : [];
   119  };
   120
   121  export const getCountryCategories = (countryCode: string) => {
   122    const config = getCountryConfig(countryCode);
   123    return config ? config.categories : [];
   124  };
I’ll grab relevant sections from MARKETING_REVENUE_STRATEGY.md, focusing on summaries and key references.

root@fe8e7d45430e:/workspace/missinggold# nl -ba MARKETING_REVENUE_STRATEGY.md | sed -n '1,160p'
     1  # 🚀 EVENTRA: COMPREHENSIVE MARKETING & REVENUE STRATEGY
     2  ## Iraq Launch → Global Expansion Roadmap
     3
     4  ---
     5
     6  ## 🎯 **EXECUTIVE SUMMARY**
     7
     8  **Mission**: Launch Eventra as the dominant event platform in Iraq, then rapidly scale across the Middle East using AI-p
owered automation and intelligent localization.
     9
    10  **Strategy**: Start with Iraq's underserved Kurdish and Arabic markets, build automated revenue streams, then replicate
the model across 20+ countries with minimal manual intervention.
    11
    12  **Goal**: $10M ARR by Year 2, $50M ARR by Year 3, across 10+ countries.
    13
    14  ---
    15
    16  ## 🌍 **INTELLIGENT LOCALIZATION STRATEGY**
    17
    18  ### **🧠 AI-POWERED GEO-LANGUAGE DETECTION**
    19
    20  #### **Smart Language Selection System**
    21  ```javascript
    22  // Auto-detect user's optimal language
    23  const detectOptimalLanguage = (userLocation, browserLang, userHistory) => {
    24    // Priority order:
    25    1. User's saved preference (highest priority)
    26    2. Geo-location + cultural mapping
    27    3. Browser language detection
    28    4. Fallback to region default
    29
    30    // Iraq Example:
    31    Baghdad → Arabic (default)
    32    Erbil/Sulaymaniyah → Kurdish (default)
    33    Tourist areas → English option prominent
    34  }
    35  ```
    36
    37  #### **Geo-Cultural Intelligence Map**
    38  ```
    39  IRAQ LOCALIZATION:
    40  🏙️ Baghdad: Arabic (primary), English (business)
    41  🏔️ Erbil: Kurdish (primary), Arabic (secondary), English (business)
    42  🏛️ Sulaymaniyah: Kurdish (primary), Arabic (secondary)
    43  🌍 Tourist hotspots: English prominent with local language
    44
    45  UAE LOCALIZATION:
    46  🏙️ Dubai: English (primary), Arabic (secondary)
    47  🏛️ Abu Dhabi: Arabic (primary), English (business)
    48  🏖️ Tourist areas: English (primary), Arabic (cultural events)
    49
    50  TURKEY LOCALIZATION:
    51  🏙️ Istanbul: Turkish (primary), English (business), Kurdish (southeast)
    52  🏔️ Southeast regions: Kurdish (primary), Turkish (secondary)
    53  ```
    54
    55  ### **🎨 CULTURAL ADAPTATION ENGINE**
    56
    57  #### **Content Customization by Region**
    58  ```
    59  EVENT CATEGORIES (Auto-adapted by location):
    60
    61  IRAQ:
    62  - Kurdish Cultural Events (Newroz, traditional festivals)
    63  - Islamic Religious Events (Ramadan, Eid celebrations)
    64  - Business Conferences (oil, tech, trade)
    65  - Family Events (wedding halls, gatherings)
    66  - Educational Seminars (universities, training)
    67
    68  UAE:
    69  - International Business Events (trade shows, conferences)
    70  - Cultural Festivals (multicultural celebrations)
    71  - Sports Events (Formula 1, football)
    72  - Luxury Events (galas, exhibitions)
    73  - Tech & Innovation (startup events, AI conferences)
    74
    75  TURKEY:
    76  - Cultural Heritage Events (historical celebrations)
    77  - Business Conferences (manufacturing, tourism)
    78  - Kurdish Cultural Events (southeast regions)
    79  - International Events (connecting Europe-Asia)
    80  ```
    81
    82  ---
    83
    84  ## 💰 **EXHAUSTIVE REVENUE STREAM ARCHITECTURE**
    85
    86  ### **🏆 PRIMARY REVENUE STREAMS (High-Volume)**
    87
    88  #### **1. Event Ticketing Commission (40% of revenue)**
    89  ```
    90  PRICING MODEL:
    91  - Free events: $0 commission (build user base)
    92  - Paid events: 2.5% commission (competitive vs Eventbrite's 3-5%)
    93  - Premium events: 3.5% commission (high-value events)
    94  - Corporate events: 4.5% commission (enterprise pricing)
    95
    96  VOLUME PROJECTIONS (Iraq Year 1):
    97  - 1,000 events/month × $50 average ticket × 2.5% = $1,250/month
    98  - Growing to 10,000 events/month × $75 average = $18,750/month
    99  - Annual potential: $150K-$225K from Iraq alone
   100  ```
   101
   102  #### **2. Hotel Booking Integration (25% of revenue)**
   103  ```
   104  PARTNERSHIP MODEL:
   105  - Commission: 8-12% from hotel bookings
   106  - Average booking: $80/night × 2 nights = $160
   107  - Commission per booking: $13-19
   108  - Cross-sell rate: 15% of event attendees
   109
   110  AUTOMATION:
   111  - AI suggests hotels near event venues
   112  - Dynamic pricing based on event dates
   113  - Package deals (event ticket + hotel)
   114  - Instant booking through API integration
   115
   116  PROJECTED REVENUE:
   117  - 100 hotel bookings/month × $15 commission = $1,500/month
   118  - Growing to 1,000 bookings/month = $15,000/month
   119  - Annual potential: $120K-$180K from Iraq alone
   120  ```
   121
   122  #### **3. Travel Package Commissions (15% of revenue)**
   123  ```
   124  SERVICES:
   125  - Flight bookings (5-8% commission)
   126  - Car rentals (10-15% commission)
   127  - Tour packages (15-20% commission)
   128  - Complete travel itineraries
   129
   130  AI AUTOMATION:
   131  - Auto-generate travel packages based on events
   132  - Cross-country event recommendations
   133  - Dynamic pricing optimization
   134  - Partnership with regional airlines
   135
   136  REVENUE EXAMPLE:
   137  - Flight booking: $400 × 5% = $20 commission
   138  - Car rental: $100 × 12% = $12 commission
   139  - Tour package: $200 × 18% = $36 commission
   140  - Total per package: $68 commission
   141  - 50 packages/month = $3,400/month
   142  ```
   143
   144  ### **🎯 SECONDARY REVENUE STREAMS (High-Margin)**
   145
   146  #### **4. Premium Event Listings (10% of revenue)**
   147  ```
   148  PREMIUM FEATURES:
   149  - Featured placement: $20-50/event
   150  - Homepage banner: $100-200/event
   151  - Social media promotion: $30-80/event
   152  - Email marketing inclusion: $25-60/event
   153
   154  AUTOMATION:
   155  - Self-service premium upgrade portal
   156  - AI-optimized placement based on user behavior
   157  - Automated social media posting
   158  - Performance analytics dashboard
   159
   160  MONTHLY POTENTIAL:
I'll structure this with sections and bullet points, listing the 9 major categories and key details.

I’m organizing the content into 9 clear categories and planning to cite the README.

root@fe8e7d45430e:/workspace/missinggold# nl -ba README.md | sed -n '1,160p'
     1  # Missinggold - Event Management Platform
     2
     3  A comprehensive event management and venue platform for Iraq & Kurdistan, featuring hotels, restaurants, activities, and
 entertainment venues.
     4
     5  ## Features
     6
     7  - 🎯 **Multi-language Support**: English, Arabic, and Kurdish
     8  - 🏨 **Venue Management**: Hotels, restaurants, cafes, and tourism activities
     9  - 📱 **Progressive Web App**: Offline-capable mobile experience
    10  - 🔐 **Authentication**: Secure user authentication with NextAuth.js
    11  - 💎 **Modern Stack**: Next.js 15, React 19, TypeScript, Prisma
    12  - 🎨 **Beautiful UI**: Tailwind CSS with responsive design
    13  - 🌍 **RTL Support**: Full right-to-left language support
    14
    15  ## Quick Start
    16
    17  ### Prerequisites
    18
    19  - Node.js 18+
    20  - PostgreSQL database
    21  - Prisma CLI
    22
    23  ### Installation
    24
    25  ```bash
    26  # Clone the repository
    27  git clone https://github.com/absulysuly/missinggold.git
    28  cd missinggold
    29
    30  # Install dependencies
    31  npm ci
    32
    33  # Set up environment variables
    34  cp .env.example .env.local
    35  # Edit .env.local with your database URL and other secrets
    36
    37  # Set up the database
    38  npm run db:deploy
    39  npm run db:seed
    40
    41  # Start development server
    42  npm run dev
    43  ```
    44
    45  Visit [http://localhost:3000](http://localhost:3000) to see the application.
    46
    47  ## Environment Variables
    48
    49  Create a `.env.local` file in the root directory with the following variables:
    50
    51  ```bash
    52  # Database
    53  DATABASE_URL="postgresql://user:password@localhost:5432/missinggold"
    54
    55  # Authentication
    56  NEXTAUTH_SECRET="your-nextauth-secret-here"
    57  NEXTAUTH_URL="http://localhost:3000"
    58
    59  # Rate Limiting (Upstash Redis)
    60  UPSTASH_REDIS_REST_URL="your-upstash-url"
    61  UPSTASH_REDIS_REST_TOKEN="your-upstash-token"
    62
    63  # Email (Resend)
    64  RESEND_API_KEY="your-resend-api-key"
    65
    66  # Analytics (Optional)
    67  SENTRY_DSN="your-sentry-dsn"
    68  ```
    69
    70  ## Scripts
    71
    72  - `npm run dev` - Start development server
    73  - `npm run build` - Build for production
    74  - `npm run start` - Start production server
    75  - `npm run lint` - Run ESLint
    76  - `npm run type-check` - Run TypeScript checking
    77  - `npm run db:migrate` - Run database migrations
    78  - `npm run db:seed` - Seed database with initial data
    79
    80  ## Deployment
    81
    82  See [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed production deployment instructions.
    83
    84  ## Project Structure
    85
    86  ```
    87  ├── src/
    88  │   ├── app/              # Next.js app router pages
    89  │   ├── components/       # Reusable React components
    90  │   ├── lib/              # Utility libraries
    91  │   └── types/            # TypeScript type definitions
    92  ├── prisma/              # Database schema and migrations
    93  ├── public/              # Static assets
    94  ├── messages/            # i18n translation files
    95  └── scripts/             # Build and maintenance scripts
    96  ```
    97
    98  ## Contributing
    99
   100  1. Fork the repository
   101  2. Create your feature branch (`git checkout -b feature/amazing-feature`)
   102  3. Commit your changes (`git commit -m 'Add some amazing feature'`)
   103  4. Push to the branch (`git push origin feature/amazing-feature`)
   104  5. Open a Pull Request
   105
   106  ## License
   107
   108  This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
   109
   110  ## Security
   111
   112  If you discover any security issues, please email [security@example.com](mailto:security@example.com) instead of using t
he issue tracker.
   113
   114  **Note**: After deployment, rotate all secrets that were removed during repository extraction.
I'll break down the overview, categories, and structure, referencing key files with citations.

I'll finalize the message with Markdown headings, referencing the necessary files, subcategories, and CTAs.